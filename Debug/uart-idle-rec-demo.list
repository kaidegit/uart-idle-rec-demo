
uart-idle-rec-demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000075f4  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000019c  080076b4  080076b4  000176b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007850  08007850  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08007850  08007850  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007850  08007850  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007850  08007850  00017850  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007854  08007854  00017854  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08007858  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002060  20000074  080078cc  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200020d4  080078cc  000220d4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ccde  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003cb0  00000000  00000000  0003cd7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001690  00000000  00000000  00040a30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001508  00000000  00000000  000420c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000189d6  00000000  00000000  000435c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a876  00000000  00000000  0005bf9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00097c5a  00000000  00000000  00076814  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010e46e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000053d8  00000000  00000000  0010e4c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000074 	.word	0x20000074
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800769c 	.word	0x0800769c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000078 	.word	0x20000078
 8000104:	0800769c 	.word	0x0800769c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80003f4:	b580      	push	{r7, lr}
 80003f6:	af00      	add	r7, sp, #0
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of uart_tx_lock */
  uart_tx_lockHandle = osSemaphoreNew(1, 1, &uart_tx_lock_attributes);
 80003f8:	4b0e      	ldr	r3, [pc, #56]	; (8000434 <MX_FREERTOS_Init+0x40>)
 80003fa:	001a      	movs	r2, r3
 80003fc:	2101      	movs	r1, #1
 80003fe:	2001      	movs	r0, #1
 8000400:	f004 f946 	bl	8004690 <osSemaphoreNew>
 8000404:	0002      	movs	r2, r0
 8000406:	4b0c      	ldr	r3, [pc, #48]	; (8000438 <MX_FREERTOS_Init+0x44>)
 8000408:	601a      	str	r2, [r3, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of upper_queue */
  upper_queueHandle = osMessageQueueNew (16, sizeof(uart_buf_t), &upper_queue_attributes);
 800040a:	4b0c      	ldr	r3, [pc, #48]	; (800043c <MX_FREERTOS_Init+0x48>)
 800040c:	001a      	movs	r2, r3
 800040e:	2121      	movs	r1, #33	; 0x21
 8000410:	2010      	movs	r0, #16
 8000412:	f004 fa61 	bl	80048d8 <osMessageQueueNew>
 8000416:	0002      	movs	r2, r0
 8000418:	4b09      	ldr	r3, [pc, #36]	; (8000440 <MX_FREERTOS_Init+0x4c>)
 800041a:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800041c:	4a09      	ldr	r2, [pc, #36]	; (8000444 <MX_FREERTOS_Init+0x50>)
 800041e:	4b0a      	ldr	r3, [pc, #40]	; (8000448 <MX_FREERTOS_Init+0x54>)
 8000420:	2100      	movs	r1, #0
 8000422:	0018      	movs	r0, r3
 8000424:	f004 f89e 	bl	8004564 <osThreadNew>
 8000428:	0002      	movs	r2, r0
 800042a:	4b08      	ldr	r3, [pc, #32]	; (800044c <MX_FREERTOS_Init+0x58>)
 800042c:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 800042e:	46c0      	nop			; (mov r8, r8)
 8000430:	46bd      	mov	sp, r7
 8000432:	bd80      	pop	{r7, pc}
 8000434:	08007730 	.word	0x08007730
 8000438:	20000098 	.word	0x20000098
 800043c:	08007718 	.word	0x08007718
 8000440:	20000094 	.word	0x20000094
 8000444:	080076f4 	.word	0x080076f4
 8000448:	08000451 	.word	0x08000451
 800044c:	20000090 	.word	0x20000090

08000450 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000450:	b580      	push	{r7, lr}
 8000452:	b084      	sub	sp, #16
 8000454:	af00      	add	r7, sp, #0
 8000456:	6078      	str	r0, [r7, #4]
    static uint16_t buffer_len = 0;
    static uint8_t send_buf[512];
  for(;;)
  {
    if (osOK ==
    	osMessageQueueGet(upper_queueHandle, &uart_rec, NULL, osWaitForever)) {
 8000458:	4b41      	ldr	r3, [pc, #260]	; (8000560 <StartDefaultTask+0x110>)
 800045a:	6818      	ldr	r0, [r3, #0]
 800045c:	2301      	movs	r3, #1
 800045e:	425b      	negs	r3, r3
 8000460:	4940      	ldr	r1, [pc, #256]	; (8000564 <StartDefaultTask+0x114>)
 8000462:	2200      	movs	r2, #0
 8000464:	f004 fb0e 	bl	8004a84 <osMessageQueueGet>
 8000468:	1e03      	subs	r3, r0, #0
    if (osOK ==
 800046a:	d1f5      	bne.n	8000458 <StartDefaultTask+0x8>
    	for (uint8_t i = 0; i < uart_rec.len; i++) {
 800046c:	230f      	movs	r3, #15
 800046e:	18fb      	adds	r3, r7, r3
 8000470:	2200      	movs	r2, #0
 8000472:	701a      	strb	r2, [r3, #0]
 8000474:	e06b      	b.n	800054e <StartDefaultTask+0xfe>
    		switch (state) {
 8000476:	4b3c      	ldr	r3, [pc, #240]	; (8000568 <StartDefaultTask+0x118>)
 8000478:	781b      	ldrb	r3, [r3, #0]
 800047a:	2b00      	cmp	r3, #0
 800047c:	d002      	beq.n	8000484 <StartDefaultTask+0x34>
 800047e:	2b01      	cmp	r3, #1
 8000480:	d00f      	beq.n	80004a2 <StartDefaultTask+0x52>
 8000482:	e05e      	b.n	8000542 <StartDefaultTask+0xf2>
    		case 0:
    			if (uart_rec.buf[i] == '{') {
 8000484:	230f      	movs	r3, #15
 8000486:	18fb      	adds	r3, r7, r3
 8000488:	781b      	ldrb	r3, [r3, #0]
 800048a:	4a36      	ldr	r2, [pc, #216]	; (8000564 <StartDefaultTask+0x114>)
 800048c:	18d3      	adds	r3, r2, r3
 800048e:	785b      	ldrb	r3, [r3, #1]
 8000490:	2b7b      	cmp	r3, #123	; 0x7b
 8000492:	d155      	bne.n	8000540 <StartDefaultTask+0xf0>
    				state ++;
 8000494:	4b34      	ldr	r3, [pc, #208]	; (8000568 <StartDefaultTask+0x118>)
 8000496:	781b      	ldrb	r3, [r3, #0]
 8000498:	3301      	adds	r3, #1
 800049a:	b2da      	uxtb	r2, r3
 800049c:	4b32      	ldr	r3, [pc, #200]	; (8000568 <StartDefaultTask+0x118>)
 800049e:	701a      	strb	r2, [r3, #0]
    			}
    			break;
 80004a0:	e04e      	b.n	8000540 <StartDefaultTask+0xf0>
    		case 1:
    			if (uart_rec.buf[i] == '}') {
 80004a2:	230f      	movs	r3, #15
 80004a4:	18fb      	adds	r3, r7, r3
 80004a6:	781b      	ldrb	r3, [r3, #0]
 80004a8:	4a2e      	ldr	r2, [pc, #184]	; (8000564 <StartDefaultTask+0x114>)
 80004aa:	18d3      	adds	r3, r2, r3
 80004ac:	785b      	ldrb	r3, [r3, #1]
 80004ae:	2b7d      	cmp	r3, #125	; 0x7d
 80004b0:	d124      	bne.n	80004fc <StartDefaultTask+0xac>

    				osSemaphoreAcquire(uart_tx_lockHandle, osWaitForever);
 80004b2:	4b2e      	ldr	r3, [pc, #184]	; (800056c <StartDefaultTask+0x11c>)
 80004b4:	681b      	ldr	r3, [r3, #0]
 80004b6:	2201      	movs	r2, #1
 80004b8:	4252      	negs	r2, r2
 80004ba:	0011      	movs	r1, r2
 80004bc:	0018      	movs	r0, r3
 80004be:	f004 f97b 	bl	80047b8 <osSemaphoreAcquire>
    				// make sure the buffer offered to dma do not change when transmitting.
    				memcpy(send_buf, buffer, buffer_len);
 80004c2:	4b2b      	ldr	r3, [pc, #172]	; (8000570 <StartDefaultTask+0x120>)
 80004c4:	881b      	ldrh	r3, [r3, #0]
 80004c6:	001a      	movs	r2, r3
 80004c8:	492a      	ldr	r1, [pc, #168]	; (8000574 <StartDefaultTask+0x124>)
 80004ca:	4b2b      	ldr	r3, [pc, #172]	; (8000578 <StartDefaultTask+0x128>)
 80004cc:	0018      	movs	r0, r3
 80004ce:	f007 f807 	bl	80074e0 <memcpy>
    				HAL_UART_Transmit_DMA(&huart2, send_buf, buffer_len);
 80004d2:	4b27      	ldr	r3, [pc, #156]	; (8000570 <StartDefaultTask+0x120>)
 80004d4:	881a      	ldrh	r2, [r3, #0]
 80004d6:	4928      	ldr	r1, [pc, #160]	; (8000578 <StartDefaultTask+0x128>)
 80004d8:	4b28      	ldr	r3, [pc, #160]	; (800057c <StartDefaultTask+0x12c>)
 80004da:	0018      	movs	r0, r3
 80004dc:	f002 fb10 	bl	8002b00 <HAL_UART_Transmit_DMA>
//    				HAL_UART_Transmit(&huart2, buffer, buffer_len, 0xff);

    				state = 0;
 80004e0:	4b21      	ldr	r3, [pc, #132]	; (8000568 <StartDefaultTask+0x118>)
 80004e2:	2200      	movs	r2, #0
 80004e4:	701a      	strb	r2, [r3, #0]
    				memset(buffer, 0, sizeof(buffer));
 80004e6:	2380      	movs	r3, #128	; 0x80
 80004e8:	009a      	lsls	r2, r3, #2
 80004ea:	4b22      	ldr	r3, [pc, #136]	; (8000574 <StartDefaultTask+0x124>)
 80004ec:	2100      	movs	r1, #0
 80004ee:	0018      	movs	r0, r3
 80004f0:	f006 ffff 	bl	80074f2 <memset>
    				buffer_len = 0;
 80004f4:	4b1e      	ldr	r3, [pc, #120]	; (8000570 <StartDefaultTask+0x120>)
 80004f6:	2200      	movs	r2, #0
 80004f8:	801a      	strh	r2, [r3, #0]
 80004fa:	e022      	b.n	8000542 <StartDefaultTask+0xf2>
    			} else {
    				buffer[buffer_len] = uart_rec.buf[i];
 80004fc:	230f      	movs	r3, #15
 80004fe:	18fb      	adds	r3, r7, r3
 8000500:	781b      	ldrb	r3, [r3, #0]
 8000502:	4a1b      	ldr	r2, [pc, #108]	; (8000570 <StartDefaultTask+0x120>)
 8000504:	8812      	ldrh	r2, [r2, #0]
 8000506:	0011      	movs	r1, r2
 8000508:	4a16      	ldr	r2, [pc, #88]	; (8000564 <StartDefaultTask+0x114>)
 800050a:	18d3      	adds	r3, r2, r3
 800050c:	785a      	ldrb	r2, [r3, #1]
 800050e:	4b19      	ldr	r3, [pc, #100]	; (8000574 <StartDefaultTask+0x124>)
 8000510:	545a      	strb	r2, [r3, r1]
    				buffer_len ++;
 8000512:	4b17      	ldr	r3, [pc, #92]	; (8000570 <StartDefaultTask+0x120>)
 8000514:	881b      	ldrh	r3, [r3, #0]
 8000516:	3301      	adds	r3, #1
 8000518:	b29a      	uxth	r2, r3
 800051a:	4b15      	ldr	r3, [pc, #84]	; (8000570 <StartDefaultTask+0x120>)
 800051c:	801a      	strh	r2, [r3, #0]
    				if (buffer_len >= 512) {
 800051e:	4b14      	ldr	r3, [pc, #80]	; (8000570 <StartDefaultTask+0x120>)
 8000520:	881a      	ldrh	r2, [r3, #0]
 8000522:	2380      	movs	r3, #128	; 0x80
 8000524:	009b      	lsls	r3, r3, #2
 8000526:	429a      	cmp	r2, r3
 8000528:	d30b      	bcc.n	8000542 <StartDefaultTask+0xf2>
    					buffer_len = 0;
 800052a:	4b11      	ldr	r3, [pc, #68]	; (8000570 <StartDefaultTask+0x120>)
 800052c:	2200      	movs	r2, #0
 800052e:	801a      	strh	r2, [r3, #0]
    					memset(buffer, 0, sizeof(buffer));
 8000530:	2380      	movs	r3, #128	; 0x80
 8000532:	009a      	lsls	r2, r3, #2
 8000534:	4b0f      	ldr	r3, [pc, #60]	; (8000574 <StartDefaultTask+0x124>)
 8000536:	2100      	movs	r1, #0
 8000538:	0018      	movs	r0, r3
 800053a:	f006 ffda 	bl	80074f2 <memset>
 800053e:	e000      	b.n	8000542 <StartDefaultTask+0xf2>
    			break;
 8000540:	46c0      	nop			; (mov r8, r8)
    	for (uint8_t i = 0; i < uart_rec.len; i++) {
 8000542:	210f      	movs	r1, #15
 8000544:	187b      	adds	r3, r7, r1
 8000546:	781a      	ldrb	r2, [r3, #0]
 8000548:	187b      	adds	r3, r7, r1
 800054a:	3201      	adds	r2, #1
 800054c:	701a      	strb	r2, [r3, #0]
 800054e:	4b05      	ldr	r3, [pc, #20]	; (8000564 <StartDefaultTask+0x114>)
 8000550:	781b      	ldrb	r3, [r3, #0]
 8000552:	220f      	movs	r2, #15
 8000554:	18ba      	adds	r2, r7, r2
 8000556:	7812      	ldrb	r2, [r2, #0]
 8000558:	429a      	cmp	r2, r3
 800055a:	d38c      	bcc.n	8000476 <StartDefaultTask+0x26>
    if (osOK ==
 800055c:	e77c      	b.n	8000458 <StartDefaultTask+0x8>
 800055e:	46c0      	nop			; (mov r8, r8)
 8000560:	20000094 	.word	0x20000094
 8000564:	2000009c 	.word	0x2000009c
 8000568:	200000bd 	.word	0x200000bd
 800056c:	20000098 	.word	0x20000098
 8000570:	200000be 	.word	0x200000be
 8000574:	200002c0 	.word	0x200002c0
 8000578:	200000c0 	.word	0x200000c0
 800057c:	20000574 	.word	0x20000574

08000580 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b082      	sub	sp, #8
 8000584:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000586:	4b10      	ldr	r3, [pc, #64]	; (80005c8 <MX_DMA_Init+0x48>)
 8000588:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800058a:	4b0f      	ldr	r3, [pc, #60]	; (80005c8 <MX_DMA_Init+0x48>)
 800058c:	2101      	movs	r1, #1
 800058e:	430a      	orrs	r2, r1
 8000590:	639a      	str	r2, [r3, #56]	; 0x38
 8000592:	4b0d      	ldr	r3, [pc, #52]	; (80005c8 <MX_DMA_Init+0x48>)
 8000594:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000596:	2201      	movs	r2, #1
 8000598:	4013      	ands	r3, r2
 800059a:	607b      	str	r3, [r7, #4]
 800059c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 3, 0);
 800059e:	2200      	movs	r2, #0
 80005a0:	2103      	movs	r1, #3
 80005a2:	2009      	movs	r0, #9
 80005a4:	f000 fc8c 	bl	8000ec0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80005a8:	2009      	movs	r0, #9
 80005aa:	f000 fc9e 	bl	8000eea <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 3, 0);
 80005ae:	2200      	movs	r2, #0
 80005b0:	2103      	movs	r1, #3
 80005b2:	200a      	movs	r0, #10
 80005b4:	f000 fc84 	bl	8000ec0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 80005b8:	200a      	movs	r0, #10
 80005ba:	f000 fc96 	bl	8000eea <HAL_NVIC_EnableIRQ>

}
 80005be:	46c0      	nop			; (mov r8, r8)
 80005c0:	46bd      	mov	sp, r7
 80005c2:	b002      	add	sp, #8
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	46c0      	nop			; (mov r8, r8)
 80005c8:	40021000 	.word	0x40021000

080005cc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005cc:	b590      	push	{r4, r7, lr}
 80005ce:	b089      	sub	sp, #36	; 0x24
 80005d0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005d2:	240c      	movs	r4, #12
 80005d4:	193b      	adds	r3, r7, r4
 80005d6:	0018      	movs	r0, r3
 80005d8:	2314      	movs	r3, #20
 80005da:	001a      	movs	r2, r3
 80005dc:	2100      	movs	r1, #0
 80005de:	f006 ff88 	bl	80074f2 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005e2:	4b21      	ldr	r3, [pc, #132]	; (8000668 <MX_GPIO_Init+0x9c>)
 80005e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80005e6:	4b20      	ldr	r3, [pc, #128]	; (8000668 <MX_GPIO_Init+0x9c>)
 80005e8:	2104      	movs	r1, #4
 80005ea:	430a      	orrs	r2, r1
 80005ec:	635a      	str	r2, [r3, #52]	; 0x34
 80005ee:	4b1e      	ldr	r3, [pc, #120]	; (8000668 <MX_GPIO_Init+0x9c>)
 80005f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80005f2:	2204      	movs	r2, #4
 80005f4:	4013      	ands	r3, r2
 80005f6:	60bb      	str	r3, [r7, #8]
 80005f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80005fa:	4b1b      	ldr	r3, [pc, #108]	; (8000668 <MX_GPIO_Init+0x9c>)
 80005fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80005fe:	4b1a      	ldr	r3, [pc, #104]	; (8000668 <MX_GPIO_Init+0x9c>)
 8000600:	2120      	movs	r1, #32
 8000602:	430a      	orrs	r2, r1
 8000604:	635a      	str	r2, [r3, #52]	; 0x34
 8000606:	4b18      	ldr	r3, [pc, #96]	; (8000668 <MX_GPIO_Init+0x9c>)
 8000608:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800060a:	2220      	movs	r2, #32
 800060c:	4013      	ands	r3, r2
 800060e:	607b      	str	r3, [r7, #4]
 8000610:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000612:	4b15      	ldr	r3, [pc, #84]	; (8000668 <MX_GPIO_Init+0x9c>)
 8000614:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000616:	4b14      	ldr	r3, [pc, #80]	; (8000668 <MX_GPIO_Init+0x9c>)
 8000618:	2101      	movs	r1, #1
 800061a:	430a      	orrs	r2, r1
 800061c:	635a      	str	r2, [r3, #52]	; 0x34
 800061e:	4b12      	ldr	r3, [pc, #72]	; (8000668 <MX_GPIO_Init+0x9c>)
 8000620:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000622:	2201      	movs	r2, #1
 8000624:	4013      	ands	r3, r2
 8000626:	603b      	str	r3, [r7, #0]
 8000628:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 800062a:	23a0      	movs	r3, #160	; 0xa0
 800062c:	05db      	lsls	r3, r3, #23
 800062e:	2200      	movs	r2, #0
 8000630:	2120      	movs	r1, #32
 8000632:	0018      	movs	r0, r3
 8000634:	f001 f8f6 	bl	8001824 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8000638:	0021      	movs	r1, r4
 800063a:	187b      	adds	r3, r7, r1
 800063c:	2220      	movs	r2, #32
 800063e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000640:	187b      	adds	r3, r7, r1
 8000642:	2201      	movs	r2, #1
 8000644:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000646:	187b      	adds	r3, r7, r1
 8000648:	2200      	movs	r2, #0
 800064a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800064c:	187b      	adds	r3, r7, r1
 800064e:	2202      	movs	r2, #2
 8000650:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000652:	187a      	adds	r2, r7, r1
 8000654:	23a0      	movs	r3, #160	; 0xa0
 8000656:	05db      	lsls	r3, r3, #23
 8000658:	0011      	movs	r1, r2
 800065a:	0018      	movs	r0, r3
 800065c:	f000 ff7e 	bl	800155c <HAL_GPIO_Init>

}
 8000660:	46c0      	nop			; (mov r8, r8)
 8000662:	46bd      	mov	sp, r7
 8000664:	b009      	add	sp, #36	; 0x24
 8000666:	bd90      	pop	{r4, r7, pc}
 8000668:	40021000 	.word	0x40021000

0800066c <HAL_UART_ErrorCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 800066c:	b580      	push	{r7, lr}
 800066e:	b084      	sub	sp, #16
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
	// handle when baudrate set error
	// reset uart
//    static const char *TAG = "UART_ERR";
    uint32_t err;
    if ((err = HAL_UART_GetError(huart))) {
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	0018      	movs	r0, r3
 8000678:	f002 fea6 	bl	80033c8 <HAL_UART_GetError>
 800067c:	0003      	movs	r3, r0
 800067e:	60fb      	str	r3, [r7, #12]
 8000680:	68fb      	ldr	r3, [r7, #12]
 8000682:	2b00      	cmp	r3, #0
 8000684:	d020      	beq.n	80006c8 <HAL_UART_ErrorCallback+0x5c>
//        elog_w(TAG, "get a uart err :%d", err);
        if (err != HAL_UART_ERROR_NE) {
 8000686:	68fb      	ldr	r3, [r7, #12]
 8000688:	2b02      	cmp	r3, #2
 800068a:	d11c      	bne.n	80006c6 <HAL_UART_ErrorCallback+0x5a>
            return;
        }
        if (HAL_OK != HAL_UART_DMAStop(huart)) {
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	0018      	movs	r0, r3
 8000690:	f002 fac8 	bl	8002c24 <HAL_UART_DMAStop>
//            elog_e(TAG, "dma stop failed");
        }
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	2210      	movs	r2, #16
 800069a:	621a      	str	r2, [r3, #32]
        if (huart->Instance == huart2.Instance) {
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	681a      	ldr	r2, [r3, #0]
 80006a0:	4b0b      	ldr	r3, [pc, #44]	; (80006d0 <HAL_UART_ErrorCallback+0x64>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	429a      	cmp	r2, r3
 80006a6:	d10f      	bne.n	80006c8 <HAL_UART_ErrorCallback+0x5c>
            MX_USART2_UART_Init();
 80006a8:	f000 fa0a 	bl	8000ac0 <MX_USART2_UART_Init>
//            elog_w(TAG, "restart uart2");
            if (HAL_OK !=
                HAL_UARTEx_ReceiveToIdle_DMA(&huart2, (uint8_t *) &u2_buf, sizeof(u2_buf))) {
 80006ac:	4909      	ldr	r1, [pc, #36]	; (80006d4 <HAL_UART_ErrorCallback+0x68>)
 80006ae:	4b08      	ldr	r3, [pc, #32]	; (80006d0 <HAL_UART_ErrorCallback+0x64>)
 80006b0:	2240      	movs	r2, #64	; 0x40
 80006b2:	0018      	movs	r0, r3
 80006b4:	f003 fdbe 	bl	8004234 <HAL_UARTEx_ReceiveToIdle_DMA>
//                elog_w(TAG, "uart2 idle rec init failed");
            }
            u2_rx_start_pos = 0;
 80006b8:	4b07      	ldr	r3, [pc, #28]	; (80006d8 <HAL_UART_ErrorCallback+0x6c>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	701a      	strb	r2, [r3, #0]
            u2_rx_length = 0;
 80006be:	4b07      	ldr	r3, [pc, #28]	; (80006dc <HAL_UART_ErrorCallback+0x70>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	701a      	strb	r2, [r3, #0]
 80006c4:	e000      	b.n	80006c8 <HAL_UART_ErrorCallback+0x5c>
            return;
 80006c6:	46c0      	nop			; (mov r8, r8)
        }
//        elog_w(TAG, "restart ok");
    } else {
//        elog_i(TAG, "no error found");
    }
}
 80006c8:	46bd      	mov	sp, r7
 80006ca:	b004      	add	sp, #16
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	46c0      	nop			; (mov r8, r8)
 80006d0:	20000574 	.word	0x20000574
 80006d4:	200004c0 	.word	0x200004c0
 80006d8:	20000500 	.word	0x20000500
 80006dc:	20000501 	.word	0x20000501

080006e0 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b082      	sub	sp, #8
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
 80006e8:	000a      	movs	r2, r1
 80006ea:	1cbb      	adds	r3, r7, #2
 80006ec:	801a      	strh	r2, [r3, #0]
    static uart_buf_t buf;
    if (huart->Instance == huart2.Instance) {
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	681a      	ldr	r2, [r3, #0]
 80006f2:	4b22      	ldr	r3, [pc, #136]	; (800077c <HAL_UARTEx_RxEventCallback+0x9c>)
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	429a      	cmp	r2, r3
 80006f8:	d13c      	bne.n	8000774 <HAL_UARTEx_RxEventCallback+0x94>
        u2_rx_length = Size - u2_rx_start_pos;
 80006fa:	1cbb      	adds	r3, r7, #2
 80006fc:	881b      	ldrh	r3, [r3, #0]
 80006fe:	b2da      	uxtb	r2, r3
 8000700:	4b1f      	ldr	r3, [pc, #124]	; (8000780 <HAL_UARTEx_RxEventCallback+0xa0>)
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	b2db      	uxtb	r3, r3
 8000706:	1ad3      	subs	r3, r2, r3
 8000708:	b2da      	uxtb	r2, r3
 800070a:	4b1e      	ldr	r3, [pc, #120]	; (8000784 <HAL_UARTEx_RxEventCallback+0xa4>)
 800070c:	701a      	strb	r2, [r3, #0]
        if (u2_rx_length == 0) {
 800070e:	4b1d      	ldr	r3, [pc, #116]	; (8000784 <HAL_UARTEx_RxEventCallback+0xa4>)
 8000710:	781b      	ldrb	r3, [r3, #0]
 8000712:	b2db      	uxtb	r3, r3
 8000714:	2b00      	cmp	r3, #0
 8000716:	d02c      	beq.n	8000772 <HAL_UARTEx_RxEventCallback+0x92>
            return;
        }
        memcpy(buf.buf, u2_buf + u2_rx_start_pos, u2_rx_length);
 8000718:	4b19      	ldr	r3, [pc, #100]	; (8000780 <HAL_UARTEx_RxEventCallback+0xa0>)
 800071a:	781b      	ldrb	r3, [r3, #0]
 800071c:	b2db      	uxtb	r3, r3
 800071e:	001a      	movs	r2, r3
 8000720:	4b19      	ldr	r3, [pc, #100]	; (8000788 <HAL_UARTEx_RxEventCallback+0xa8>)
 8000722:	18d1      	adds	r1, r2, r3
 8000724:	4b17      	ldr	r3, [pc, #92]	; (8000784 <HAL_UARTEx_RxEventCallback+0xa4>)
 8000726:	781b      	ldrb	r3, [r3, #0]
 8000728:	b2db      	uxtb	r3, r3
 800072a:	001a      	movs	r2, r3
 800072c:	4b17      	ldr	r3, [pc, #92]	; (800078c <HAL_UARTEx_RxEventCallback+0xac>)
 800072e:	0018      	movs	r0, r3
 8000730:	f006 fed6 	bl	80074e0 <memcpy>
        buf.len = u2_rx_length;
 8000734:	4b13      	ldr	r3, [pc, #76]	; (8000784 <HAL_UARTEx_RxEventCallback+0xa4>)
 8000736:	781b      	ldrb	r3, [r3, #0]
 8000738:	b2da      	uxtb	r2, r3
 800073a:	4b15      	ldr	r3, [pc, #84]	; (8000790 <HAL_UARTEx_RxEventCallback+0xb0>)
 800073c:	701a      	strb	r2, [r3, #0]
        osMessageQueuePut(upper_queueHandle, &buf, 0, 0);
 800073e:	4b15      	ldr	r3, [pc, #84]	; (8000794 <HAL_UARTEx_RxEventCallback+0xb4>)
 8000740:	6818      	ldr	r0, [r3, #0]
 8000742:	4913      	ldr	r1, [pc, #76]	; (8000790 <HAL_UARTEx_RxEventCallback+0xb0>)
 8000744:	2300      	movs	r3, #0
 8000746:	2200      	movs	r2, #0
 8000748:	f004 f940 	bl	80049cc <osMessageQueuePut>
        u2_rx_start_pos += u2_rx_length;
 800074c:	4b0d      	ldr	r3, [pc, #52]	; (8000784 <HAL_UARTEx_RxEventCallback+0xa4>)
 800074e:	781b      	ldrb	r3, [r3, #0]
 8000750:	b2da      	uxtb	r2, r3
 8000752:	4b0b      	ldr	r3, [pc, #44]	; (8000780 <HAL_UARTEx_RxEventCallback+0xa0>)
 8000754:	781b      	ldrb	r3, [r3, #0]
 8000756:	b2db      	uxtb	r3, r3
 8000758:	18d3      	adds	r3, r2, r3
 800075a:	b2da      	uxtb	r2, r3
 800075c:	4b08      	ldr	r3, [pc, #32]	; (8000780 <HAL_UARTEx_RxEventCallback+0xa0>)
 800075e:	701a      	strb	r2, [r3, #0]
        if (u2_rx_start_pos >= sizeof(u2_buf)) {
 8000760:	4b07      	ldr	r3, [pc, #28]	; (8000780 <HAL_UARTEx_RxEventCallback+0xa0>)
 8000762:	781b      	ldrb	r3, [r3, #0]
 8000764:	b2db      	uxtb	r3, r3
 8000766:	2b3f      	cmp	r3, #63	; 0x3f
 8000768:	d904      	bls.n	8000774 <HAL_UARTEx_RxEventCallback+0x94>
            u2_rx_start_pos = 0;
 800076a:	4b05      	ldr	r3, [pc, #20]	; (8000780 <HAL_UARTEx_RxEventCallback+0xa0>)
 800076c:	2200      	movs	r2, #0
 800076e:	701a      	strb	r2, [r3, #0]
 8000770:	e000      	b.n	8000774 <HAL_UARTEx_RxEventCallback+0x94>
            return;
 8000772:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 8000774:	46bd      	mov	sp, r7
 8000776:	b002      	add	sp, #8
 8000778:	bd80      	pop	{r7, pc}
 800077a:	46c0      	nop			; (mov r8, r8)
 800077c:	20000574 	.word	0x20000574
 8000780:	20000500 	.word	0x20000500
 8000784:	20000501 	.word	0x20000501
 8000788:	200004c0 	.word	0x200004c0
 800078c:	20000505 	.word	0x20000505
 8000790:	20000504 	.word	0x20000504
 8000794:	20000094 	.word	0x20000094

08000798 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
    if (huart->Instance == huart2.Instance) {
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	681a      	ldr	r2, [r3, #0]
 80007a4:	4b06      	ldr	r3, [pc, #24]	; (80007c0 <HAL_UART_TxCpltCallback+0x28>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	429a      	cmp	r2, r3
 80007aa:	d104      	bne.n	80007b6 <HAL_UART_TxCpltCallback+0x1e>
        extern osSemaphoreId_t uart_tx_lockHandle;
        osSemaphoreRelease(uart_tx_lockHandle);
 80007ac:	4b05      	ldr	r3, [pc, #20]	; (80007c4 <HAL_UART_TxCpltCallback+0x2c>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	0018      	movs	r0, r3
 80007b2:	f004 f851 	bl	8004858 <osSemaphoreRelease>
    }
}
 80007b6:	46c0      	nop			; (mov r8, r8)
 80007b8:	46bd      	mov	sp, r7
 80007ba:	b002      	add	sp, #8
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	46c0      	nop			; (mov r8, r8)
 80007c0:	20000574 	.word	0x20000574
 80007c4:	20000098 	.word	0x20000098

080007c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007cc:	f000 fab4 	bl	8000d38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007d0:	f000 f818 	bl	8000804 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007d4:	f7ff fefa 	bl	80005cc <MX_GPIO_Init>
  MX_DMA_Init();
 80007d8:	f7ff fed2 	bl	8000580 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80007dc:	f000 f970 	bl	8000ac0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  if (HAL_OK !=
      HAL_UARTEx_ReceiveToIdle_DMA(&huart2, (uint8_t *) &u2_buf, sizeof(u2_buf))) {
 80007e0:	4906      	ldr	r1, [pc, #24]	; (80007fc <main+0x34>)
 80007e2:	4b07      	ldr	r3, [pc, #28]	; (8000800 <main+0x38>)
 80007e4:	2240      	movs	r2, #64	; 0x40
 80007e6:	0018      	movs	r0, r3
 80007e8:	f003 fd24 	bl	8004234 <HAL_UARTEx_ReceiveToIdle_DMA>
//	  elog_w("main", "uart1 idle rec init failed");
  }
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 80007ec:	f003 fe72 	bl	80044d4 <osKernelInitialize>
  MX_FREERTOS_Init();
 80007f0:	f7ff fe00 	bl	80003f4 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80007f4:	f003 fe90 	bl	8004518 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007f8:	e7fe      	b.n	80007f8 <main+0x30>
 80007fa:	46c0      	nop			; (mov r8, r8)
 80007fc:	200004c0 	.word	0x200004c0
 8000800:	20000574 	.word	0x20000574

08000804 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000804:	b590      	push	{r4, r7, lr}
 8000806:	b093      	sub	sp, #76	; 0x4c
 8000808:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800080a:	2414      	movs	r4, #20
 800080c:	193b      	adds	r3, r7, r4
 800080e:	0018      	movs	r0, r3
 8000810:	2334      	movs	r3, #52	; 0x34
 8000812:	001a      	movs	r2, r3
 8000814:	2100      	movs	r1, #0
 8000816:	f006 fe6c 	bl	80074f2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800081a:	1d3b      	adds	r3, r7, #4
 800081c:	0018      	movs	r0, r3
 800081e:	2310      	movs	r3, #16
 8000820:	001a      	movs	r2, r3
 8000822:	2100      	movs	r1, #0
 8000824:	f006 fe65 	bl	80074f2 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000828:	2380      	movs	r3, #128	; 0x80
 800082a:	009b      	lsls	r3, r3, #2
 800082c:	0018      	movs	r0, r3
 800082e:	f001 f817 	bl	8001860 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000832:	193b      	adds	r3, r7, r4
 8000834:	2202      	movs	r2, #2
 8000836:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000838:	193b      	adds	r3, r7, r4
 800083a:	2280      	movs	r2, #128	; 0x80
 800083c:	0052      	lsls	r2, r2, #1
 800083e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000840:	0021      	movs	r1, r4
 8000842:	187b      	adds	r3, r7, r1
 8000844:	2200      	movs	r2, #0
 8000846:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000848:	187b      	adds	r3, r7, r1
 800084a:	2240      	movs	r2, #64	; 0x40
 800084c:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800084e:	187b      	adds	r3, r7, r1
 8000850:	2202      	movs	r2, #2
 8000852:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000854:	187b      	adds	r3, r7, r1
 8000856:	2202      	movs	r2, #2
 8000858:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800085a:	187b      	adds	r3, r7, r1
 800085c:	2200      	movs	r2, #0
 800085e:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000860:	187b      	adds	r3, r7, r1
 8000862:	2208      	movs	r2, #8
 8000864:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000866:	187b      	adds	r3, r7, r1
 8000868:	2280      	movs	r2, #128	; 0x80
 800086a:	0292      	lsls	r2, r2, #10
 800086c:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800086e:	187b      	adds	r3, r7, r1
 8000870:	2280      	movs	r2, #128	; 0x80
 8000872:	0592      	lsls	r2, r2, #22
 8000874:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000876:	187b      	adds	r3, r7, r1
 8000878:	0018      	movs	r0, r3
 800087a:	f001 f83d 	bl	80018f8 <HAL_RCC_OscConfig>
 800087e:	1e03      	subs	r3, r0, #0
 8000880:	d001      	beq.n	8000886 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000882:	f000 f82b 	bl	80008dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000886:	1d3b      	adds	r3, r7, #4
 8000888:	2207      	movs	r2, #7
 800088a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800088c:	1d3b      	adds	r3, r7, #4
 800088e:	2202      	movs	r2, #2
 8000890:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000892:	1d3b      	adds	r3, r7, #4
 8000894:	2200      	movs	r2, #0
 8000896:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000898:	1d3b      	adds	r3, r7, #4
 800089a:	2200      	movs	r2, #0
 800089c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800089e:	1d3b      	adds	r3, r7, #4
 80008a0:	2102      	movs	r1, #2
 80008a2:	0018      	movs	r0, r3
 80008a4:	f001 fb38 	bl	8001f18 <HAL_RCC_ClockConfig>
 80008a8:	1e03      	subs	r3, r0, #0
 80008aa:	d001      	beq.n	80008b0 <SystemClock_Config+0xac>
  {
    Error_Handler();
 80008ac:	f000 f816 	bl	80008dc <Error_Handler>
  }
}
 80008b0:	46c0      	nop			; (mov r8, r8)
 80008b2:	46bd      	mov	sp, r7
 80008b4:	b013      	add	sp, #76	; 0x4c
 80008b6:	bd90      	pop	{r4, r7, pc}

080008b8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b082      	sub	sp, #8
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	4a04      	ldr	r2, [pc, #16]	; (80008d8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80008c6:	4293      	cmp	r3, r2
 80008c8:	d101      	bne.n	80008ce <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80008ca:	f000 fa55 	bl	8000d78 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80008ce:	46c0      	nop			; (mov r8, r8)
 80008d0:	46bd      	mov	sp, r7
 80008d2:	b002      	add	sp, #8
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	46c0      	nop			; (mov r8, r8)
 80008d8:	40012c00 	.word	0x40012c00

080008dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008e0:	b672      	cpsid	i
}
 80008e2:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008e4:	e7fe      	b.n	80008e4 <Error_Handler+0x8>
	...

080008e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b082      	sub	sp, #8
 80008ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008ee:	4b12      	ldr	r3, [pc, #72]	; (8000938 <HAL_MspInit+0x50>)
 80008f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80008f2:	4b11      	ldr	r3, [pc, #68]	; (8000938 <HAL_MspInit+0x50>)
 80008f4:	2101      	movs	r1, #1
 80008f6:	430a      	orrs	r2, r1
 80008f8:	641a      	str	r2, [r3, #64]	; 0x40
 80008fa:	4b0f      	ldr	r3, [pc, #60]	; (8000938 <HAL_MspInit+0x50>)
 80008fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008fe:	2201      	movs	r2, #1
 8000900:	4013      	ands	r3, r2
 8000902:	607b      	str	r3, [r7, #4]
 8000904:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000906:	4b0c      	ldr	r3, [pc, #48]	; (8000938 <HAL_MspInit+0x50>)
 8000908:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800090a:	4b0b      	ldr	r3, [pc, #44]	; (8000938 <HAL_MspInit+0x50>)
 800090c:	2180      	movs	r1, #128	; 0x80
 800090e:	0549      	lsls	r1, r1, #21
 8000910:	430a      	orrs	r2, r1
 8000912:	63da      	str	r2, [r3, #60]	; 0x3c
 8000914:	4b08      	ldr	r3, [pc, #32]	; (8000938 <HAL_MspInit+0x50>)
 8000916:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000918:	2380      	movs	r3, #128	; 0x80
 800091a:	055b      	lsls	r3, r3, #21
 800091c:	4013      	ands	r3, r2
 800091e:	603b      	str	r3, [r7, #0]
 8000920:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 8000922:	2302      	movs	r3, #2
 8000924:	425b      	negs	r3, r3
 8000926:	2200      	movs	r2, #0
 8000928:	2103      	movs	r1, #3
 800092a:	0018      	movs	r0, r3
 800092c:	f000 fac8 	bl	8000ec0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000930:	46c0      	nop			; (mov r8, r8)
 8000932:	46bd      	mov	sp, r7
 8000934:	b002      	add	sp, #8
 8000936:	bd80      	pop	{r7, pc}
 8000938:	40021000 	.word	0x40021000

0800093c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800093c:	b5b0      	push	{r4, r5, r7, lr}
 800093e:	b08c      	sub	sp, #48	; 0x30
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000944:	232b      	movs	r3, #43	; 0x2b
 8000946:	18fb      	adds	r3, r7, r3
 8000948:	2200      	movs	r2, #0
 800094a:	701a      	strb	r2, [r3, #0]

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800094c:	4b38      	ldr	r3, [pc, #224]	; (8000a30 <HAL_InitTick+0xf4>)
 800094e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000950:	4b37      	ldr	r3, [pc, #220]	; (8000a30 <HAL_InitTick+0xf4>)
 8000952:	2180      	movs	r1, #128	; 0x80
 8000954:	0109      	lsls	r1, r1, #4
 8000956:	430a      	orrs	r2, r1
 8000958:	641a      	str	r2, [r3, #64]	; 0x40
 800095a:	4b35      	ldr	r3, [pc, #212]	; (8000a30 <HAL_InitTick+0xf4>)
 800095c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800095e:	2380      	movs	r3, #128	; 0x80
 8000960:	011b      	lsls	r3, r3, #4
 8000962:	4013      	ands	r3, r2
 8000964:	60bb      	str	r3, [r7, #8]
 8000966:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000968:	230c      	movs	r3, #12
 800096a:	18fa      	adds	r2, r7, r3
 800096c:	2410      	movs	r4, #16
 800096e:	193b      	adds	r3, r7, r4
 8000970:	0011      	movs	r1, r2
 8000972:	0018      	movs	r0, r3
 8000974:	f001 fc7a 	bl	800226c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000978:	193b      	adds	r3, r7, r4
 800097a:	68db      	ldr	r3, [r3, #12]
 800097c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Compute TIM1 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800097e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000980:	2b00      	cmp	r3, #0
 8000982:	d104      	bne.n	800098e <HAL_InitTick+0x52>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000984:	f001 fc5c 	bl	8002240 <HAL_RCC_GetPCLK1Freq>
 8000988:	0003      	movs	r3, r0
 800098a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800098c:	e004      	b.n	8000998 <HAL_InitTick+0x5c>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800098e:	f001 fc57 	bl	8002240 <HAL_RCC_GetPCLK1Freq>
 8000992:	0003      	movs	r3, r0
 8000994:	005b      	lsls	r3, r3, #1
 8000996:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800099a:	4926      	ldr	r1, [pc, #152]	; (8000a34 <HAL_InitTick+0xf8>)
 800099c:	0018      	movs	r0, r3
 800099e:	f7ff fbb3 	bl	8000108 <__udivsi3>
 80009a2:	0003      	movs	r3, r0
 80009a4:	3b01      	subs	r3, #1
 80009a6:	623b      	str	r3, [r7, #32]

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80009a8:	4b23      	ldr	r3, [pc, #140]	; (8000a38 <HAL_InitTick+0xfc>)
 80009aa:	4a24      	ldr	r2, [pc, #144]	; (8000a3c <HAL_InitTick+0x100>)
 80009ac:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80009ae:	4b22      	ldr	r3, [pc, #136]	; (8000a38 <HAL_InitTick+0xfc>)
 80009b0:	4a23      	ldr	r2, [pc, #140]	; (8000a40 <HAL_InitTick+0x104>)
 80009b2:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80009b4:	4b20      	ldr	r3, [pc, #128]	; (8000a38 <HAL_InitTick+0xfc>)
 80009b6:	6a3a      	ldr	r2, [r7, #32]
 80009b8:	605a      	str	r2, [r3, #4]
  htim1.Init.ClockDivision = 0;
 80009ba:	4b1f      	ldr	r3, [pc, #124]	; (8000a38 <HAL_InitTick+0xfc>)
 80009bc:	2200      	movs	r2, #0
 80009be:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009c0:	4b1d      	ldr	r3, [pc, #116]	; (8000a38 <HAL_InitTick+0xfc>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009c6:	4b1c      	ldr	r3, [pc, #112]	; (8000a38 <HAL_InitTick+0xfc>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80009cc:	252b      	movs	r5, #43	; 0x2b
 80009ce:	197c      	adds	r4, r7, r5
 80009d0:	4b19      	ldr	r3, [pc, #100]	; (8000a38 <HAL_InitTick+0xfc>)
 80009d2:	0018      	movs	r0, r3
 80009d4:	f001 fda8 	bl	8002528 <HAL_TIM_Base_Init>
 80009d8:	0003      	movs	r3, r0
 80009da:	7023      	strb	r3, [r4, #0]
  if (status == HAL_OK)
 80009dc:	197b      	adds	r3, r7, r5
 80009de:	781b      	ldrb	r3, [r3, #0]
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d11e      	bne.n	8000a22 <HAL_InitTick+0xe6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80009e4:	197c      	adds	r4, r7, r5
 80009e6:	4b14      	ldr	r3, [pc, #80]	; (8000a38 <HAL_InitTick+0xfc>)
 80009e8:	0018      	movs	r0, r3
 80009ea:	f001 fdfd 	bl	80025e8 <HAL_TIM_Base_Start_IT>
 80009ee:	0003      	movs	r3, r0
 80009f0:	7023      	strb	r3, [r4, #0]
    if (status == HAL_OK)
 80009f2:	197b      	adds	r3, r7, r5
 80009f4:	781b      	ldrb	r3, [r3, #0]
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d113      	bne.n	8000a22 <HAL_InitTick+0xe6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 80009fa:	200d      	movs	r0, #13
 80009fc:	f000 fa75 	bl	8000eea <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	2b03      	cmp	r3, #3
 8000a04:	d809      	bhi.n	8000a1a <HAL_InitTick+0xde>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, TickPriority, 0U);
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	2200      	movs	r2, #0
 8000a0a:	0019      	movs	r1, r3
 8000a0c:	200d      	movs	r0, #13
 8000a0e:	f000 fa57 	bl	8000ec0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a12:	4b0c      	ldr	r3, [pc, #48]	; (8000a44 <HAL_InitTick+0x108>)
 8000a14:	687a      	ldr	r2, [r7, #4]
 8000a16:	601a      	str	r2, [r3, #0]
 8000a18:	e003      	b.n	8000a22 <HAL_InitTick+0xe6>
      }
      else
      {
        status = HAL_ERROR;
 8000a1a:	232b      	movs	r3, #43	; 0x2b
 8000a1c:	18fb      	adds	r3, r7, r3
 8000a1e:	2201      	movs	r2, #1
 8000a20:	701a      	strb	r2, [r3, #0]
      }
    }
  }

 /* Return function status */
  return status;
 8000a22:	232b      	movs	r3, #43	; 0x2b
 8000a24:	18fb      	adds	r3, r7, r3
 8000a26:	781b      	ldrb	r3, [r3, #0]
}
 8000a28:	0018      	movs	r0, r3
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	b00c      	add	sp, #48	; 0x30
 8000a2e:	bdb0      	pop	{r4, r5, r7, pc}
 8000a30:	40021000 	.word	0x40021000
 8000a34:	000f4240 	.word	0x000f4240
 8000a38:	20000528 	.word	0x20000528
 8000a3c:	40012c00 	.word	0x40012c00
 8000a40:	000003e7 	.word	0x000003e7
 8000a44:	20000004 	.word	0x20000004

08000a48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a4c:	e7fe      	b.n	8000a4c <NMI_Handler+0x4>

08000a4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a4e:	b580      	push	{r7, lr}
 8000a50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a52:	e7fe      	b.n	8000a52 <HardFault_Handler+0x4>

08000a54 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000a58:	4b03      	ldr	r3, [pc, #12]	; (8000a68 <DMA1_Channel1_IRQHandler+0x14>)
 8000a5a:	0018      	movs	r0, r3
 8000a5c:	f000 fc32 	bl	80012c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000a60:	46c0      	nop			; (mov r8, r8)
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	46c0      	nop			; (mov r8, r8)
 8000a68:	20000608 	.word	0x20000608

08000a6c <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000a70:	4b03      	ldr	r3, [pc, #12]	; (8000a80 <DMA1_Channel2_3_IRQHandler+0x14>)
 8000a72:	0018      	movs	r0, r3
 8000a74:	f000 fc26 	bl	80012c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8000a78:	46c0      	nop			; (mov r8, r8)
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	46c0      	nop			; (mov r8, r8)
 8000a80:	20000664 	.word	0x20000664

08000a84 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000a88:	4b03      	ldr	r3, [pc, #12]	; (8000a98 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 8000a8a:	0018      	movs	r0, r3
 8000a8c:	f001 fe02 	bl	8002694 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 8000a90:	46c0      	nop			; (mov r8, r8)
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	46c0      	nop			; (mov r8, r8)
 8000a98:	20000528 	.word	0x20000528

08000a9c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000aa0:	4b03      	ldr	r3, [pc, #12]	; (8000ab0 <USART2_IRQHandler+0x14>)
 8000aa2:	0018      	movs	r0, r3
 8000aa4:	f002 f952 	bl	8002d4c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000aa8:	46c0      	nop			; (mov r8, r8)
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	46c0      	nop			; (mov r8, r8)
 8000ab0:	20000574 	.word	0x20000574

08000ab4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ab8:	46c0      	nop			; (mov r8, r8)
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}
	...

08000ac0 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ac4:	4b23      	ldr	r3, [pc, #140]	; (8000b54 <MX_USART2_UART_Init+0x94>)
 8000ac6:	4a24      	ldr	r2, [pc, #144]	; (8000b58 <MX_USART2_UART_Init+0x98>)
 8000ac8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000aca:	4b22      	ldr	r3, [pc, #136]	; (8000b54 <MX_USART2_UART_Init+0x94>)
 8000acc:	22e1      	movs	r2, #225	; 0xe1
 8000ace:	0252      	lsls	r2, r2, #9
 8000ad0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ad2:	4b20      	ldr	r3, [pc, #128]	; (8000b54 <MX_USART2_UART_Init+0x94>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ad8:	4b1e      	ldr	r3, [pc, #120]	; (8000b54 <MX_USART2_UART_Init+0x94>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ade:	4b1d      	ldr	r3, [pc, #116]	; (8000b54 <MX_USART2_UART_Init+0x94>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ae4:	4b1b      	ldr	r3, [pc, #108]	; (8000b54 <MX_USART2_UART_Init+0x94>)
 8000ae6:	220c      	movs	r2, #12
 8000ae8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aea:	4b1a      	ldr	r3, [pc, #104]	; (8000b54 <MX_USART2_UART_Init+0x94>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000af0:	4b18      	ldr	r3, [pc, #96]	; (8000b54 <MX_USART2_UART_Init+0x94>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000af6:	4b17      	ldr	r3, [pc, #92]	; (8000b54 <MX_USART2_UART_Init+0x94>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000afc:	4b15      	ldr	r3, [pc, #84]	; (8000b54 <MX_USART2_UART_Init+0x94>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b02:	4b14      	ldr	r3, [pc, #80]	; (8000b54 <MX_USART2_UART_Init+0x94>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b08:	4b12      	ldr	r3, [pc, #72]	; (8000b54 <MX_USART2_UART_Init+0x94>)
 8000b0a:	0018      	movs	r0, r3
 8000b0c:	f001 ffa2 	bl	8002a54 <HAL_UART_Init>
 8000b10:	1e03      	subs	r3, r0, #0
 8000b12:	d001      	beq.n	8000b18 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000b14:	f7ff fee2 	bl	80008dc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b18:	4b0e      	ldr	r3, [pc, #56]	; (8000b54 <MX_USART2_UART_Init+0x94>)
 8000b1a:	2100      	movs	r1, #0
 8000b1c:	0018      	movs	r0, r3
 8000b1e:	f003 fb07 	bl	8004130 <HAL_UARTEx_SetTxFifoThreshold>
 8000b22:	1e03      	subs	r3, r0, #0
 8000b24:	d001      	beq.n	8000b2a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000b26:	f7ff fed9 	bl	80008dc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b2a:	4b0a      	ldr	r3, [pc, #40]	; (8000b54 <MX_USART2_UART_Init+0x94>)
 8000b2c:	2100      	movs	r1, #0
 8000b2e:	0018      	movs	r0, r3
 8000b30:	f003 fb3e 	bl	80041b0 <HAL_UARTEx_SetRxFifoThreshold>
 8000b34:	1e03      	subs	r3, r0, #0
 8000b36:	d001      	beq.n	8000b3c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000b38:	f7ff fed0 	bl	80008dc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000b3c:	4b05      	ldr	r3, [pc, #20]	; (8000b54 <MX_USART2_UART_Init+0x94>)
 8000b3e:	0018      	movs	r0, r3
 8000b40:	f003 fabc 	bl	80040bc <HAL_UARTEx_DisableFifoMode>
 8000b44:	1e03      	subs	r3, r0, #0
 8000b46:	d001      	beq.n	8000b4c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000b48:	f7ff fec8 	bl	80008dc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b4c:	46c0      	nop			; (mov r8, r8)
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	46c0      	nop			; (mov r8, r8)
 8000b54:	20000574 	.word	0x20000574
 8000b58:	40004400 	.word	0x40004400

08000b5c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000b5c:	b590      	push	{r4, r7, lr}
 8000b5e:	b091      	sub	sp, #68	; 0x44
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b64:	232c      	movs	r3, #44	; 0x2c
 8000b66:	18fb      	adds	r3, r7, r3
 8000b68:	0018      	movs	r0, r3
 8000b6a:	2314      	movs	r3, #20
 8000b6c:	001a      	movs	r2, r3
 8000b6e:	2100      	movs	r1, #0
 8000b70:	f006 fcbf 	bl	80074f2 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b74:	2410      	movs	r4, #16
 8000b76:	193b      	adds	r3, r7, r4
 8000b78:	0018      	movs	r0, r3
 8000b7a:	231c      	movs	r3, #28
 8000b7c:	001a      	movs	r2, r3
 8000b7e:	2100      	movs	r1, #0
 8000b80:	f006 fcb7 	bl	80074f2 <memset>
  if(uartHandle->Instance==USART2)
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4a50      	ldr	r2, [pc, #320]	; (8000ccc <HAL_UART_MspInit+0x170>)
 8000b8a:	4293      	cmp	r3, r2
 8000b8c:	d000      	beq.n	8000b90 <HAL_UART_MspInit+0x34>
 8000b8e:	e099      	b.n	8000cc4 <HAL_UART_MspInit+0x168>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000b90:	193b      	adds	r3, r7, r4
 8000b92:	2202      	movs	r2, #2
 8000b94:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000b96:	193b      	adds	r3, r7, r4
 8000b98:	2200      	movs	r2, #0
 8000b9a:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b9c:	193b      	adds	r3, r7, r4
 8000b9e:	0018      	movs	r0, r3
 8000ba0:	f001 fb8e 	bl	80022c0 <HAL_RCCEx_PeriphCLKConfig>
 8000ba4:	1e03      	subs	r3, r0, #0
 8000ba6:	d001      	beq.n	8000bac <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8000ba8:	f7ff fe98 	bl	80008dc <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000bac:	4b48      	ldr	r3, [pc, #288]	; (8000cd0 <HAL_UART_MspInit+0x174>)
 8000bae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000bb0:	4b47      	ldr	r3, [pc, #284]	; (8000cd0 <HAL_UART_MspInit+0x174>)
 8000bb2:	2180      	movs	r1, #128	; 0x80
 8000bb4:	0289      	lsls	r1, r1, #10
 8000bb6:	430a      	orrs	r2, r1
 8000bb8:	63da      	str	r2, [r3, #60]	; 0x3c
 8000bba:	4b45      	ldr	r3, [pc, #276]	; (8000cd0 <HAL_UART_MspInit+0x174>)
 8000bbc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000bbe:	2380      	movs	r3, #128	; 0x80
 8000bc0:	029b      	lsls	r3, r3, #10
 8000bc2:	4013      	ands	r3, r2
 8000bc4:	60fb      	str	r3, [r7, #12]
 8000bc6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bc8:	4b41      	ldr	r3, [pc, #260]	; (8000cd0 <HAL_UART_MspInit+0x174>)
 8000bca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000bcc:	4b40      	ldr	r3, [pc, #256]	; (8000cd0 <HAL_UART_MspInit+0x174>)
 8000bce:	2101      	movs	r1, #1
 8000bd0:	430a      	orrs	r2, r1
 8000bd2:	635a      	str	r2, [r3, #52]	; 0x34
 8000bd4:	4b3e      	ldr	r3, [pc, #248]	; (8000cd0 <HAL_UART_MspInit+0x174>)
 8000bd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bd8:	2201      	movs	r2, #1
 8000bda:	4013      	ands	r3, r2
 8000bdc:	60bb      	str	r3, [r7, #8]
 8000bde:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000be0:	212c      	movs	r1, #44	; 0x2c
 8000be2:	187b      	adds	r3, r7, r1
 8000be4:	220c      	movs	r2, #12
 8000be6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be8:	187b      	adds	r3, r7, r1
 8000bea:	2202      	movs	r2, #2
 8000bec:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bee:	187b      	adds	r3, r7, r1
 8000bf0:	2201      	movs	r2, #1
 8000bf2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf4:	187b      	adds	r3, r7, r1
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000bfa:	187b      	adds	r3, r7, r1
 8000bfc:	2201      	movs	r2, #1
 8000bfe:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c00:	187a      	adds	r2, r7, r1
 8000c02:	23a0      	movs	r3, #160	; 0xa0
 8000c04:	05db      	lsls	r3, r3, #23
 8000c06:	0011      	movs	r1, r2
 8000c08:	0018      	movs	r0, r3
 8000c0a:	f000 fca7 	bl	800155c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel1;
 8000c0e:	4b31      	ldr	r3, [pc, #196]	; (8000cd4 <HAL_UART_MspInit+0x178>)
 8000c10:	4a31      	ldr	r2, [pc, #196]	; (8000cd8 <HAL_UART_MspInit+0x17c>)
 8000c12:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8000c14:	4b2f      	ldr	r3, [pc, #188]	; (8000cd4 <HAL_UART_MspInit+0x178>)
 8000c16:	2234      	movs	r2, #52	; 0x34
 8000c18:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c1a:	4b2e      	ldr	r3, [pc, #184]	; (8000cd4 <HAL_UART_MspInit+0x178>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c20:	4b2c      	ldr	r3, [pc, #176]	; (8000cd4 <HAL_UART_MspInit+0x178>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000c26:	4b2b      	ldr	r3, [pc, #172]	; (8000cd4 <HAL_UART_MspInit+0x178>)
 8000c28:	2280      	movs	r2, #128	; 0x80
 8000c2a:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000c2c:	4b29      	ldr	r3, [pc, #164]	; (8000cd4 <HAL_UART_MspInit+0x178>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000c32:	4b28      	ldr	r3, [pc, #160]	; (8000cd4 <HAL_UART_MspInit+0x178>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8000c38:	4b26      	ldr	r3, [pc, #152]	; (8000cd4 <HAL_UART_MspInit+0x178>)
 8000c3a:	2220      	movs	r2, #32
 8000c3c:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000c3e:	4b25      	ldr	r3, [pc, #148]	; (8000cd4 <HAL_UART_MspInit+0x178>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000c44:	4b23      	ldr	r3, [pc, #140]	; (8000cd4 <HAL_UART_MspInit+0x178>)
 8000c46:	0018      	movs	r0, r3
 8000c48:	f000 f960 	bl	8000f0c <HAL_DMA_Init>
 8000c4c:	1e03      	subs	r3, r0, #0
 8000c4e:	d001      	beq.n	8000c54 <HAL_UART_MspInit+0xf8>
    {
      Error_Handler();
 8000c50:	f7ff fe44 	bl	80008dc <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	2180      	movs	r1, #128	; 0x80
 8000c58:	4a1e      	ldr	r2, [pc, #120]	; (8000cd4 <HAL_UART_MspInit+0x178>)
 8000c5a:	505a      	str	r2, [r3, r1]
 8000c5c:	4b1d      	ldr	r3, [pc, #116]	; (8000cd4 <HAL_UART_MspInit+0x178>)
 8000c5e:	687a      	ldr	r2, [r7, #4]
 8000c60:	629a      	str	r2, [r3, #40]	; 0x28

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel2;
 8000c62:	4b1e      	ldr	r3, [pc, #120]	; (8000cdc <HAL_UART_MspInit+0x180>)
 8000c64:	4a1e      	ldr	r2, [pc, #120]	; (8000ce0 <HAL_UART_MspInit+0x184>)
 8000c66:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8000c68:	4b1c      	ldr	r3, [pc, #112]	; (8000cdc <HAL_UART_MspInit+0x180>)
 8000c6a:	2235      	movs	r2, #53	; 0x35
 8000c6c:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000c6e:	4b1b      	ldr	r3, [pc, #108]	; (8000cdc <HAL_UART_MspInit+0x180>)
 8000c70:	2210      	movs	r2, #16
 8000c72:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c74:	4b19      	ldr	r3, [pc, #100]	; (8000cdc <HAL_UART_MspInit+0x180>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000c7a:	4b18      	ldr	r3, [pc, #96]	; (8000cdc <HAL_UART_MspInit+0x180>)
 8000c7c:	2280      	movs	r2, #128	; 0x80
 8000c7e:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000c80:	4b16      	ldr	r3, [pc, #88]	; (8000cdc <HAL_UART_MspInit+0x180>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000c86:	4b15      	ldr	r3, [pc, #84]	; (8000cdc <HAL_UART_MspInit+0x180>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8000c8c:	4b13      	ldr	r3, [pc, #76]	; (8000cdc <HAL_UART_MspInit+0x180>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000c92:	4b12      	ldr	r3, [pc, #72]	; (8000cdc <HAL_UART_MspInit+0x180>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000c98:	4b10      	ldr	r3, [pc, #64]	; (8000cdc <HAL_UART_MspInit+0x180>)
 8000c9a:	0018      	movs	r0, r3
 8000c9c:	f000 f936 	bl	8000f0c <HAL_DMA_Init>
 8000ca0:	1e03      	subs	r3, r0, #0
 8000ca2:	d001      	beq.n	8000ca8 <HAL_UART_MspInit+0x14c>
    {
      Error_Handler();
 8000ca4:	f7ff fe1a 	bl	80008dc <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	4a0c      	ldr	r2, [pc, #48]	; (8000cdc <HAL_UART_MspInit+0x180>)
 8000cac:	67da      	str	r2, [r3, #124]	; 0x7c
 8000cae:	4b0b      	ldr	r3, [pc, #44]	; (8000cdc <HAL_UART_MspInit+0x180>)
 8000cb0:	687a      	ldr	r2, [r7, #4]
 8000cb2:	629a      	str	r2, [r3, #40]	; 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 3, 0);
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	2103      	movs	r1, #3
 8000cb8:	201c      	movs	r0, #28
 8000cba:	f000 f901 	bl	8000ec0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000cbe:	201c      	movs	r0, #28
 8000cc0:	f000 f913 	bl	8000eea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000cc4:	46c0      	nop			; (mov r8, r8)
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	b011      	add	sp, #68	; 0x44
 8000cca:	bd90      	pop	{r4, r7, pc}
 8000ccc:	40004400 	.word	0x40004400
 8000cd0:	40021000 	.word	0x40021000
 8000cd4:	20000608 	.word	0x20000608
 8000cd8:	40020008 	.word	0x40020008
 8000cdc:	20000664 	.word	0x20000664
 8000ce0:	4002001c 	.word	0x4002001c

08000ce4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ce4:	480d      	ldr	r0, [pc, #52]	; (8000d1c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000ce6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000ce8:	f7ff fee4 	bl	8000ab4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cec:	480c      	ldr	r0, [pc, #48]	; (8000d20 <LoopForever+0x6>)
  ldr r1, =_edata
 8000cee:	490d      	ldr	r1, [pc, #52]	; (8000d24 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000cf0:	4a0d      	ldr	r2, [pc, #52]	; (8000d28 <LoopForever+0xe>)
  movs r3, #0
 8000cf2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cf4:	e002      	b.n	8000cfc <LoopCopyDataInit>

08000cf6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cf6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cf8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cfa:	3304      	adds	r3, #4

08000cfc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cfc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cfe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d00:	d3f9      	bcc.n	8000cf6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d02:	4a0a      	ldr	r2, [pc, #40]	; (8000d2c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d04:	4c0a      	ldr	r4, [pc, #40]	; (8000d30 <LoopForever+0x16>)
  movs r3, #0
 8000d06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d08:	e001      	b.n	8000d0e <LoopFillZerobss>

08000d0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d0c:	3204      	adds	r2, #4

08000d0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d10:	d3fb      	bcc.n	8000d0a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000d12:	f006 fbbf 	bl	8007494 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000d16:	f7ff fd57 	bl	80007c8 <main>

08000d1a <LoopForever>:

LoopForever:
  b LoopForever
 8000d1a:	e7fe      	b.n	8000d1a <LoopForever>
  ldr   r0, =_estack
 8000d1c:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8000d20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d24:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000d28:	08007858 	.word	0x08007858
  ldr r2, =_sbss
 8000d2c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000d30:	200020d4 	.word	0x200020d4

08000d34 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d34:	e7fe      	b.n	8000d34 <ADC1_IRQHandler>
	...

08000d38 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b082      	sub	sp, #8
 8000d3c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d3e:	1dfb      	adds	r3, r7, #7
 8000d40:	2200      	movs	r2, #0
 8000d42:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d44:	4b0b      	ldr	r3, [pc, #44]	; (8000d74 <HAL_Init+0x3c>)
 8000d46:	681a      	ldr	r2, [r3, #0]
 8000d48:	4b0a      	ldr	r3, [pc, #40]	; (8000d74 <HAL_Init+0x3c>)
 8000d4a:	2180      	movs	r1, #128	; 0x80
 8000d4c:	0049      	lsls	r1, r1, #1
 8000d4e:	430a      	orrs	r2, r1
 8000d50:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d52:	2003      	movs	r0, #3
 8000d54:	f7ff fdf2 	bl	800093c <HAL_InitTick>
 8000d58:	1e03      	subs	r3, r0, #0
 8000d5a:	d003      	beq.n	8000d64 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000d5c:	1dfb      	adds	r3, r7, #7
 8000d5e:	2201      	movs	r2, #1
 8000d60:	701a      	strb	r2, [r3, #0]
 8000d62:	e001      	b.n	8000d68 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000d64:	f7ff fdc0 	bl	80008e8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d68:	1dfb      	adds	r3, r7, #7
 8000d6a:	781b      	ldrb	r3, [r3, #0]
}
 8000d6c:	0018      	movs	r0, r3
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	b002      	add	sp, #8
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	40022000 	.word	0x40022000

08000d78 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d7c:	4b05      	ldr	r3, [pc, #20]	; (8000d94 <HAL_IncTick+0x1c>)
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	001a      	movs	r2, r3
 8000d82:	4b05      	ldr	r3, [pc, #20]	; (8000d98 <HAL_IncTick+0x20>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	18d2      	adds	r2, r2, r3
 8000d88:	4b03      	ldr	r3, [pc, #12]	; (8000d98 <HAL_IncTick+0x20>)
 8000d8a:	601a      	str	r2, [r3, #0]
}
 8000d8c:	46c0      	nop			; (mov r8, r8)
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	46c0      	nop			; (mov r8, r8)
 8000d94:	20000008 	.word	0x20000008
 8000d98:	200006c0 	.word	0x200006c0

08000d9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
  return uwTick;
 8000da0:	4b02      	ldr	r3, [pc, #8]	; (8000dac <HAL_GetTick+0x10>)
 8000da2:	681b      	ldr	r3, [r3, #0]
}
 8000da4:	0018      	movs	r0, r3
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	46c0      	nop			; (mov r8, r8)
 8000dac:	200006c0 	.word	0x200006c0

08000db0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b082      	sub	sp, #8
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	0002      	movs	r2, r0
 8000db8:	1dfb      	adds	r3, r7, #7
 8000dba:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000dbc:	1dfb      	adds	r3, r7, #7
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	2b7f      	cmp	r3, #127	; 0x7f
 8000dc2:	d809      	bhi.n	8000dd8 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dc4:	1dfb      	adds	r3, r7, #7
 8000dc6:	781b      	ldrb	r3, [r3, #0]
 8000dc8:	001a      	movs	r2, r3
 8000dca:	231f      	movs	r3, #31
 8000dcc:	401a      	ands	r2, r3
 8000dce:	4b04      	ldr	r3, [pc, #16]	; (8000de0 <__NVIC_EnableIRQ+0x30>)
 8000dd0:	2101      	movs	r1, #1
 8000dd2:	4091      	lsls	r1, r2
 8000dd4:	000a      	movs	r2, r1
 8000dd6:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000dd8:	46c0      	nop			; (mov r8, r8)
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	b002      	add	sp, #8
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	e000e100 	.word	0xe000e100

08000de4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000de4:	b590      	push	{r4, r7, lr}
 8000de6:	b083      	sub	sp, #12
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	0002      	movs	r2, r0
 8000dec:	6039      	str	r1, [r7, #0]
 8000dee:	1dfb      	adds	r3, r7, #7
 8000df0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000df2:	1dfb      	adds	r3, r7, #7
 8000df4:	781b      	ldrb	r3, [r3, #0]
 8000df6:	2b7f      	cmp	r3, #127	; 0x7f
 8000df8:	d828      	bhi.n	8000e4c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000dfa:	4a2f      	ldr	r2, [pc, #188]	; (8000eb8 <__NVIC_SetPriority+0xd4>)
 8000dfc:	1dfb      	adds	r3, r7, #7
 8000dfe:	781b      	ldrb	r3, [r3, #0]
 8000e00:	b25b      	sxtb	r3, r3
 8000e02:	089b      	lsrs	r3, r3, #2
 8000e04:	33c0      	adds	r3, #192	; 0xc0
 8000e06:	009b      	lsls	r3, r3, #2
 8000e08:	589b      	ldr	r3, [r3, r2]
 8000e0a:	1dfa      	adds	r2, r7, #7
 8000e0c:	7812      	ldrb	r2, [r2, #0]
 8000e0e:	0011      	movs	r1, r2
 8000e10:	2203      	movs	r2, #3
 8000e12:	400a      	ands	r2, r1
 8000e14:	00d2      	lsls	r2, r2, #3
 8000e16:	21ff      	movs	r1, #255	; 0xff
 8000e18:	4091      	lsls	r1, r2
 8000e1a:	000a      	movs	r2, r1
 8000e1c:	43d2      	mvns	r2, r2
 8000e1e:	401a      	ands	r2, r3
 8000e20:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	019b      	lsls	r3, r3, #6
 8000e26:	22ff      	movs	r2, #255	; 0xff
 8000e28:	401a      	ands	r2, r3
 8000e2a:	1dfb      	adds	r3, r7, #7
 8000e2c:	781b      	ldrb	r3, [r3, #0]
 8000e2e:	0018      	movs	r0, r3
 8000e30:	2303      	movs	r3, #3
 8000e32:	4003      	ands	r3, r0
 8000e34:	00db      	lsls	r3, r3, #3
 8000e36:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e38:	481f      	ldr	r0, [pc, #124]	; (8000eb8 <__NVIC_SetPriority+0xd4>)
 8000e3a:	1dfb      	adds	r3, r7, #7
 8000e3c:	781b      	ldrb	r3, [r3, #0]
 8000e3e:	b25b      	sxtb	r3, r3
 8000e40:	089b      	lsrs	r3, r3, #2
 8000e42:	430a      	orrs	r2, r1
 8000e44:	33c0      	adds	r3, #192	; 0xc0
 8000e46:	009b      	lsls	r3, r3, #2
 8000e48:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000e4a:	e031      	b.n	8000eb0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e4c:	4a1b      	ldr	r2, [pc, #108]	; (8000ebc <__NVIC_SetPriority+0xd8>)
 8000e4e:	1dfb      	adds	r3, r7, #7
 8000e50:	781b      	ldrb	r3, [r3, #0]
 8000e52:	0019      	movs	r1, r3
 8000e54:	230f      	movs	r3, #15
 8000e56:	400b      	ands	r3, r1
 8000e58:	3b08      	subs	r3, #8
 8000e5a:	089b      	lsrs	r3, r3, #2
 8000e5c:	3306      	adds	r3, #6
 8000e5e:	009b      	lsls	r3, r3, #2
 8000e60:	18d3      	adds	r3, r2, r3
 8000e62:	3304      	adds	r3, #4
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	1dfa      	adds	r2, r7, #7
 8000e68:	7812      	ldrb	r2, [r2, #0]
 8000e6a:	0011      	movs	r1, r2
 8000e6c:	2203      	movs	r2, #3
 8000e6e:	400a      	ands	r2, r1
 8000e70:	00d2      	lsls	r2, r2, #3
 8000e72:	21ff      	movs	r1, #255	; 0xff
 8000e74:	4091      	lsls	r1, r2
 8000e76:	000a      	movs	r2, r1
 8000e78:	43d2      	mvns	r2, r2
 8000e7a:	401a      	ands	r2, r3
 8000e7c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	019b      	lsls	r3, r3, #6
 8000e82:	22ff      	movs	r2, #255	; 0xff
 8000e84:	401a      	ands	r2, r3
 8000e86:	1dfb      	adds	r3, r7, #7
 8000e88:	781b      	ldrb	r3, [r3, #0]
 8000e8a:	0018      	movs	r0, r3
 8000e8c:	2303      	movs	r3, #3
 8000e8e:	4003      	ands	r3, r0
 8000e90:	00db      	lsls	r3, r3, #3
 8000e92:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e94:	4809      	ldr	r0, [pc, #36]	; (8000ebc <__NVIC_SetPriority+0xd8>)
 8000e96:	1dfb      	adds	r3, r7, #7
 8000e98:	781b      	ldrb	r3, [r3, #0]
 8000e9a:	001c      	movs	r4, r3
 8000e9c:	230f      	movs	r3, #15
 8000e9e:	4023      	ands	r3, r4
 8000ea0:	3b08      	subs	r3, #8
 8000ea2:	089b      	lsrs	r3, r3, #2
 8000ea4:	430a      	orrs	r2, r1
 8000ea6:	3306      	adds	r3, #6
 8000ea8:	009b      	lsls	r3, r3, #2
 8000eaa:	18c3      	adds	r3, r0, r3
 8000eac:	3304      	adds	r3, #4
 8000eae:	601a      	str	r2, [r3, #0]
}
 8000eb0:	46c0      	nop			; (mov r8, r8)
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	b003      	add	sp, #12
 8000eb6:	bd90      	pop	{r4, r7, pc}
 8000eb8:	e000e100 	.word	0xe000e100
 8000ebc:	e000ed00 	.word	0xe000ed00

08000ec0 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b084      	sub	sp, #16
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	60b9      	str	r1, [r7, #8]
 8000ec8:	607a      	str	r2, [r7, #4]
 8000eca:	210f      	movs	r1, #15
 8000ecc:	187b      	adds	r3, r7, r1
 8000ece:	1c02      	adds	r2, r0, #0
 8000ed0:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000ed2:	68ba      	ldr	r2, [r7, #8]
 8000ed4:	187b      	adds	r3, r7, r1
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	b25b      	sxtb	r3, r3
 8000eda:	0011      	movs	r1, r2
 8000edc:	0018      	movs	r0, r3
 8000ede:	f7ff ff81 	bl	8000de4 <__NVIC_SetPriority>
}
 8000ee2:	46c0      	nop			; (mov r8, r8)
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	b004      	add	sp, #16
 8000ee8:	bd80      	pop	{r7, pc}

08000eea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eea:	b580      	push	{r7, lr}
 8000eec:	b082      	sub	sp, #8
 8000eee:	af00      	add	r7, sp, #0
 8000ef0:	0002      	movs	r2, r0
 8000ef2:	1dfb      	adds	r3, r7, #7
 8000ef4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ef6:	1dfb      	adds	r3, r7, #7
 8000ef8:	781b      	ldrb	r3, [r3, #0]
 8000efa:	b25b      	sxtb	r3, r3
 8000efc:	0018      	movs	r0, r3
 8000efe:	f7ff ff57 	bl	8000db0 <__NVIC_EnableIRQ>
}
 8000f02:	46c0      	nop			; (mov r8, r8)
 8000f04:	46bd      	mov	sp, r7
 8000f06:	b002      	add	sp, #8
 8000f08:	bd80      	pop	{r7, pc}
	...

08000f0c <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b082      	sub	sp, #8
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d101      	bne.n	8000f1e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	e077      	b.n	800100e <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	4a3d      	ldr	r2, [pc, #244]	; (8001018 <HAL_DMA_Init+0x10c>)
 8000f24:	4694      	mov	ip, r2
 8000f26:	4463      	add	r3, ip
 8000f28:	2114      	movs	r1, #20
 8000f2a:	0018      	movs	r0, r3
 8000f2c:	f7ff f8ec 	bl	8000108 <__udivsi3>
 8000f30:	0003      	movs	r3, r0
 8000f32:	009a      	lsls	r2, r3, #2
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	2225      	movs	r2, #37	; 0x25
 8000f3c:	2102      	movs	r1, #2
 8000f3e:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	681a      	ldr	r2, [r3, #0]
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	4934      	ldr	r1, [pc, #208]	; (800101c <HAL_DMA_Init+0x110>)
 8000f4c:	400a      	ands	r2, r1
 8000f4e:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	6819      	ldr	r1, [r3, #0]
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	689a      	ldr	r2, [r3, #8]
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	68db      	ldr	r3, [r3, #12]
 8000f5e:	431a      	orrs	r2, r3
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	691b      	ldr	r3, [r3, #16]
 8000f64:	431a      	orrs	r2, r3
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	695b      	ldr	r3, [r3, #20]
 8000f6a:	431a      	orrs	r2, r3
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	699b      	ldr	r3, [r3, #24]
 8000f70:	431a      	orrs	r2, r3
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	69db      	ldr	r3, [r3, #28]
 8000f76:	431a      	orrs	r2, r3
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	6a1b      	ldr	r3, [r3, #32]
 8000f7c:	431a      	orrs	r2, r3
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	430a      	orrs	r2, r1
 8000f84:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	0018      	movs	r0, r3
 8000f8a:	f000 fa97 	bl	80014bc <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	689a      	ldr	r2, [r3, #8]
 8000f92:	2380      	movs	r3, #128	; 0x80
 8000f94:	01db      	lsls	r3, r3, #7
 8000f96:	429a      	cmp	r2, r3
 8000f98:	d102      	bne.n	8000fa0 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	685a      	ldr	r2, [r3, #4]
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fa8:	213f      	movs	r1, #63	; 0x3f
 8000faa:	400a      	ands	r2, r1
 8000fac:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000fb2:	687a      	ldr	r2, [r7, #4]
 8000fb4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8000fb6:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d011      	beq.n	8000fe4 <HAL_DMA_Init+0xd8>
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	2b04      	cmp	r3, #4
 8000fc6:	d80d      	bhi.n	8000fe4 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	0018      	movs	r0, r3
 8000fcc:	f000 faa2 	bl	8001514 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000fdc:	687a      	ldr	r2, [r7, #4]
 8000fde:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8000fe0:	605a      	str	r2, [r3, #4]
 8000fe2:	e008      	b.n	8000ff6 <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	2200      	movs	r2, #0
 8000fee:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	2225      	movs	r2, #37	; 0x25
 8001000:	2101      	movs	r1, #1
 8001002:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	2224      	movs	r2, #36	; 0x24
 8001008:	2100      	movs	r1, #0
 800100a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800100c:	2300      	movs	r3, #0
}
 800100e:	0018      	movs	r0, r3
 8001010:	46bd      	mov	sp, r7
 8001012:	b002      	add	sp, #8
 8001014:	bd80      	pop	{r7, pc}
 8001016:	46c0      	nop			; (mov r8, r8)
 8001018:	bffdfff8 	.word	0xbffdfff8
 800101c:	ffff800f 	.word	0xffff800f

08001020 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b086      	sub	sp, #24
 8001024:	af00      	add	r7, sp, #0
 8001026:	60f8      	str	r0, [r7, #12]
 8001028:	60b9      	str	r1, [r7, #8]
 800102a:	607a      	str	r2, [r7, #4]
 800102c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800102e:	2317      	movs	r3, #23
 8001030:	18fb      	adds	r3, r7, r3
 8001032:	2200      	movs	r2, #0
 8001034:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	2224      	movs	r2, #36	; 0x24
 800103a:	5c9b      	ldrb	r3, [r3, r2]
 800103c:	2b01      	cmp	r3, #1
 800103e:	d101      	bne.n	8001044 <HAL_DMA_Start_IT+0x24>
 8001040:	2302      	movs	r3, #2
 8001042:	e06f      	b.n	8001124 <HAL_DMA_Start_IT+0x104>
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	2224      	movs	r2, #36	; 0x24
 8001048:	2101      	movs	r1, #1
 800104a:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	2225      	movs	r2, #37	; 0x25
 8001050:	5c9b      	ldrb	r3, [r3, r2]
 8001052:	b2db      	uxtb	r3, r3
 8001054:	2b01      	cmp	r3, #1
 8001056:	d157      	bne.n	8001108 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	2225      	movs	r2, #37	; 0x25
 800105c:	2102      	movs	r1, #2
 800105e:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	2200      	movs	r2, #0
 8001064:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	681a      	ldr	r2, [r3, #0]
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	2101      	movs	r1, #1
 8001072:	438a      	bics	r2, r1
 8001074:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	687a      	ldr	r2, [r7, #4]
 800107a:	68b9      	ldr	r1, [r7, #8]
 800107c:	68f8      	ldr	r0, [r7, #12]
 800107e:	f000 f9dd 	bl	800143c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001086:	2b00      	cmp	r3, #0
 8001088:	d008      	beq.n	800109c <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	681a      	ldr	r2, [r3, #0]
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	210e      	movs	r1, #14
 8001096:	430a      	orrs	r2, r1
 8001098:	601a      	str	r2, [r3, #0]
 800109a:	e00f      	b.n	80010bc <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	681a      	ldr	r2, [r3, #0]
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	2104      	movs	r1, #4
 80010a8:	438a      	bics	r2, r1
 80010aa:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	681a      	ldr	r2, [r3, #0]
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	210a      	movs	r1, #10
 80010b8:	430a      	orrs	r2, r1
 80010ba:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010c0:	681a      	ldr	r2, [r3, #0]
 80010c2:	2380      	movs	r3, #128	; 0x80
 80010c4:	025b      	lsls	r3, r3, #9
 80010c6:	4013      	ands	r3, r2
 80010c8:	d008      	beq.n	80010dc <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ce:	681a      	ldr	r2, [r3, #0]
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010d4:	2180      	movs	r1, #128	; 0x80
 80010d6:	0049      	lsls	r1, r1, #1
 80010d8:	430a      	orrs	r2, r1
 80010da:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d008      	beq.n	80010f6 <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80010e8:	681a      	ldr	r2, [r3, #0]
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80010ee:	2180      	movs	r1, #128	; 0x80
 80010f0:	0049      	lsls	r1, r1, #1
 80010f2:	430a      	orrs	r2, r1
 80010f4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	681a      	ldr	r2, [r3, #0]
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	2101      	movs	r1, #1
 8001102:	430a      	orrs	r2, r1
 8001104:	601a      	str	r2, [r3, #0]
 8001106:	e00a      	b.n	800111e <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	2280      	movs	r2, #128	; 0x80
 800110c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	2224      	movs	r2, #36	; 0x24
 8001112:	2100      	movs	r1, #0
 8001114:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 8001116:	2317      	movs	r3, #23
 8001118:	18fb      	adds	r3, r7, r3
 800111a:	2201      	movs	r2, #1
 800111c:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800111e:	2317      	movs	r3, #23
 8001120:	18fb      	adds	r3, r7, r3
 8001122:	781b      	ldrb	r3, [r3, #0]
}
 8001124:	0018      	movs	r0, r3
 8001126:	46bd      	mov	sp, r7
 8001128:	b006      	add	sp, #24
 800112a:	bd80      	pop	{r7, pc}

0800112c <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d101      	bne.n	800113e <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800113a:	2301      	movs	r3, #1
 800113c:	e050      	b.n	80011e0 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	2225      	movs	r2, #37	; 0x25
 8001142:	5c9b      	ldrb	r3, [r3, r2]
 8001144:	b2db      	uxtb	r3, r3
 8001146:	2b02      	cmp	r3, #2
 8001148:	d008      	beq.n	800115c <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	2204      	movs	r2, #4
 800114e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	2224      	movs	r2, #36	; 0x24
 8001154:	2100      	movs	r1, #0
 8001156:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001158:	2301      	movs	r3, #1
 800115a:	e041      	b.n	80011e0 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	681a      	ldr	r2, [r3, #0]
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	210e      	movs	r1, #14
 8001168:	438a      	bics	r2, r1
 800116a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001170:	681a      	ldr	r2, [r3, #0]
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001176:	491c      	ldr	r1, [pc, #112]	; (80011e8 <HAL_DMA_Abort+0xbc>)
 8001178:	400a      	ands	r2, r1
 800117a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	681a      	ldr	r2, [r3, #0]
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	2101      	movs	r1, #1
 8001188:	438a      	bics	r2, r1
 800118a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 800118c:	4b17      	ldr	r3, [pc, #92]	; (80011ec <HAL_DMA_Abort+0xc0>)
 800118e:	6859      	ldr	r1, [r3, #4]
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001194:	221c      	movs	r2, #28
 8001196:	4013      	ands	r3, r2
 8001198:	2201      	movs	r2, #1
 800119a:	409a      	lsls	r2, r3
 800119c:	4b13      	ldr	r3, [pc, #76]	; (80011ec <HAL_DMA_Abort+0xc0>)
 800119e:	430a      	orrs	r2, r1
 80011a0:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011a6:	687a      	ldr	r2, [r7, #4]
 80011a8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80011aa:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d00c      	beq.n	80011ce <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80011b8:	681a      	ldr	r2, [r3, #0]
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80011be:	490a      	ldr	r1, [pc, #40]	; (80011e8 <HAL_DMA_Abort+0xbc>)
 80011c0:	400a      	ands	r2, r1
 80011c2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011c8:	687a      	ldr	r2, [r7, #4]
 80011ca:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80011cc:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	2225      	movs	r2, #37	; 0x25
 80011d2:	2101      	movs	r1, #1
 80011d4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	2224      	movs	r2, #36	; 0x24
 80011da:	2100      	movs	r1, #0
 80011dc:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 80011de:	2300      	movs	r3, #0
}
 80011e0:	0018      	movs	r0, r3
 80011e2:	46bd      	mov	sp, r7
 80011e4:	b002      	add	sp, #8
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	fffffeff 	.word	0xfffffeff
 80011ec:	40020000 	.word	0x40020000

080011f0 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b084      	sub	sp, #16
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80011f8:	210f      	movs	r1, #15
 80011fa:	187b      	adds	r3, r7, r1
 80011fc:	2200      	movs	r2, #0
 80011fe:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	2225      	movs	r2, #37	; 0x25
 8001204:	5c9b      	ldrb	r3, [r3, r2]
 8001206:	b2db      	uxtb	r3, r3
 8001208:	2b02      	cmp	r3, #2
 800120a:	d006      	beq.n	800121a <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	2204      	movs	r2, #4
 8001210:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001212:	187b      	adds	r3, r7, r1
 8001214:	2201      	movs	r2, #1
 8001216:	701a      	strb	r2, [r3, #0]
 8001218:	e049      	b.n	80012ae <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	681a      	ldr	r2, [r3, #0]
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	210e      	movs	r1, #14
 8001226:	438a      	bics	r2, r1
 8001228:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	681a      	ldr	r2, [r3, #0]
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	2101      	movs	r1, #1
 8001236:	438a      	bics	r2, r1
 8001238:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800123e:	681a      	ldr	r2, [r3, #0]
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001244:	491d      	ldr	r1, [pc, #116]	; (80012bc <HAL_DMA_Abort_IT+0xcc>)
 8001246:	400a      	ands	r2, r1
 8001248:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 800124a:	4b1d      	ldr	r3, [pc, #116]	; (80012c0 <HAL_DMA_Abort_IT+0xd0>)
 800124c:	6859      	ldr	r1, [r3, #4]
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001252:	221c      	movs	r2, #28
 8001254:	4013      	ands	r3, r2
 8001256:	2201      	movs	r2, #1
 8001258:	409a      	lsls	r2, r3
 800125a:	4b19      	ldr	r3, [pc, #100]	; (80012c0 <HAL_DMA_Abort_IT+0xd0>)
 800125c:	430a      	orrs	r2, r1
 800125e:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001264:	687a      	ldr	r2, [r7, #4]
 8001266:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001268:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800126e:	2b00      	cmp	r3, #0
 8001270:	d00c      	beq.n	800128c <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001276:	681a      	ldr	r2, [r3, #0]
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800127c:	490f      	ldr	r1, [pc, #60]	; (80012bc <HAL_DMA_Abort_IT+0xcc>)
 800127e:	400a      	ands	r2, r1
 8001280:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001286:	687a      	ldr	r2, [r7, #4]
 8001288:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800128a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	2225      	movs	r2, #37	; 0x25
 8001290:	2101      	movs	r1, #1
 8001292:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	2224      	movs	r2, #36	; 0x24
 8001298:	2100      	movs	r1, #0
 800129a:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d004      	beq.n	80012ae <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012a8:	687a      	ldr	r2, [r7, #4]
 80012aa:	0010      	movs	r0, r2
 80012ac:	4798      	blx	r3
    }
  }
  return status;
 80012ae:	230f      	movs	r3, #15
 80012b0:	18fb      	adds	r3, r7, r3
 80012b2:	781b      	ldrb	r3, [r3, #0]
}
 80012b4:	0018      	movs	r0, r3
 80012b6:	46bd      	mov	sp, r7
 80012b8:	b004      	add	sp, #16
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	fffffeff 	.word	0xfffffeff
 80012c0:	40020000 	.word	0x40020000

080012c4 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b084      	sub	sp, #16
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 80012cc:	4b55      	ldr	r3, [pc, #340]	; (8001424 <HAL_DMA_IRQHandler+0x160>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012de:	221c      	movs	r2, #28
 80012e0:	4013      	ands	r3, r2
 80012e2:	2204      	movs	r2, #4
 80012e4:	409a      	lsls	r2, r3
 80012e6:	0013      	movs	r3, r2
 80012e8:	68fa      	ldr	r2, [r7, #12]
 80012ea:	4013      	ands	r3, r2
 80012ec:	d027      	beq.n	800133e <HAL_DMA_IRQHandler+0x7a>
 80012ee:	68bb      	ldr	r3, [r7, #8]
 80012f0:	2204      	movs	r2, #4
 80012f2:	4013      	ands	r3, r2
 80012f4:	d023      	beq.n	800133e <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	2220      	movs	r2, #32
 80012fe:	4013      	ands	r3, r2
 8001300:	d107      	bne.n	8001312 <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	681a      	ldr	r2, [r3, #0]
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	2104      	movs	r1, #4
 800130e:	438a      	bics	r2, r1
 8001310:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8001312:	4b44      	ldr	r3, [pc, #272]	; (8001424 <HAL_DMA_IRQHandler+0x160>)
 8001314:	6859      	ldr	r1, [r3, #4]
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800131a:	221c      	movs	r2, #28
 800131c:	4013      	ands	r3, r2
 800131e:	2204      	movs	r2, #4
 8001320:	409a      	lsls	r2, r3
 8001322:	4b40      	ldr	r3, [pc, #256]	; (8001424 <HAL_DMA_IRQHandler+0x160>)
 8001324:	430a      	orrs	r2, r1
 8001326:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132c:	2b00      	cmp	r3, #0
 800132e:	d100      	bne.n	8001332 <HAL_DMA_IRQHandler+0x6e>
 8001330:	e073      	b.n	800141a <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001336:	687a      	ldr	r2, [r7, #4]
 8001338:	0010      	movs	r0, r2
 800133a:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 800133c:	e06d      	b.n	800141a <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001342:	221c      	movs	r2, #28
 8001344:	4013      	ands	r3, r2
 8001346:	2202      	movs	r2, #2
 8001348:	409a      	lsls	r2, r3
 800134a:	0013      	movs	r3, r2
 800134c:	68fa      	ldr	r2, [r7, #12]
 800134e:	4013      	ands	r3, r2
 8001350:	d02e      	beq.n	80013b0 <HAL_DMA_IRQHandler+0xec>
 8001352:	68bb      	ldr	r3, [r7, #8]
 8001354:	2202      	movs	r2, #2
 8001356:	4013      	ands	r3, r2
 8001358:	d02a      	beq.n	80013b0 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	2220      	movs	r2, #32
 8001362:	4013      	ands	r3, r2
 8001364:	d10b      	bne.n	800137e <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	681a      	ldr	r2, [r3, #0]
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	210a      	movs	r1, #10
 8001372:	438a      	bics	r2, r1
 8001374:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	2225      	movs	r2, #37	; 0x25
 800137a:	2101      	movs	r1, #1
 800137c:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 800137e:	4b29      	ldr	r3, [pc, #164]	; (8001424 <HAL_DMA_IRQHandler+0x160>)
 8001380:	6859      	ldr	r1, [r3, #4]
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001386:	221c      	movs	r2, #28
 8001388:	4013      	ands	r3, r2
 800138a:	2202      	movs	r2, #2
 800138c:	409a      	lsls	r2, r3
 800138e:	4b25      	ldr	r3, [pc, #148]	; (8001424 <HAL_DMA_IRQHandler+0x160>)
 8001390:	430a      	orrs	r2, r1
 8001392:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2224      	movs	r2, #36	; 0x24
 8001398:	2100      	movs	r1, #0
 800139a:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d03a      	beq.n	800141a <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013a8:	687a      	ldr	r2, [r7, #4]
 80013aa:	0010      	movs	r0, r2
 80013ac:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 80013ae:	e034      	b.n	800141a <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b4:	221c      	movs	r2, #28
 80013b6:	4013      	ands	r3, r2
 80013b8:	2208      	movs	r2, #8
 80013ba:	409a      	lsls	r2, r3
 80013bc:	0013      	movs	r3, r2
 80013be:	68fa      	ldr	r2, [r7, #12]
 80013c0:	4013      	ands	r3, r2
 80013c2:	d02b      	beq.n	800141c <HAL_DMA_IRQHandler+0x158>
 80013c4:	68bb      	ldr	r3, [r7, #8]
 80013c6:	2208      	movs	r2, #8
 80013c8:	4013      	ands	r3, r2
 80013ca:	d027      	beq.n	800141c <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	681a      	ldr	r2, [r3, #0]
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	210e      	movs	r1, #14
 80013d8:	438a      	bics	r2, r1
 80013da:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 80013dc:	4b11      	ldr	r3, [pc, #68]	; (8001424 <HAL_DMA_IRQHandler+0x160>)
 80013de:	6859      	ldr	r1, [r3, #4]
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e4:	221c      	movs	r2, #28
 80013e6:	4013      	ands	r3, r2
 80013e8:	2201      	movs	r2, #1
 80013ea:	409a      	lsls	r2, r3
 80013ec:	4b0d      	ldr	r3, [pc, #52]	; (8001424 <HAL_DMA_IRQHandler+0x160>)
 80013ee:	430a      	orrs	r2, r1
 80013f0:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	2201      	movs	r2, #1
 80013f6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	2225      	movs	r2, #37	; 0x25
 80013fc:	2101      	movs	r1, #1
 80013fe:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	2224      	movs	r2, #36	; 0x24
 8001404:	2100      	movs	r1, #0
 8001406:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800140c:	2b00      	cmp	r3, #0
 800140e:	d005      	beq.n	800141c <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001414:	687a      	ldr	r2, [r7, #4]
 8001416:	0010      	movs	r0, r2
 8001418:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800141a:	46c0      	nop			; (mov r8, r8)
 800141c:	46c0      	nop			; (mov r8, r8)
}
 800141e:	46bd      	mov	sp, r7
 8001420:	b004      	add	sp, #16
 8001422:	bd80      	pop	{r7, pc}
 8001424:	40020000 	.word	0x40020000

08001428 <HAL_DMA_GetError>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  /* Return the DMA error code */
  return hdma->ErrorCode;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
}
 8001434:	0018      	movs	r0, r3
 8001436:	46bd      	mov	sp, r7
 8001438:	b002      	add	sp, #8
 800143a:	bd80      	pop	{r7, pc}

0800143c <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b084      	sub	sp, #16
 8001440:	af00      	add	r7, sp, #0
 8001442:	60f8      	str	r0, [r7, #12]
 8001444:	60b9      	str	r1, [r7, #8]
 8001446:	607a      	str	r2, [r7, #4]
 8001448:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800144e:	68fa      	ldr	r2, [r7, #12]
 8001450:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001452:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001458:	2b00      	cmp	r3, #0
 800145a:	d004      	beq.n	8001466 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001460:	68fa      	ldr	r2, [r7, #12]
 8001462:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8001464:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8001466:	4b14      	ldr	r3, [pc, #80]	; (80014b8 <DMA_SetConfig+0x7c>)
 8001468:	6859      	ldr	r1, [r3, #4]
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800146e:	221c      	movs	r2, #28
 8001470:	4013      	ands	r3, r2
 8001472:	2201      	movs	r2, #1
 8001474:	409a      	lsls	r2, r3
 8001476:	4b10      	ldr	r3, [pc, #64]	; (80014b8 <DMA_SetConfig+0x7c>)
 8001478:	430a      	orrs	r2, r1
 800147a:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	683a      	ldr	r2, [r7, #0]
 8001482:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	689b      	ldr	r3, [r3, #8]
 8001488:	2b10      	cmp	r3, #16
 800148a:	d108      	bne.n	800149e <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	687a      	ldr	r2, [r7, #4]
 8001492:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	68ba      	ldr	r2, [r7, #8]
 800149a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800149c:	e007      	b.n	80014ae <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	68ba      	ldr	r2, [r7, #8]
 80014a4:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	687a      	ldr	r2, [r7, #4]
 80014ac:	60da      	str	r2, [r3, #12]
}
 80014ae:	46c0      	nop			; (mov r8, r8)
 80014b0:	46bd      	mov	sp, r7
 80014b2:	b004      	add	sp, #16
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	46c0      	nop			; (mov r8, r8)
 80014b8:	40020000 	.word	0x40020000

080014bc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b084      	sub	sp, #16
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c8:	089b      	lsrs	r3, r3, #2
 80014ca:	4a10      	ldr	r2, [pc, #64]	; (800150c <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 80014cc:	4694      	mov	ip, r2
 80014ce:	4463      	add	r3, ip
 80014d0:	009b      	lsls	r3, r3, #2
 80014d2:	001a      	movs	r2, r3
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	001a      	movs	r2, r3
 80014de:	23ff      	movs	r3, #255	; 0xff
 80014e0:	4013      	ands	r3, r2
 80014e2:	3b08      	subs	r3, #8
 80014e4:	2114      	movs	r1, #20
 80014e6:	0018      	movs	r0, r3
 80014e8:	f7fe fe0e 	bl	8000108 <__udivsi3>
 80014ec:	0003      	movs	r3, r0
 80014ee:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	4a07      	ldr	r2, [pc, #28]	; (8001510 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 80014f4:	649a      	str	r2, [r3, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	221f      	movs	r2, #31
 80014fa:	4013      	ands	r3, r2
 80014fc:	2201      	movs	r2, #1
 80014fe:	409a      	lsls	r2, r3
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8001504:	46c0      	nop			; (mov r8, r8)
 8001506:	46bd      	mov	sp, r7
 8001508:	b004      	add	sp, #16
 800150a:	bd80      	pop	{r7, pc}
 800150c:	10008200 	.word	0x10008200
 8001510:	40020880 	.word	0x40020880

08001514 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b084      	sub	sp, #16
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	223f      	movs	r2, #63	; 0x3f
 8001522:	4013      	ands	r3, r2
 8001524:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	4a0a      	ldr	r2, [pc, #40]	; (8001554 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800152a:	4694      	mov	ip, r2
 800152c:	4463      	add	r3, ip
 800152e:	009b      	lsls	r3, r3, #2
 8001530:	001a      	movs	r2, r3
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	4a07      	ldr	r2, [pc, #28]	; (8001558 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800153a:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	3b01      	subs	r3, #1
 8001540:	2203      	movs	r2, #3
 8001542:	4013      	ands	r3, r2
 8001544:	2201      	movs	r2, #1
 8001546:	409a      	lsls	r2, r3
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	659a      	str	r2, [r3, #88]	; 0x58
}
 800154c:	46c0      	nop			; (mov r8, r8)
 800154e:	46bd      	mov	sp, r7
 8001550:	b004      	add	sp, #16
 8001552:	bd80      	pop	{r7, pc}
 8001554:	1000823f 	.word	0x1000823f
 8001558:	40020940 	.word	0x40020940

0800155c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b086      	sub	sp, #24
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
 8001564:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001566:	2300      	movs	r3, #0
 8001568:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800156a:	e147      	b.n	80017fc <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	2101      	movs	r1, #1
 8001572:	697a      	ldr	r2, [r7, #20]
 8001574:	4091      	lsls	r1, r2
 8001576:	000a      	movs	r2, r1
 8001578:	4013      	ands	r3, r2
 800157a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d100      	bne.n	8001584 <HAL_GPIO_Init+0x28>
 8001582:	e138      	b.n	80017f6 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	2203      	movs	r2, #3
 800158a:	4013      	ands	r3, r2
 800158c:	2b01      	cmp	r3, #1
 800158e:	d005      	beq.n	800159c <HAL_GPIO_Init+0x40>
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	2203      	movs	r2, #3
 8001596:	4013      	ands	r3, r2
 8001598:	2b02      	cmp	r3, #2
 800159a:	d130      	bne.n	80015fe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	689b      	ldr	r3, [r3, #8]
 80015a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80015a2:	697b      	ldr	r3, [r7, #20]
 80015a4:	005b      	lsls	r3, r3, #1
 80015a6:	2203      	movs	r2, #3
 80015a8:	409a      	lsls	r2, r3
 80015aa:	0013      	movs	r3, r2
 80015ac:	43da      	mvns	r2, r3
 80015ae:	693b      	ldr	r3, [r7, #16]
 80015b0:	4013      	ands	r3, r2
 80015b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	68da      	ldr	r2, [r3, #12]
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	005b      	lsls	r3, r3, #1
 80015bc:	409a      	lsls	r2, r3
 80015be:	0013      	movs	r3, r2
 80015c0:	693a      	ldr	r2, [r7, #16]
 80015c2:	4313      	orrs	r3, r2
 80015c4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	693a      	ldr	r2, [r7, #16]
 80015ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80015d2:	2201      	movs	r2, #1
 80015d4:	697b      	ldr	r3, [r7, #20]
 80015d6:	409a      	lsls	r2, r3
 80015d8:	0013      	movs	r3, r2
 80015da:	43da      	mvns	r2, r3
 80015dc:	693b      	ldr	r3, [r7, #16]
 80015de:	4013      	ands	r3, r2
 80015e0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	091b      	lsrs	r3, r3, #4
 80015e8:	2201      	movs	r2, #1
 80015ea:	401a      	ands	r2, r3
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	409a      	lsls	r2, r3
 80015f0:	0013      	movs	r3, r2
 80015f2:	693a      	ldr	r2, [r7, #16]
 80015f4:	4313      	orrs	r3, r2
 80015f6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	693a      	ldr	r2, [r7, #16]
 80015fc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	2203      	movs	r2, #3
 8001604:	4013      	ands	r3, r2
 8001606:	2b03      	cmp	r3, #3
 8001608:	d017      	beq.n	800163a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	68db      	ldr	r3, [r3, #12]
 800160e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	005b      	lsls	r3, r3, #1
 8001614:	2203      	movs	r2, #3
 8001616:	409a      	lsls	r2, r3
 8001618:	0013      	movs	r3, r2
 800161a:	43da      	mvns	r2, r3
 800161c:	693b      	ldr	r3, [r7, #16]
 800161e:	4013      	ands	r3, r2
 8001620:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	689a      	ldr	r2, [r3, #8]
 8001626:	697b      	ldr	r3, [r7, #20]
 8001628:	005b      	lsls	r3, r3, #1
 800162a:	409a      	lsls	r2, r3
 800162c:	0013      	movs	r3, r2
 800162e:	693a      	ldr	r2, [r7, #16]
 8001630:	4313      	orrs	r3, r2
 8001632:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	693a      	ldr	r2, [r7, #16]
 8001638:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	2203      	movs	r2, #3
 8001640:	4013      	ands	r3, r2
 8001642:	2b02      	cmp	r3, #2
 8001644:	d123      	bne.n	800168e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001646:	697b      	ldr	r3, [r7, #20]
 8001648:	08da      	lsrs	r2, r3, #3
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	3208      	adds	r2, #8
 800164e:	0092      	lsls	r2, r2, #2
 8001650:	58d3      	ldr	r3, [r2, r3]
 8001652:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	2207      	movs	r2, #7
 8001658:	4013      	ands	r3, r2
 800165a:	009b      	lsls	r3, r3, #2
 800165c:	220f      	movs	r2, #15
 800165e:	409a      	lsls	r2, r3
 8001660:	0013      	movs	r3, r2
 8001662:	43da      	mvns	r2, r3
 8001664:	693b      	ldr	r3, [r7, #16]
 8001666:	4013      	ands	r3, r2
 8001668:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	691a      	ldr	r2, [r3, #16]
 800166e:	697b      	ldr	r3, [r7, #20]
 8001670:	2107      	movs	r1, #7
 8001672:	400b      	ands	r3, r1
 8001674:	009b      	lsls	r3, r3, #2
 8001676:	409a      	lsls	r2, r3
 8001678:	0013      	movs	r3, r2
 800167a:	693a      	ldr	r2, [r7, #16]
 800167c:	4313      	orrs	r3, r2
 800167e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	08da      	lsrs	r2, r3, #3
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	3208      	adds	r2, #8
 8001688:	0092      	lsls	r2, r2, #2
 800168a:	6939      	ldr	r1, [r7, #16]
 800168c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	005b      	lsls	r3, r3, #1
 8001698:	2203      	movs	r2, #3
 800169a:	409a      	lsls	r2, r3
 800169c:	0013      	movs	r3, r2
 800169e:	43da      	mvns	r2, r3
 80016a0:	693b      	ldr	r3, [r7, #16]
 80016a2:	4013      	ands	r3, r2
 80016a4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	2203      	movs	r2, #3
 80016ac:	401a      	ands	r2, r3
 80016ae:	697b      	ldr	r3, [r7, #20]
 80016b0:	005b      	lsls	r3, r3, #1
 80016b2:	409a      	lsls	r2, r3
 80016b4:	0013      	movs	r3, r2
 80016b6:	693a      	ldr	r2, [r7, #16]
 80016b8:	4313      	orrs	r3, r2
 80016ba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	693a      	ldr	r2, [r7, #16]
 80016c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	685a      	ldr	r2, [r3, #4]
 80016c6:	23c0      	movs	r3, #192	; 0xc0
 80016c8:	029b      	lsls	r3, r3, #10
 80016ca:	4013      	ands	r3, r2
 80016cc:	d100      	bne.n	80016d0 <HAL_GPIO_Init+0x174>
 80016ce:	e092      	b.n	80017f6 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80016d0:	4a50      	ldr	r2, [pc, #320]	; (8001814 <HAL_GPIO_Init+0x2b8>)
 80016d2:	697b      	ldr	r3, [r7, #20]
 80016d4:	089b      	lsrs	r3, r3, #2
 80016d6:	3318      	adds	r3, #24
 80016d8:	009b      	lsls	r3, r3, #2
 80016da:	589b      	ldr	r3, [r3, r2]
 80016dc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80016de:	697b      	ldr	r3, [r7, #20]
 80016e0:	2203      	movs	r2, #3
 80016e2:	4013      	ands	r3, r2
 80016e4:	00db      	lsls	r3, r3, #3
 80016e6:	220f      	movs	r2, #15
 80016e8:	409a      	lsls	r2, r3
 80016ea:	0013      	movs	r3, r2
 80016ec:	43da      	mvns	r2, r3
 80016ee:	693b      	ldr	r3, [r7, #16]
 80016f0:	4013      	ands	r3, r2
 80016f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80016f4:	687a      	ldr	r2, [r7, #4]
 80016f6:	23a0      	movs	r3, #160	; 0xa0
 80016f8:	05db      	lsls	r3, r3, #23
 80016fa:	429a      	cmp	r2, r3
 80016fc:	d013      	beq.n	8001726 <HAL_GPIO_Init+0x1ca>
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	4a45      	ldr	r2, [pc, #276]	; (8001818 <HAL_GPIO_Init+0x2bc>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d00d      	beq.n	8001722 <HAL_GPIO_Init+0x1c6>
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	4a44      	ldr	r2, [pc, #272]	; (800181c <HAL_GPIO_Init+0x2c0>)
 800170a:	4293      	cmp	r3, r2
 800170c:	d007      	beq.n	800171e <HAL_GPIO_Init+0x1c2>
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	4a43      	ldr	r2, [pc, #268]	; (8001820 <HAL_GPIO_Init+0x2c4>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d101      	bne.n	800171a <HAL_GPIO_Init+0x1be>
 8001716:	2303      	movs	r3, #3
 8001718:	e006      	b.n	8001728 <HAL_GPIO_Init+0x1cc>
 800171a:	2305      	movs	r3, #5
 800171c:	e004      	b.n	8001728 <HAL_GPIO_Init+0x1cc>
 800171e:	2302      	movs	r3, #2
 8001720:	e002      	b.n	8001728 <HAL_GPIO_Init+0x1cc>
 8001722:	2301      	movs	r3, #1
 8001724:	e000      	b.n	8001728 <HAL_GPIO_Init+0x1cc>
 8001726:	2300      	movs	r3, #0
 8001728:	697a      	ldr	r2, [r7, #20]
 800172a:	2103      	movs	r1, #3
 800172c:	400a      	ands	r2, r1
 800172e:	00d2      	lsls	r2, r2, #3
 8001730:	4093      	lsls	r3, r2
 8001732:	693a      	ldr	r2, [r7, #16]
 8001734:	4313      	orrs	r3, r2
 8001736:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001738:	4936      	ldr	r1, [pc, #216]	; (8001814 <HAL_GPIO_Init+0x2b8>)
 800173a:	697b      	ldr	r3, [r7, #20]
 800173c:	089b      	lsrs	r3, r3, #2
 800173e:	3318      	adds	r3, #24
 8001740:	009b      	lsls	r3, r3, #2
 8001742:	693a      	ldr	r2, [r7, #16]
 8001744:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001746:	4b33      	ldr	r3, [pc, #204]	; (8001814 <HAL_GPIO_Init+0x2b8>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	43da      	mvns	r2, r3
 8001750:	693b      	ldr	r3, [r7, #16]
 8001752:	4013      	ands	r3, r2
 8001754:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	685a      	ldr	r2, [r3, #4]
 800175a:	2380      	movs	r3, #128	; 0x80
 800175c:	035b      	lsls	r3, r3, #13
 800175e:	4013      	ands	r3, r2
 8001760:	d003      	beq.n	800176a <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8001762:	693a      	ldr	r2, [r7, #16]
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	4313      	orrs	r3, r2
 8001768:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800176a:	4b2a      	ldr	r3, [pc, #168]	; (8001814 <HAL_GPIO_Init+0x2b8>)
 800176c:	693a      	ldr	r2, [r7, #16]
 800176e:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001770:	4b28      	ldr	r3, [pc, #160]	; (8001814 <HAL_GPIO_Init+0x2b8>)
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	43da      	mvns	r2, r3
 800177a:	693b      	ldr	r3, [r7, #16]
 800177c:	4013      	ands	r3, r2
 800177e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	685a      	ldr	r2, [r3, #4]
 8001784:	2380      	movs	r3, #128	; 0x80
 8001786:	039b      	lsls	r3, r3, #14
 8001788:	4013      	ands	r3, r2
 800178a:	d003      	beq.n	8001794 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 800178c:	693a      	ldr	r2, [r7, #16]
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	4313      	orrs	r3, r2
 8001792:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001794:	4b1f      	ldr	r3, [pc, #124]	; (8001814 <HAL_GPIO_Init+0x2b8>)
 8001796:	693a      	ldr	r2, [r7, #16]
 8001798:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800179a:	4a1e      	ldr	r2, [pc, #120]	; (8001814 <HAL_GPIO_Init+0x2b8>)
 800179c:	2384      	movs	r3, #132	; 0x84
 800179e:	58d3      	ldr	r3, [r2, r3]
 80017a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	43da      	mvns	r2, r3
 80017a6:	693b      	ldr	r3, [r7, #16]
 80017a8:	4013      	ands	r3, r2
 80017aa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	685a      	ldr	r2, [r3, #4]
 80017b0:	2380      	movs	r3, #128	; 0x80
 80017b2:	029b      	lsls	r3, r3, #10
 80017b4:	4013      	ands	r3, r2
 80017b6:	d003      	beq.n	80017c0 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80017b8:	693a      	ldr	r2, [r7, #16]
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	4313      	orrs	r3, r2
 80017be:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80017c0:	4914      	ldr	r1, [pc, #80]	; (8001814 <HAL_GPIO_Init+0x2b8>)
 80017c2:	2284      	movs	r2, #132	; 0x84
 80017c4:	693b      	ldr	r3, [r7, #16]
 80017c6:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80017c8:	4a12      	ldr	r2, [pc, #72]	; (8001814 <HAL_GPIO_Init+0x2b8>)
 80017ca:	2380      	movs	r3, #128	; 0x80
 80017cc:	58d3      	ldr	r3, [r2, r3]
 80017ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	43da      	mvns	r2, r3
 80017d4:	693b      	ldr	r3, [r7, #16]
 80017d6:	4013      	ands	r3, r2
 80017d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	685a      	ldr	r2, [r3, #4]
 80017de:	2380      	movs	r3, #128	; 0x80
 80017e0:	025b      	lsls	r3, r3, #9
 80017e2:	4013      	ands	r3, r2
 80017e4:	d003      	beq.n	80017ee <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 80017e6:	693a      	ldr	r2, [r7, #16]
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	4313      	orrs	r3, r2
 80017ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80017ee:	4909      	ldr	r1, [pc, #36]	; (8001814 <HAL_GPIO_Init+0x2b8>)
 80017f0:	2280      	movs	r2, #128	; 0x80
 80017f2:	693b      	ldr	r3, [r7, #16]
 80017f4:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80017f6:	697b      	ldr	r3, [r7, #20]
 80017f8:	3301      	adds	r3, #1
 80017fa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	681a      	ldr	r2, [r3, #0]
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	40da      	lsrs	r2, r3
 8001804:	1e13      	subs	r3, r2, #0
 8001806:	d000      	beq.n	800180a <HAL_GPIO_Init+0x2ae>
 8001808:	e6b0      	b.n	800156c <HAL_GPIO_Init+0x10>
  }
}
 800180a:	46c0      	nop			; (mov r8, r8)
 800180c:	46c0      	nop			; (mov r8, r8)
 800180e:	46bd      	mov	sp, r7
 8001810:	b006      	add	sp, #24
 8001812:	bd80      	pop	{r7, pc}
 8001814:	40021800 	.word	0x40021800
 8001818:	50000400 	.word	0x50000400
 800181c:	50000800 	.word	0x50000800
 8001820:	50000c00 	.word	0x50000c00

08001824 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b082      	sub	sp, #8
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
 800182c:	0008      	movs	r0, r1
 800182e:	0011      	movs	r1, r2
 8001830:	1cbb      	adds	r3, r7, #2
 8001832:	1c02      	adds	r2, r0, #0
 8001834:	801a      	strh	r2, [r3, #0]
 8001836:	1c7b      	adds	r3, r7, #1
 8001838:	1c0a      	adds	r2, r1, #0
 800183a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800183c:	1c7b      	adds	r3, r7, #1
 800183e:	781b      	ldrb	r3, [r3, #0]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d004      	beq.n	800184e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001844:	1cbb      	adds	r3, r7, #2
 8001846:	881a      	ldrh	r2, [r3, #0]
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800184c:	e003      	b.n	8001856 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800184e:	1cbb      	adds	r3, r7, #2
 8001850:	881a      	ldrh	r2, [r3, #0]
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001856:	46c0      	nop			; (mov r8, r8)
 8001858:	46bd      	mov	sp, r7
 800185a:	b002      	add	sp, #8
 800185c:	bd80      	pop	{r7, pc}
	...

08001860 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b084      	sub	sp, #16
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001868:	4b19      	ldr	r3, [pc, #100]	; (80018d0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a19      	ldr	r2, [pc, #100]	; (80018d4 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800186e:	4013      	ands	r3, r2
 8001870:	0019      	movs	r1, r3
 8001872:	4b17      	ldr	r3, [pc, #92]	; (80018d0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001874:	687a      	ldr	r2, [r7, #4]
 8001876:	430a      	orrs	r2, r1
 8001878:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800187a:	687a      	ldr	r2, [r7, #4]
 800187c:	2380      	movs	r3, #128	; 0x80
 800187e:	009b      	lsls	r3, r3, #2
 8001880:	429a      	cmp	r2, r3
 8001882:	d11f      	bne.n	80018c4 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001884:	4b14      	ldr	r3, [pc, #80]	; (80018d8 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001886:	681a      	ldr	r2, [r3, #0]
 8001888:	0013      	movs	r3, r2
 800188a:	005b      	lsls	r3, r3, #1
 800188c:	189b      	adds	r3, r3, r2
 800188e:	005b      	lsls	r3, r3, #1
 8001890:	4912      	ldr	r1, [pc, #72]	; (80018dc <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001892:	0018      	movs	r0, r3
 8001894:	f7fe fc38 	bl	8000108 <__udivsi3>
 8001898:	0003      	movs	r3, r0
 800189a:	3301      	adds	r3, #1
 800189c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800189e:	e008      	b.n	80018b2 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d003      	beq.n	80018ae <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	3b01      	subs	r3, #1
 80018aa:	60fb      	str	r3, [r7, #12]
 80018ac:	e001      	b.n	80018b2 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80018ae:	2303      	movs	r3, #3
 80018b0:	e009      	b.n	80018c6 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80018b2:	4b07      	ldr	r3, [pc, #28]	; (80018d0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80018b4:	695a      	ldr	r2, [r3, #20]
 80018b6:	2380      	movs	r3, #128	; 0x80
 80018b8:	00db      	lsls	r3, r3, #3
 80018ba:	401a      	ands	r2, r3
 80018bc:	2380      	movs	r3, #128	; 0x80
 80018be:	00db      	lsls	r3, r3, #3
 80018c0:	429a      	cmp	r2, r3
 80018c2:	d0ed      	beq.n	80018a0 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80018c4:	2300      	movs	r3, #0
}
 80018c6:	0018      	movs	r0, r3
 80018c8:	46bd      	mov	sp, r7
 80018ca:	b004      	add	sp, #16
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	46c0      	nop			; (mov r8, r8)
 80018d0:	40007000 	.word	0x40007000
 80018d4:	fffff9ff 	.word	0xfffff9ff
 80018d8:	20000000 	.word	0x20000000
 80018dc:	000f4240 	.word	0x000f4240

080018e0 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80018e4:	4b03      	ldr	r3, [pc, #12]	; (80018f4 <LL_RCC_GetAPB1Prescaler+0x14>)
 80018e6:	689a      	ldr	r2, [r3, #8]
 80018e8:	23e0      	movs	r3, #224	; 0xe0
 80018ea:	01db      	lsls	r3, r3, #7
 80018ec:	4013      	ands	r3, r2
}
 80018ee:	0018      	movs	r0, r3
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	40021000 	.word	0x40021000

080018f8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b088      	sub	sp, #32
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d101      	bne.n	800190a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001906:	2301      	movs	r3, #1
 8001908:	e2f3      	b.n	8001ef2 <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	2201      	movs	r2, #1
 8001910:	4013      	ands	r3, r2
 8001912:	d100      	bne.n	8001916 <HAL_RCC_OscConfig+0x1e>
 8001914:	e07c      	b.n	8001a10 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001916:	4bc3      	ldr	r3, [pc, #780]	; (8001c24 <HAL_RCC_OscConfig+0x32c>)
 8001918:	689b      	ldr	r3, [r3, #8]
 800191a:	2238      	movs	r2, #56	; 0x38
 800191c:	4013      	ands	r3, r2
 800191e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001920:	4bc0      	ldr	r3, [pc, #768]	; (8001c24 <HAL_RCC_OscConfig+0x32c>)
 8001922:	68db      	ldr	r3, [r3, #12]
 8001924:	2203      	movs	r2, #3
 8001926:	4013      	ands	r3, r2
 8001928:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800192a:	69bb      	ldr	r3, [r7, #24]
 800192c:	2b10      	cmp	r3, #16
 800192e:	d102      	bne.n	8001936 <HAL_RCC_OscConfig+0x3e>
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	2b03      	cmp	r3, #3
 8001934:	d002      	beq.n	800193c <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001936:	69bb      	ldr	r3, [r7, #24]
 8001938:	2b08      	cmp	r3, #8
 800193a:	d10b      	bne.n	8001954 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800193c:	4bb9      	ldr	r3, [pc, #740]	; (8001c24 <HAL_RCC_OscConfig+0x32c>)
 800193e:	681a      	ldr	r2, [r3, #0]
 8001940:	2380      	movs	r3, #128	; 0x80
 8001942:	029b      	lsls	r3, r3, #10
 8001944:	4013      	ands	r3, r2
 8001946:	d062      	beq.n	8001a0e <HAL_RCC_OscConfig+0x116>
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	2b00      	cmp	r3, #0
 800194e:	d15e      	bne.n	8001a0e <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001950:	2301      	movs	r3, #1
 8001952:	e2ce      	b.n	8001ef2 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	685a      	ldr	r2, [r3, #4]
 8001958:	2380      	movs	r3, #128	; 0x80
 800195a:	025b      	lsls	r3, r3, #9
 800195c:	429a      	cmp	r2, r3
 800195e:	d107      	bne.n	8001970 <HAL_RCC_OscConfig+0x78>
 8001960:	4bb0      	ldr	r3, [pc, #704]	; (8001c24 <HAL_RCC_OscConfig+0x32c>)
 8001962:	681a      	ldr	r2, [r3, #0]
 8001964:	4baf      	ldr	r3, [pc, #700]	; (8001c24 <HAL_RCC_OscConfig+0x32c>)
 8001966:	2180      	movs	r1, #128	; 0x80
 8001968:	0249      	lsls	r1, r1, #9
 800196a:	430a      	orrs	r2, r1
 800196c:	601a      	str	r2, [r3, #0]
 800196e:	e020      	b.n	80019b2 <HAL_RCC_OscConfig+0xba>
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	685a      	ldr	r2, [r3, #4]
 8001974:	23a0      	movs	r3, #160	; 0xa0
 8001976:	02db      	lsls	r3, r3, #11
 8001978:	429a      	cmp	r2, r3
 800197a:	d10e      	bne.n	800199a <HAL_RCC_OscConfig+0xa2>
 800197c:	4ba9      	ldr	r3, [pc, #676]	; (8001c24 <HAL_RCC_OscConfig+0x32c>)
 800197e:	681a      	ldr	r2, [r3, #0]
 8001980:	4ba8      	ldr	r3, [pc, #672]	; (8001c24 <HAL_RCC_OscConfig+0x32c>)
 8001982:	2180      	movs	r1, #128	; 0x80
 8001984:	02c9      	lsls	r1, r1, #11
 8001986:	430a      	orrs	r2, r1
 8001988:	601a      	str	r2, [r3, #0]
 800198a:	4ba6      	ldr	r3, [pc, #664]	; (8001c24 <HAL_RCC_OscConfig+0x32c>)
 800198c:	681a      	ldr	r2, [r3, #0]
 800198e:	4ba5      	ldr	r3, [pc, #660]	; (8001c24 <HAL_RCC_OscConfig+0x32c>)
 8001990:	2180      	movs	r1, #128	; 0x80
 8001992:	0249      	lsls	r1, r1, #9
 8001994:	430a      	orrs	r2, r1
 8001996:	601a      	str	r2, [r3, #0]
 8001998:	e00b      	b.n	80019b2 <HAL_RCC_OscConfig+0xba>
 800199a:	4ba2      	ldr	r3, [pc, #648]	; (8001c24 <HAL_RCC_OscConfig+0x32c>)
 800199c:	681a      	ldr	r2, [r3, #0]
 800199e:	4ba1      	ldr	r3, [pc, #644]	; (8001c24 <HAL_RCC_OscConfig+0x32c>)
 80019a0:	49a1      	ldr	r1, [pc, #644]	; (8001c28 <HAL_RCC_OscConfig+0x330>)
 80019a2:	400a      	ands	r2, r1
 80019a4:	601a      	str	r2, [r3, #0]
 80019a6:	4b9f      	ldr	r3, [pc, #636]	; (8001c24 <HAL_RCC_OscConfig+0x32c>)
 80019a8:	681a      	ldr	r2, [r3, #0]
 80019aa:	4b9e      	ldr	r3, [pc, #632]	; (8001c24 <HAL_RCC_OscConfig+0x32c>)
 80019ac:	499f      	ldr	r1, [pc, #636]	; (8001c2c <HAL_RCC_OscConfig+0x334>)
 80019ae:	400a      	ands	r2, r1
 80019b0:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d014      	beq.n	80019e4 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019ba:	f7ff f9ef 	bl	8000d9c <HAL_GetTick>
 80019be:	0003      	movs	r3, r0
 80019c0:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019c2:	e008      	b.n	80019d6 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019c4:	f7ff f9ea 	bl	8000d9c <HAL_GetTick>
 80019c8:	0002      	movs	r2, r0
 80019ca:	693b      	ldr	r3, [r7, #16]
 80019cc:	1ad3      	subs	r3, r2, r3
 80019ce:	2b64      	cmp	r3, #100	; 0x64
 80019d0:	d901      	bls.n	80019d6 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80019d2:	2303      	movs	r3, #3
 80019d4:	e28d      	b.n	8001ef2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019d6:	4b93      	ldr	r3, [pc, #588]	; (8001c24 <HAL_RCC_OscConfig+0x32c>)
 80019d8:	681a      	ldr	r2, [r3, #0]
 80019da:	2380      	movs	r3, #128	; 0x80
 80019dc:	029b      	lsls	r3, r3, #10
 80019de:	4013      	ands	r3, r2
 80019e0:	d0f0      	beq.n	80019c4 <HAL_RCC_OscConfig+0xcc>
 80019e2:	e015      	b.n	8001a10 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019e4:	f7ff f9da 	bl	8000d9c <HAL_GetTick>
 80019e8:	0003      	movs	r3, r0
 80019ea:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80019ec:	e008      	b.n	8001a00 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019ee:	f7ff f9d5 	bl	8000d9c <HAL_GetTick>
 80019f2:	0002      	movs	r2, r0
 80019f4:	693b      	ldr	r3, [r7, #16]
 80019f6:	1ad3      	subs	r3, r2, r3
 80019f8:	2b64      	cmp	r3, #100	; 0x64
 80019fa:	d901      	bls.n	8001a00 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80019fc:	2303      	movs	r3, #3
 80019fe:	e278      	b.n	8001ef2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a00:	4b88      	ldr	r3, [pc, #544]	; (8001c24 <HAL_RCC_OscConfig+0x32c>)
 8001a02:	681a      	ldr	r2, [r3, #0]
 8001a04:	2380      	movs	r3, #128	; 0x80
 8001a06:	029b      	lsls	r3, r3, #10
 8001a08:	4013      	ands	r3, r2
 8001a0a:	d1f0      	bne.n	80019ee <HAL_RCC_OscConfig+0xf6>
 8001a0c:	e000      	b.n	8001a10 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a0e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	2202      	movs	r2, #2
 8001a16:	4013      	ands	r3, r2
 8001a18:	d100      	bne.n	8001a1c <HAL_RCC_OscConfig+0x124>
 8001a1a:	e099      	b.n	8001b50 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a1c:	4b81      	ldr	r3, [pc, #516]	; (8001c24 <HAL_RCC_OscConfig+0x32c>)
 8001a1e:	689b      	ldr	r3, [r3, #8]
 8001a20:	2238      	movs	r2, #56	; 0x38
 8001a22:	4013      	ands	r3, r2
 8001a24:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a26:	4b7f      	ldr	r3, [pc, #508]	; (8001c24 <HAL_RCC_OscConfig+0x32c>)
 8001a28:	68db      	ldr	r3, [r3, #12]
 8001a2a:	2203      	movs	r2, #3
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001a30:	69bb      	ldr	r3, [r7, #24]
 8001a32:	2b10      	cmp	r3, #16
 8001a34:	d102      	bne.n	8001a3c <HAL_RCC_OscConfig+0x144>
 8001a36:	697b      	ldr	r3, [r7, #20]
 8001a38:	2b02      	cmp	r3, #2
 8001a3a:	d002      	beq.n	8001a42 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001a3c:	69bb      	ldr	r3, [r7, #24]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d135      	bne.n	8001aae <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a42:	4b78      	ldr	r3, [pc, #480]	; (8001c24 <HAL_RCC_OscConfig+0x32c>)
 8001a44:	681a      	ldr	r2, [r3, #0]
 8001a46:	2380      	movs	r3, #128	; 0x80
 8001a48:	00db      	lsls	r3, r3, #3
 8001a4a:	4013      	ands	r3, r2
 8001a4c:	d005      	beq.n	8001a5a <HAL_RCC_OscConfig+0x162>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	68db      	ldr	r3, [r3, #12]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d101      	bne.n	8001a5a <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8001a56:	2301      	movs	r3, #1
 8001a58:	e24b      	b.n	8001ef2 <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a5a:	4b72      	ldr	r3, [pc, #456]	; (8001c24 <HAL_RCC_OscConfig+0x32c>)
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	4a74      	ldr	r2, [pc, #464]	; (8001c30 <HAL_RCC_OscConfig+0x338>)
 8001a60:	4013      	ands	r3, r2
 8001a62:	0019      	movs	r1, r3
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	695b      	ldr	r3, [r3, #20]
 8001a68:	021a      	lsls	r2, r3, #8
 8001a6a:	4b6e      	ldr	r3, [pc, #440]	; (8001c24 <HAL_RCC_OscConfig+0x32c>)
 8001a6c:	430a      	orrs	r2, r1
 8001a6e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a70:	69bb      	ldr	r3, [r7, #24]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d112      	bne.n	8001a9c <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001a76:	4b6b      	ldr	r3, [pc, #428]	; (8001c24 <HAL_RCC_OscConfig+0x32c>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4a6e      	ldr	r2, [pc, #440]	; (8001c34 <HAL_RCC_OscConfig+0x33c>)
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	0019      	movs	r1, r3
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	691a      	ldr	r2, [r3, #16]
 8001a84:	4b67      	ldr	r3, [pc, #412]	; (8001c24 <HAL_RCC_OscConfig+0x32c>)
 8001a86:	430a      	orrs	r2, r1
 8001a88:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001a8a:	4b66      	ldr	r3, [pc, #408]	; (8001c24 <HAL_RCC_OscConfig+0x32c>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	0adb      	lsrs	r3, r3, #11
 8001a90:	2207      	movs	r2, #7
 8001a92:	4013      	ands	r3, r2
 8001a94:	4a68      	ldr	r2, [pc, #416]	; (8001c38 <HAL_RCC_OscConfig+0x340>)
 8001a96:	40da      	lsrs	r2, r3
 8001a98:	4b68      	ldr	r3, [pc, #416]	; (8001c3c <HAL_RCC_OscConfig+0x344>)
 8001a9a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001a9c:	4b68      	ldr	r3, [pc, #416]	; (8001c40 <HAL_RCC_OscConfig+0x348>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	0018      	movs	r0, r3
 8001aa2:	f7fe ff4b 	bl	800093c <HAL_InitTick>
 8001aa6:	1e03      	subs	r3, r0, #0
 8001aa8:	d051      	beq.n	8001b4e <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	e221      	b.n	8001ef2 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	68db      	ldr	r3, [r3, #12]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d030      	beq.n	8001b18 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001ab6:	4b5b      	ldr	r3, [pc, #364]	; (8001c24 <HAL_RCC_OscConfig+0x32c>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4a5e      	ldr	r2, [pc, #376]	; (8001c34 <HAL_RCC_OscConfig+0x33c>)
 8001abc:	4013      	ands	r3, r2
 8001abe:	0019      	movs	r1, r3
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	691a      	ldr	r2, [r3, #16]
 8001ac4:	4b57      	ldr	r3, [pc, #348]	; (8001c24 <HAL_RCC_OscConfig+0x32c>)
 8001ac6:	430a      	orrs	r2, r1
 8001ac8:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001aca:	4b56      	ldr	r3, [pc, #344]	; (8001c24 <HAL_RCC_OscConfig+0x32c>)
 8001acc:	681a      	ldr	r2, [r3, #0]
 8001ace:	4b55      	ldr	r3, [pc, #340]	; (8001c24 <HAL_RCC_OscConfig+0x32c>)
 8001ad0:	2180      	movs	r1, #128	; 0x80
 8001ad2:	0049      	lsls	r1, r1, #1
 8001ad4:	430a      	orrs	r2, r1
 8001ad6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ad8:	f7ff f960 	bl	8000d9c <HAL_GetTick>
 8001adc:	0003      	movs	r3, r0
 8001ade:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ae0:	e008      	b.n	8001af4 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ae2:	f7ff f95b 	bl	8000d9c <HAL_GetTick>
 8001ae6:	0002      	movs	r2, r0
 8001ae8:	693b      	ldr	r3, [r7, #16]
 8001aea:	1ad3      	subs	r3, r2, r3
 8001aec:	2b02      	cmp	r3, #2
 8001aee:	d901      	bls.n	8001af4 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001af0:	2303      	movs	r3, #3
 8001af2:	e1fe      	b.n	8001ef2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001af4:	4b4b      	ldr	r3, [pc, #300]	; (8001c24 <HAL_RCC_OscConfig+0x32c>)
 8001af6:	681a      	ldr	r2, [r3, #0]
 8001af8:	2380      	movs	r3, #128	; 0x80
 8001afa:	00db      	lsls	r3, r3, #3
 8001afc:	4013      	ands	r3, r2
 8001afe:	d0f0      	beq.n	8001ae2 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b00:	4b48      	ldr	r3, [pc, #288]	; (8001c24 <HAL_RCC_OscConfig+0x32c>)
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	4a4a      	ldr	r2, [pc, #296]	; (8001c30 <HAL_RCC_OscConfig+0x338>)
 8001b06:	4013      	ands	r3, r2
 8001b08:	0019      	movs	r1, r3
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	695b      	ldr	r3, [r3, #20]
 8001b0e:	021a      	lsls	r2, r3, #8
 8001b10:	4b44      	ldr	r3, [pc, #272]	; (8001c24 <HAL_RCC_OscConfig+0x32c>)
 8001b12:	430a      	orrs	r2, r1
 8001b14:	605a      	str	r2, [r3, #4]
 8001b16:	e01b      	b.n	8001b50 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001b18:	4b42      	ldr	r3, [pc, #264]	; (8001c24 <HAL_RCC_OscConfig+0x32c>)
 8001b1a:	681a      	ldr	r2, [r3, #0]
 8001b1c:	4b41      	ldr	r3, [pc, #260]	; (8001c24 <HAL_RCC_OscConfig+0x32c>)
 8001b1e:	4949      	ldr	r1, [pc, #292]	; (8001c44 <HAL_RCC_OscConfig+0x34c>)
 8001b20:	400a      	ands	r2, r1
 8001b22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b24:	f7ff f93a 	bl	8000d9c <HAL_GetTick>
 8001b28:	0003      	movs	r3, r0
 8001b2a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b2c:	e008      	b.n	8001b40 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b2e:	f7ff f935 	bl	8000d9c <HAL_GetTick>
 8001b32:	0002      	movs	r2, r0
 8001b34:	693b      	ldr	r3, [r7, #16]
 8001b36:	1ad3      	subs	r3, r2, r3
 8001b38:	2b02      	cmp	r3, #2
 8001b3a:	d901      	bls.n	8001b40 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001b3c:	2303      	movs	r3, #3
 8001b3e:	e1d8      	b.n	8001ef2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b40:	4b38      	ldr	r3, [pc, #224]	; (8001c24 <HAL_RCC_OscConfig+0x32c>)
 8001b42:	681a      	ldr	r2, [r3, #0]
 8001b44:	2380      	movs	r3, #128	; 0x80
 8001b46:	00db      	lsls	r3, r3, #3
 8001b48:	4013      	ands	r3, r2
 8001b4a:	d1f0      	bne.n	8001b2e <HAL_RCC_OscConfig+0x236>
 8001b4c:	e000      	b.n	8001b50 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b4e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	2208      	movs	r2, #8
 8001b56:	4013      	ands	r3, r2
 8001b58:	d047      	beq.n	8001bea <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001b5a:	4b32      	ldr	r3, [pc, #200]	; (8001c24 <HAL_RCC_OscConfig+0x32c>)
 8001b5c:	689b      	ldr	r3, [r3, #8]
 8001b5e:	2238      	movs	r2, #56	; 0x38
 8001b60:	4013      	ands	r3, r2
 8001b62:	2b18      	cmp	r3, #24
 8001b64:	d10a      	bne.n	8001b7c <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001b66:	4b2f      	ldr	r3, [pc, #188]	; (8001c24 <HAL_RCC_OscConfig+0x32c>)
 8001b68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b6a:	2202      	movs	r2, #2
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	d03c      	beq.n	8001bea <HAL_RCC_OscConfig+0x2f2>
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	699b      	ldr	r3, [r3, #24]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d138      	bne.n	8001bea <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	e1ba      	b.n	8001ef2 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	699b      	ldr	r3, [r3, #24]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d019      	beq.n	8001bb8 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001b84:	4b27      	ldr	r3, [pc, #156]	; (8001c24 <HAL_RCC_OscConfig+0x32c>)
 8001b86:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001b88:	4b26      	ldr	r3, [pc, #152]	; (8001c24 <HAL_RCC_OscConfig+0x32c>)
 8001b8a:	2101      	movs	r1, #1
 8001b8c:	430a      	orrs	r2, r1
 8001b8e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b90:	f7ff f904 	bl	8000d9c <HAL_GetTick>
 8001b94:	0003      	movs	r3, r0
 8001b96:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b98:	e008      	b.n	8001bac <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b9a:	f7ff f8ff 	bl	8000d9c <HAL_GetTick>
 8001b9e:	0002      	movs	r2, r0
 8001ba0:	693b      	ldr	r3, [r7, #16]
 8001ba2:	1ad3      	subs	r3, r2, r3
 8001ba4:	2b02      	cmp	r3, #2
 8001ba6:	d901      	bls.n	8001bac <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001ba8:	2303      	movs	r3, #3
 8001baa:	e1a2      	b.n	8001ef2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001bac:	4b1d      	ldr	r3, [pc, #116]	; (8001c24 <HAL_RCC_OscConfig+0x32c>)
 8001bae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bb0:	2202      	movs	r2, #2
 8001bb2:	4013      	ands	r3, r2
 8001bb4:	d0f1      	beq.n	8001b9a <HAL_RCC_OscConfig+0x2a2>
 8001bb6:	e018      	b.n	8001bea <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001bb8:	4b1a      	ldr	r3, [pc, #104]	; (8001c24 <HAL_RCC_OscConfig+0x32c>)
 8001bba:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001bbc:	4b19      	ldr	r3, [pc, #100]	; (8001c24 <HAL_RCC_OscConfig+0x32c>)
 8001bbe:	2101      	movs	r1, #1
 8001bc0:	438a      	bics	r2, r1
 8001bc2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bc4:	f7ff f8ea 	bl	8000d9c <HAL_GetTick>
 8001bc8:	0003      	movs	r3, r0
 8001bca:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001bcc:	e008      	b.n	8001be0 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bce:	f7ff f8e5 	bl	8000d9c <HAL_GetTick>
 8001bd2:	0002      	movs	r2, r0
 8001bd4:	693b      	ldr	r3, [r7, #16]
 8001bd6:	1ad3      	subs	r3, r2, r3
 8001bd8:	2b02      	cmp	r3, #2
 8001bda:	d901      	bls.n	8001be0 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001bdc:	2303      	movs	r3, #3
 8001bde:	e188      	b.n	8001ef2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001be0:	4b10      	ldr	r3, [pc, #64]	; (8001c24 <HAL_RCC_OscConfig+0x32c>)
 8001be2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001be4:	2202      	movs	r2, #2
 8001be6:	4013      	ands	r3, r2
 8001be8:	d1f1      	bne.n	8001bce <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	2204      	movs	r2, #4
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	d100      	bne.n	8001bf6 <HAL_RCC_OscConfig+0x2fe>
 8001bf4:	e0c6      	b.n	8001d84 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001bf6:	231f      	movs	r3, #31
 8001bf8:	18fb      	adds	r3, r7, r3
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001bfe:	4b09      	ldr	r3, [pc, #36]	; (8001c24 <HAL_RCC_OscConfig+0x32c>)
 8001c00:	689b      	ldr	r3, [r3, #8]
 8001c02:	2238      	movs	r2, #56	; 0x38
 8001c04:	4013      	ands	r3, r2
 8001c06:	2b20      	cmp	r3, #32
 8001c08:	d11e      	bne.n	8001c48 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001c0a:	4b06      	ldr	r3, [pc, #24]	; (8001c24 <HAL_RCC_OscConfig+0x32c>)
 8001c0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c0e:	2202      	movs	r2, #2
 8001c10:	4013      	ands	r3, r2
 8001c12:	d100      	bne.n	8001c16 <HAL_RCC_OscConfig+0x31e>
 8001c14:	e0b6      	b.n	8001d84 <HAL_RCC_OscConfig+0x48c>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	689b      	ldr	r3, [r3, #8]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d000      	beq.n	8001c20 <HAL_RCC_OscConfig+0x328>
 8001c1e:	e0b1      	b.n	8001d84 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001c20:	2301      	movs	r3, #1
 8001c22:	e166      	b.n	8001ef2 <HAL_RCC_OscConfig+0x5fa>
 8001c24:	40021000 	.word	0x40021000
 8001c28:	fffeffff 	.word	0xfffeffff
 8001c2c:	fffbffff 	.word	0xfffbffff
 8001c30:	ffff80ff 	.word	0xffff80ff
 8001c34:	ffffc7ff 	.word	0xffffc7ff
 8001c38:	00f42400 	.word	0x00f42400
 8001c3c:	20000000 	.word	0x20000000
 8001c40:	20000004 	.word	0x20000004
 8001c44:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001c48:	4bac      	ldr	r3, [pc, #688]	; (8001efc <HAL_RCC_OscConfig+0x604>)
 8001c4a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001c4c:	2380      	movs	r3, #128	; 0x80
 8001c4e:	055b      	lsls	r3, r3, #21
 8001c50:	4013      	ands	r3, r2
 8001c52:	d101      	bne.n	8001c58 <HAL_RCC_OscConfig+0x360>
 8001c54:	2301      	movs	r3, #1
 8001c56:	e000      	b.n	8001c5a <HAL_RCC_OscConfig+0x362>
 8001c58:	2300      	movs	r3, #0
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d011      	beq.n	8001c82 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001c5e:	4ba7      	ldr	r3, [pc, #668]	; (8001efc <HAL_RCC_OscConfig+0x604>)
 8001c60:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001c62:	4ba6      	ldr	r3, [pc, #664]	; (8001efc <HAL_RCC_OscConfig+0x604>)
 8001c64:	2180      	movs	r1, #128	; 0x80
 8001c66:	0549      	lsls	r1, r1, #21
 8001c68:	430a      	orrs	r2, r1
 8001c6a:	63da      	str	r2, [r3, #60]	; 0x3c
 8001c6c:	4ba3      	ldr	r3, [pc, #652]	; (8001efc <HAL_RCC_OscConfig+0x604>)
 8001c6e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001c70:	2380      	movs	r3, #128	; 0x80
 8001c72:	055b      	lsls	r3, r3, #21
 8001c74:	4013      	ands	r3, r2
 8001c76:	60fb      	str	r3, [r7, #12]
 8001c78:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8001c7a:	231f      	movs	r3, #31
 8001c7c:	18fb      	adds	r3, r7, r3
 8001c7e:	2201      	movs	r2, #1
 8001c80:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c82:	4b9f      	ldr	r3, [pc, #636]	; (8001f00 <HAL_RCC_OscConfig+0x608>)
 8001c84:	681a      	ldr	r2, [r3, #0]
 8001c86:	2380      	movs	r3, #128	; 0x80
 8001c88:	005b      	lsls	r3, r3, #1
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	d11a      	bne.n	8001cc4 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001c8e:	4b9c      	ldr	r3, [pc, #624]	; (8001f00 <HAL_RCC_OscConfig+0x608>)
 8001c90:	681a      	ldr	r2, [r3, #0]
 8001c92:	4b9b      	ldr	r3, [pc, #620]	; (8001f00 <HAL_RCC_OscConfig+0x608>)
 8001c94:	2180      	movs	r1, #128	; 0x80
 8001c96:	0049      	lsls	r1, r1, #1
 8001c98:	430a      	orrs	r2, r1
 8001c9a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001c9c:	f7ff f87e 	bl	8000d9c <HAL_GetTick>
 8001ca0:	0003      	movs	r3, r0
 8001ca2:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ca4:	e008      	b.n	8001cb8 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ca6:	f7ff f879 	bl	8000d9c <HAL_GetTick>
 8001caa:	0002      	movs	r2, r0
 8001cac:	693b      	ldr	r3, [r7, #16]
 8001cae:	1ad3      	subs	r3, r2, r3
 8001cb0:	2b02      	cmp	r3, #2
 8001cb2:	d901      	bls.n	8001cb8 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8001cb4:	2303      	movs	r3, #3
 8001cb6:	e11c      	b.n	8001ef2 <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001cb8:	4b91      	ldr	r3, [pc, #580]	; (8001f00 <HAL_RCC_OscConfig+0x608>)
 8001cba:	681a      	ldr	r2, [r3, #0]
 8001cbc:	2380      	movs	r3, #128	; 0x80
 8001cbe:	005b      	lsls	r3, r3, #1
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	d0f0      	beq.n	8001ca6 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	2b01      	cmp	r3, #1
 8001cca:	d106      	bne.n	8001cda <HAL_RCC_OscConfig+0x3e2>
 8001ccc:	4b8b      	ldr	r3, [pc, #556]	; (8001efc <HAL_RCC_OscConfig+0x604>)
 8001cce:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001cd0:	4b8a      	ldr	r3, [pc, #552]	; (8001efc <HAL_RCC_OscConfig+0x604>)
 8001cd2:	2101      	movs	r1, #1
 8001cd4:	430a      	orrs	r2, r1
 8001cd6:	65da      	str	r2, [r3, #92]	; 0x5c
 8001cd8:	e01c      	b.n	8001d14 <HAL_RCC_OscConfig+0x41c>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	689b      	ldr	r3, [r3, #8]
 8001cde:	2b05      	cmp	r3, #5
 8001ce0:	d10c      	bne.n	8001cfc <HAL_RCC_OscConfig+0x404>
 8001ce2:	4b86      	ldr	r3, [pc, #536]	; (8001efc <HAL_RCC_OscConfig+0x604>)
 8001ce4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001ce6:	4b85      	ldr	r3, [pc, #532]	; (8001efc <HAL_RCC_OscConfig+0x604>)
 8001ce8:	2104      	movs	r1, #4
 8001cea:	430a      	orrs	r2, r1
 8001cec:	65da      	str	r2, [r3, #92]	; 0x5c
 8001cee:	4b83      	ldr	r3, [pc, #524]	; (8001efc <HAL_RCC_OscConfig+0x604>)
 8001cf0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001cf2:	4b82      	ldr	r3, [pc, #520]	; (8001efc <HAL_RCC_OscConfig+0x604>)
 8001cf4:	2101      	movs	r1, #1
 8001cf6:	430a      	orrs	r2, r1
 8001cf8:	65da      	str	r2, [r3, #92]	; 0x5c
 8001cfa:	e00b      	b.n	8001d14 <HAL_RCC_OscConfig+0x41c>
 8001cfc:	4b7f      	ldr	r3, [pc, #508]	; (8001efc <HAL_RCC_OscConfig+0x604>)
 8001cfe:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001d00:	4b7e      	ldr	r3, [pc, #504]	; (8001efc <HAL_RCC_OscConfig+0x604>)
 8001d02:	2101      	movs	r1, #1
 8001d04:	438a      	bics	r2, r1
 8001d06:	65da      	str	r2, [r3, #92]	; 0x5c
 8001d08:	4b7c      	ldr	r3, [pc, #496]	; (8001efc <HAL_RCC_OscConfig+0x604>)
 8001d0a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001d0c:	4b7b      	ldr	r3, [pc, #492]	; (8001efc <HAL_RCC_OscConfig+0x604>)
 8001d0e:	2104      	movs	r1, #4
 8001d10:	438a      	bics	r2, r1
 8001d12:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	689b      	ldr	r3, [r3, #8]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d014      	beq.n	8001d46 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d1c:	f7ff f83e 	bl	8000d9c <HAL_GetTick>
 8001d20:	0003      	movs	r3, r0
 8001d22:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d24:	e009      	b.n	8001d3a <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d26:	f7ff f839 	bl	8000d9c <HAL_GetTick>
 8001d2a:	0002      	movs	r2, r0
 8001d2c:	693b      	ldr	r3, [r7, #16]
 8001d2e:	1ad3      	subs	r3, r2, r3
 8001d30:	4a74      	ldr	r2, [pc, #464]	; (8001f04 <HAL_RCC_OscConfig+0x60c>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d901      	bls.n	8001d3a <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8001d36:	2303      	movs	r3, #3
 8001d38:	e0db      	b.n	8001ef2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d3a:	4b70      	ldr	r3, [pc, #448]	; (8001efc <HAL_RCC_OscConfig+0x604>)
 8001d3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d3e:	2202      	movs	r2, #2
 8001d40:	4013      	ands	r3, r2
 8001d42:	d0f0      	beq.n	8001d26 <HAL_RCC_OscConfig+0x42e>
 8001d44:	e013      	b.n	8001d6e <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d46:	f7ff f829 	bl	8000d9c <HAL_GetTick>
 8001d4a:	0003      	movs	r3, r0
 8001d4c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d4e:	e009      	b.n	8001d64 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d50:	f7ff f824 	bl	8000d9c <HAL_GetTick>
 8001d54:	0002      	movs	r2, r0
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	1ad3      	subs	r3, r2, r3
 8001d5a:	4a6a      	ldr	r2, [pc, #424]	; (8001f04 <HAL_RCC_OscConfig+0x60c>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d901      	bls.n	8001d64 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001d60:	2303      	movs	r3, #3
 8001d62:	e0c6      	b.n	8001ef2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d64:	4b65      	ldr	r3, [pc, #404]	; (8001efc <HAL_RCC_OscConfig+0x604>)
 8001d66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d68:	2202      	movs	r2, #2
 8001d6a:	4013      	ands	r3, r2
 8001d6c:	d1f0      	bne.n	8001d50 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001d6e:	231f      	movs	r3, #31
 8001d70:	18fb      	adds	r3, r7, r3
 8001d72:	781b      	ldrb	r3, [r3, #0]
 8001d74:	2b01      	cmp	r3, #1
 8001d76:	d105      	bne.n	8001d84 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001d78:	4b60      	ldr	r3, [pc, #384]	; (8001efc <HAL_RCC_OscConfig+0x604>)
 8001d7a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001d7c:	4b5f      	ldr	r3, [pc, #380]	; (8001efc <HAL_RCC_OscConfig+0x604>)
 8001d7e:	4962      	ldr	r1, [pc, #392]	; (8001f08 <HAL_RCC_OscConfig+0x610>)
 8001d80:	400a      	ands	r2, r1
 8001d82:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	69db      	ldr	r3, [r3, #28]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d100      	bne.n	8001d8e <HAL_RCC_OscConfig+0x496>
 8001d8c:	e0b0      	b.n	8001ef0 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d8e:	4b5b      	ldr	r3, [pc, #364]	; (8001efc <HAL_RCC_OscConfig+0x604>)
 8001d90:	689b      	ldr	r3, [r3, #8]
 8001d92:	2238      	movs	r2, #56	; 0x38
 8001d94:	4013      	ands	r3, r2
 8001d96:	2b10      	cmp	r3, #16
 8001d98:	d100      	bne.n	8001d9c <HAL_RCC_OscConfig+0x4a4>
 8001d9a:	e078      	b.n	8001e8e <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	69db      	ldr	r3, [r3, #28]
 8001da0:	2b02      	cmp	r3, #2
 8001da2:	d153      	bne.n	8001e4c <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001da4:	4b55      	ldr	r3, [pc, #340]	; (8001efc <HAL_RCC_OscConfig+0x604>)
 8001da6:	681a      	ldr	r2, [r3, #0]
 8001da8:	4b54      	ldr	r3, [pc, #336]	; (8001efc <HAL_RCC_OscConfig+0x604>)
 8001daa:	4958      	ldr	r1, [pc, #352]	; (8001f0c <HAL_RCC_OscConfig+0x614>)
 8001dac:	400a      	ands	r2, r1
 8001dae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001db0:	f7fe fff4 	bl	8000d9c <HAL_GetTick>
 8001db4:	0003      	movs	r3, r0
 8001db6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001db8:	e008      	b.n	8001dcc <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dba:	f7fe ffef 	bl	8000d9c <HAL_GetTick>
 8001dbe:	0002      	movs	r2, r0
 8001dc0:	693b      	ldr	r3, [r7, #16]
 8001dc2:	1ad3      	subs	r3, r2, r3
 8001dc4:	2b02      	cmp	r3, #2
 8001dc6:	d901      	bls.n	8001dcc <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001dc8:	2303      	movs	r3, #3
 8001dca:	e092      	b.n	8001ef2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001dcc:	4b4b      	ldr	r3, [pc, #300]	; (8001efc <HAL_RCC_OscConfig+0x604>)
 8001dce:	681a      	ldr	r2, [r3, #0]
 8001dd0:	2380      	movs	r3, #128	; 0x80
 8001dd2:	049b      	lsls	r3, r3, #18
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	d1f0      	bne.n	8001dba <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001dd8:	4b48      	ldr	r3, [pc, #288]	; (8001efc <HAL_RCC_OscConfig+0x604>)
 8001dda:	68db      	ldr	r3, [r3, #12]
 8001ddc:	4a4c      	ldr	r2, [pc, #304]	; (8001f10 <HAL_RCC_OscConfig+0x618>)
 8001dde:	4013      	ands	r3, r2
 8001de0:	0019      	movs	r1, r3
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6a1a      	ldr	r2, [r3, #32]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dea:	431a      	orrs	r2, r3
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001df0:	021b      	lsls	r3, r3, #8
 8001df2:	431a      	orrs	r2, r3
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001df8:	431a      	orrs	r2, r3
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dfe:	431a      	orrs	r2, r3
 8001e00:	4b3e      	ldr	r3, [pc, #248]	; (8001efc <HAL_RCC_OscConfig+0x604>)
 8001e02:	430a      	orrs	r2, r1
 8001e04:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e06:	4b3d      	ldr	r3, [pc, #244]	; (8001efc <HAL_RCC_OscConfig+0x604>)
 8001e08:	681a      	ldr	r2, [r3, #0]
 8001e0a:	4b3c      	ldr	r3, [pc, #240]	; (8001efc <HAL_RCC_OscConfig+0x604>)
 8001e0c:	2180      	movs	r1, #128	; 0x80
 8001e0e:	0449      	lsls	r1, r1, #17
 8001e10:	430a      	orrs	r2, r1
 8001e12:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001e14:	4b39      	ldr	r3, [pc, #228]	; (8001efc <HAL_RCC_OscConfig+0x604>)
 8001e16:	68da      	ldr	r2, [r3, #12]
 8001e18:	4b38      	ldr	r3, [pc, #224]	; (8001efc <HAL_RCC_OscConfig+0x604>)
 8001e1a:	2180      	movs	r1, #128	; 0x80
 8001e1c:	0549      	lsls	r1, r1, #21
 8001e1e:	430a      	orrs	r2, r1
 8001e20:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e22:	f7fe ffbb 	bl	8000d9c <HAL_GetTick>
 8001e26:	0003      	movs	r3, r0
 8001e28:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e2a:	e008      	b.n	8001e3e <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e2c:	f7fe ffb6 	bl	8000d9c <HAL_GetTick>
 8001e30:	0002      	movs	r2, r0
 8001e32:	693b      	ldr	r3, [r7, #16]
 8001e34:	1ad3      	subs	r3, r2, r3
 8001e36:	2b02      	cmp	r3, #2
 8001e38:	d901      	bls.n	8001e3e <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8001e3a:	2303      	movs	r3, #3
 8001e3c:	e059      	b.n	8001ef2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e3e:	4b2f      	ldr	r3, [pc, #188]	; (8001efc <HAL_RCC_OscConfig+0x604>)
 8001e40:	681a      	ldr	r2, [r3, #0]
 8001e42:	2380      	movs	r3, #128	; 0x80
 8001e44:	049b      	lsls	r3, r3, #18
 8001e46:	4013      	ands	r3, r2
 8001e48:	d0f0      	beq.n	8001e2c <HAL_RCC_OscConfig+0x534>
 8001e4a:	e051      	b.n	8001ef0 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e4c:	4b2b      	ldr	r3, [pc, #172]	; (8001efc <HAL_RCC_OscConfig+0x604>)
 8001e4e:	681a      	ldr	r2, [r3, #0]
 8001e50:	4b2a      	ldr	r3, [pc, #168]	; (8001efc <HAL_RCC_OscConfig+0x604>)
 8001e52:	492e      	ldr	r1, [pc, #184]	; (8001f0c <HAL_RCC_OscConfig+0x614>)
 8001e54:	400a      	ands	r2, r1
 8001e56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e58:	f7fe ffa0 	bl	8000d9c <HAL_GetTick>
 8001e5c:	0003      	movs	r3, r0
 8001e5e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e60:	e008      	b.n	8001e74 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e62:	f7fe ff9b 	bl	8000d9c <HAL_GetTick>
 8001e66:	0002      	movs	r2, r0
 8001e68:	693b      	ldr	r3, [r7, #16]
 8001e6a:	1ad3      	subs	r3, r2, r3
 8001e6c:	2b02      	cmp	r3, #2
 8001e6e:	d901      	bls.n	8001e74 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8001e70:	2303      	movs	r3, #3
 8001e72:	e03e      	b.n	8001ef2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e74:	4b21      	ldr	r3, [pc, #132]	; (8001efc <HAL_RCC_OscConfig+0x604>)
 8001e76:	681a      	ldr	r2, [r3, #0]
 8001e78:	2380      	movs	r3, #128	; 0x80
 8001e7a:	049b      	lsls	r3, r3, #18
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	d1f0      	bne.n	8001e62 <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8001e80:	4b1e      	ldr	r3, [pc, #120]	; (8001efc <HAL_RCC_OscConfig+0x604>)
 8001e82:	68da      	ldr	r2, [r3, #12]
 8001e84:	4b1d      	ldr	r3, [pc, #116]	; (8001efc <HAL_RCC_OscConfig+0x604>)
 8001e86:	4923      	ldr	r1, [pc, #140]	; (8001f14 <HAL_RCC_OscConfig+0x61c>)
 8001e88:	400a      	ands	r2, r1
 8001e8a:	60da      	str	r2, [r3, #12]
 8001e8c:	e030      	b.n	8001ef0 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	69db      	ldr	r3, [r3, #28]
 8001e92:	2b01      	cmp	r3, #1
 8001e94:	d101      	bne.n	8001e9a <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8001e96:	2301      	movs	r3, #1
 8001e98:	e02b      	b.n	8001ef2 <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001e9a:	4b18      	ldr	r3, [pc, #96]	; (8001efc <HAL_RCC_OscConfig+0x604>)
 8001e9c:	68db      	ldr	r3, [r3, #12]
 8001e9e:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	2203      	movs	r2, #3
 8001ea4:	401a      	ands	r2, r3
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6a1b      	ldr	r3, [r3, #32]
 8001eaa:	429a      	cmp	r2, r3
 8001eac:	d11e      	bne.n	8001eec <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001eae:	697b      	ldr	r3, [r7, #20]
 8001eb0:	2270      	movs	r2, #112	; 0x70
 8001eb2:	401a      	ands	r2, r3
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001eb8:	429a      	cmp	r2, r3
 8001eba:	d117      	bne.n	8001eec <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ebc:	697a      	ldr	r2, [r7, #20]
 8001ebe:	23fe      	movs	r3, #254	; 0xfe
 8001ec0:	01db      	lsls	r3, r3, #7
 8001ec2:	401a      	ands	r2, r3
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ec8:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001eca:	429a      	cmp	r2, r3
 8001ecc:	d10e      	bne.n	8001eec <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001ece:	697a      	ldr	r2, [r7, #20]
 8001ed0:	23f8      	movs	r3, #248	; 0xf8
 8001ed2:	039b      	lsls	r3, r3, #14
 8001ed4:	401a      	ands	r2, r3
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001eda:	429a      	cmp	r2, r3
 8001edc:	d106      	bne.n	8001eec <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001ede:	697b      	ldr	r3, [r7, #20]
 8001ee0:	0f5b      	lsrs	r3, r3, #29
 8001ee2:	075a      	lsls	r2, r3, #29
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001ee8:	429a      	cmp	r2, r3
 8001eea:	d001      	beq.n	8001ef0 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8001eec:	2301      	movs	r3, #1
 8001eee:	e000      	b.n	8001ef2 <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8001ef0:	2300      	movs	r3, #0
}
 8001ef2:	0018      	movs	r0, r3
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	b008      	add	sp, #32
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	46c0      	nop			; (mov r8, r8)
 8001efc:	40021000 	.word	0x40021000
 8001f00:	40007000 	.word	0x40007000
 8001f04:	00001388 	.word	0x00001388
 8001f08:	efffffff 	.word	0xefffffff
 8001f0c:	feffffff 	.word	0xfeffffff
 8001f10:	1fc1808c 	.word	0x1fc1808c
 8001f14:	effefffc 	.word	0xeffefffc

08001f18 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b084      	sub	sp, #16
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
 8001f20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d101      	bne.n	8001f2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	e0e9      	b.n	8002100 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f2c:	4b76      	ldr	r3, [pc, #472]	; (8002108 <HAL_RCC_ClockConfig+0x1f0>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	2207      	movs	r2, #7
 8001f32:	4013      	ands	r3, r2
 8001f34:	683a      	ldr	r2, [r7, #0]
 8001f36:	429a      	cmp	r2, r3
 8001f38:	d91e      	bls.n	8001f78 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f3a:	4b73      	ldr	r3, [pc, #460]	; (8002108 <HAL_RCC_ClockConfig+0x1f0>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	2207      	movs	r2, #7
 8001f40:	4393      	bics	r3, r2
 8001f42:	0019      	movs	r1, r3
 8001f44:	4b70      	ldr	r3, [pc, #448]	; (8002108 <HAL_RCC_ClockConfig+0x1f0>)
 8001f46:	683a      	ldr	r2, [r7, #0]
 8001f48:	430a      	orrs	r2, r1
 8001f4a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001f4c:	f7fe ff26 	bl	8000d9c <HAL_GetTick>
 8001f50:	0003      	movs	r3, r0
 8001f52:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001f54:	e009      	b.n	8001f6a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f56:	f7fe ff21 	bl	8000d9c <HAL_GetTick>
 8001f5a:	0002      	movs	r2, r0
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	1ad3      	subs	r3, r2, r3
 8001f60:	4a6a      	ldr	r2, [pc, #424]	; (800210c <HAL_RCC_ClockConfig+0x1f4>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d901      	bls.n	8001f6a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001f66:	2303      	movs	r3, #3
 8001f68:	e0ca      	b.n	8002100 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001f6a:	4b67      	ldr	r3, [pc, #412]	; (8002108 <HAL_RCC_ClockConfig+0x1f0>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	2207      	movs	r2, #7
 8001f70:	4013      	ands	r3, r2
 8001f72:	683a      	ldr	r2, [r7, #0]
 8001f74:	429a      	cmp	r2, r3
 8001f76:	d1ee      	bne.n	8001f56 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	2202      	movs	r2, #2
 8001f7e:	4013      	ands	r3, r2
 8001f80:	d015      	beq.n	8001fae <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	2204      	movs	r2, #4
 8001f88:	4013      	ands	r3, r2
 8001f8a:	d006      	beq.n	8001f9a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001f8c:	4b60      	ldr	r3, [pc, #384]	; (8002110 <HAL_RCC_ClockConfig+0x1f8>)
 8001f8e:	689a      	ldr	r2, [r3, #8]
 8001f90:	4b5f      	ldr	r3, [pc, #380]	; (8002110 <HAL_RCC_ClockConfig+0x1f8>)
 8001f92:	21e0      	movs	r1, #224	; 0xe0
 8001f94:	01c9      	lsls	r1, r1, #7
 8001f96:	430a      	orrs	r2, r1
 8001f98:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f9a:	4b5d      	ldr	r3, [pc, #372]	; (8002110 <HAL_RCC_ClockConfig+0x1f8>)
 8001f9c:	689b      	ldr	r3, [r3, #8]
 8001f9e:	4a5d      	ldr	r2, [pc, #372]	; (8002114 <HAL_RCC_ClockConfig+0x1fc>)
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	0019      	movs	r1, r3
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	689a      	ldr	r2, [r3, #8]
 8001fa8:	4b59      	ldr	r3, [pc, #356]	; (8002110 <HAL_RCC_ClockConfig+0x1f8>)
 8001faa:	430a      	orrs	r2, r1
 8001fac:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	2201      	movs	r2, #1
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	d057      	beq.n	8002068 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	2b01      	cmp	r3, #1
 8001fbe:	d107      	bne.n	8001fd0 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001fc0:	4b53      	ldr	r3, [pc, #332]	; (8002110 <HAL_RCC_ClockConfig+0x1f8>)
 8001fc2:	681a      	ldr	r2, [r3, #0]
 8001fc4:	2380      	movs	r3, #128	; 0x80
 8001fc6:	029b      	lsls	r3, r3, #10
 8001fc8:	4013      	ands	r3, r2
 8001fca:	d12b      	bne.n	8002024 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001fcc:	2301      	movs	r3, #1
 8001fce:	e097      	b.n	8002100 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	2b02      	cmp	r3, #2
 8001fd6:	d107      	bne.n	8001fe8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fd8:	4b4d      	ldr	r3, [pc, #308]	; (8002110 <HAL_RCC_ClockConfig+0x1f8>)
 8001fda:	681a      	ldr	r2, [r3, #0]
 8001fdc:	2380      	movs	r3, #128	; 0x80
 8001fde:	049b      	lsls	r3, r3, #18
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	d11f      	bne.n	8002024 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	e08b      	b.n	8002100 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d107      	bne.n	8002000 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ff0:	4b47      	ldr	r3, [pc, #284]	; (8002110 <HAL_RCC_ClockConfig+0x1f8>)
 8001ff2:	681a      	ldr	r2, [r3, #0]
 8001ff4:	2380      	movs	r3, #128	; 0x80
 8001ff6:	00db      	lsls	r3, r3, #3
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	d113      	bne.n	8002024 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	e07f      	b.n	8002100 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	2b03      	cmp	r3, #3
 8002006:	d106      	bne.n	8002016 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002008:	4b41      	ldr	r3, [pc, #260]	; (8002110 <HAL_RCC_ClockConfig+0x1f8>)
 800200a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800200c:	2202      	movs	r2, #2
 800200e:	4013      	ands	r3, r2
 8002010:	d108      	bne.n	8002024 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002012:	2301      	movs	r3, #1
 8002014:	e074      	b.n	8002100 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002016:	4b3e      	ldr	r3, [pc, #248]	; (8002110 <HAL_RCC_ClockConfig+0x1f8>)
 8002018:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800201a:	2202      	movs	r2, #2
 800201c:	4013      	ands	r3, r2
 800201e:	d101      	bne.n	8002024 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002020:	2301      	movs	r3, #1
 8002022:	e06d      	b.n	8002100 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002024:	4b3a      	ldr	r3, [pc, #232]	; (8002110 <HAL_RCC_ClockConfig+0x1f8>)
 8002026:	689b      	ldr	r3, [r3, #8]
 8002028:	2207      	movs	r2, #7
 800202a:	4393      	bics	r3, r2
 800202c:	0019      	movs	r1, r3
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	685a      	ldr	r2, [r3, #4]
 8002032:	4b37      	ldr	r3, [pc, #220]	; (8002110 <HAL_RCC_ClockConfig+0x1f8>)
 8002034:	430a      	orrs	r2, r1
 8002036:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002038:	f7fe feb0 	bl	8000d9c <HAL_GetTick>
 800203c:	0003      	movs	r3, r0
 800203e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002040:	e009      	b.n	8002056 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002042:	f7fe feab 	bl	8000d9c <HAL_GetTick>
 8002046:	0002      	movs	r2, r0
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	1ad3      	subs	r3, r2, r3
 800204c:	4a2f      	ldr	r2, [pc, #188]	; (800210c <HAL_RCC_ClockConfig+0x1f4>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d901      	bls.n	8002056 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8002052:	2303      	movs	r3, #3
 8002054:	e054      	b.n	8002100 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002056:	4b2e      	ldr	r3, [pc, #184]	; (8002110 <HAL_RCC_ClockConfig+0x1f8>)
 8002058:	689b      	ldr	r3, [r3, #8]
 800205a:	2238      	movs	r2, #56	; 0x38
 800205c:	401a      	ands	r2, r3
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	00db      	lsls	r3, r3, #3
 8002064:	429a      	cmp	r2, r3
 8002066:	d1ec      	bne.n	8002042 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002068:	4b27      	ldr	r3, [pc, #156]	; (8002108 <HAL_RCC_ClockConfig+0x1f0>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	2207      	movs	r2, #7
 800206e:	4013      	ands	r3, r2
 8002070:	683a      	ldr	r2, [r7, #0]
 8002072:	429a      	cmp	r2, r3
 8002074:	d21e      	bcs.n	80020b4 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002076:	4b24      	ldr	r3, [pc, #144]	; (8002108 <HAL_RCC_ClockConfig+0x1f0>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	2207      	movs	r2, #7
 800207c:	4393      	bics	r3, r2
 800207e:	0019      	movs	r1, r3
 8002080:	4b21      	ldr	r3, [pc, #132]	; (8002108 <HAL_RCC_ClockConfig+0x1f0>)
 8002082:	683a      	ldr	r2, [r7, #0]
 8002084:	430a      	orrs	r2, r1
 8002086:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002088:	f7fe fe88 	bl	8000d9c <HAL_GetTick>
 800208c:	0003      	movs	r3, r0
 800208e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002090:	e009      	b.n	80020a6 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002092:	f7fe fe83 	bl	8000d9c <HAL_GetTick>
 8002096:	0002      	movs	r2, r0
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	1ad3      	subs	r3, r2, r3
 800209c:	4a1b      	ldr	r2, [pc, #108]	; (800210c <HAL_RCC_ClockConfig+0x1f4>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d901      	bls.n	80020a6 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80020a2:	2303      	movs	r3, #3
 80020a4:	e02c      	b.n	8002100 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80020a6:	4b18      	ldr	r3, [pc, #96]	; (8002108 <HAL_RCC_ClockConfig+0x1f0>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	2207      	movs	r2, #7
 80020ac:	4013      	ands	r3, r2
 80020ae:	683a      	ldr	r2, [r7, #0]
 80020b0:	429a      	cmp	r2, r3
 80020b2:	d1ee      	bne.n	8002092 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	2204      	movs	r2, #4
 80020ba:	4013      	ands	r3, r2
 80020bc:	d009      	beq.n	80020d2 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80020be:	4b14      	ldr	r3, [pc, #80]	; (8002110 <HAL_RCC_ClockConfig+0x1f8>)
 80020c0:	689b      	ldr	r3, [r3, #8]
 80020c2:	4a15      	ldr	r2, [pc, #84]	; (8002118 <HAL_RCC_ClockConfig+0x200>)
 80020c4:	4013      	ands	r3, r2
 80020c6:	0019      	movs	r1, r3
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	68da      	ldr	r2, [r3, #12]
 80020cc:	4b10      	ldr	r3, [pc, #64]	; (8002110 <HAL_RCC_ClockConfig+0x1f8>)
 80020ce:	430a      	orrs	r2, r1
 80020d0:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80020d2:	f000 f829 	bl	8002128 <HAL_RCC_GetSysClockFreq>
 80020d6:	0001      	movs	r1, r0
 80020d8:	4b0d      	ldr	r3, [pc, #52]	; (8002110 <HAL_RCC_ClockConfig+0x1f8>)
 80020da:	689b      	ldr	r3, [r3, #8]
 80020dc:	0a1b      	lsrs	r3, r3, #8
 80020de:	220f      	movs	r2, #15
 80020e0:	401a      	ands	r2, r3
 80020e2:	4b0e      	ldr	r3, [pc, #56]	; (800211c <HAL_RCC_ClockConfig+0x204>)
 80020e4:	0092      	lsls	r2, r2, #2
 80020e6:	58d3      	ldr	r3, [r2, r3]
 80020e8:	221f      	movs	r2, #31
 80020ea:	4013      	ands	r3, r2
 80020ec:	000a      	movs	r2, r1
 80020ee:	40da      	lsrs	r2, r3
 80020f0:	4b0b      	ldr	r3, [pc, #44]	; (8002120 <HAL_RCC_ClockConfig+0x208>)
 80020f2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80020f4:	4b0b      	ldr	r3, [pc, #44]	; (8002124 <HAL_RCC_ClockConfig+0x20c>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	0018      	movs	r0, r3
 80020fa:	f7fe fc1f 	bl	800093c <HAL_InitTick>
 80020fe:	0003      	movs	r3, r0
}
 8002100:	0018      	movs	r0, r3
 8002102:	46bd      	mov	sp, r7
 8002104:	b004      	add	sp, #16
 8002106:	bd80      	pop	{r7, pc}
 8002108:	40022000 	.word	0x40022000
 800210c:	00001388 	.word	0x00001388
 8002110:	40021000 	.word	0x40021000
 8002114:	fffff0ff 	.word	0xfffff0ff
 8002118:	ffff8fff 	.word	0xffff8fff
 800211c:	08007740 	.word	0x08007740
 8002120:	20000000 	.word	0x20000000
 8002124:	20000004 	.word	0x20000004

08002128 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b086      	sub	sp, #24
 800212c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800212e:	4b3c      	ldr	r3, [pc, #240]	; (8002220 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002130:	689b      	ldr	r3, [r3, #8]
 8002132:	2238      	movs	r2, #56	; 0x38
 8002134:	4013      	ands	r3, r2
 8002136:	d10f      	bne.n	8002158 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002138:	4b39      	ldr	r3, [pc, #228]	; (8002220 <HAL_RCC_GetSysClockFreq+0xf8>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	0adb      	lsrs	r3, r3, #11
 800213e:	2207      	movs	r2, #7
 8002140:	4013      	ands	r3, r2
 8002142:	2201      	movs	r2, #1
 8002144:	409a      	lsls	r2, r3
 8002146:	0013      	movs	r3, r2
 8002148:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800214a:	6839      	ldr	r1, [r7, #0]
 800214c:	4835      	ldr	r0, [pc, #212]	; (8002224 <HAL_RCC_GetSysClockFreq+0xfc>)
 800214e:	f7fd ffdb 	bl	8000108 <__udivsi3>
 8002152:	0003      	movs	r3, r0
 8002154:	613b      	str	r3, [r7, #16]
 8002156:	e05d      	b.n	8002214 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002158:	4b31      	ldr	r3, [pc, #196]	; (8002220 <HAL_RCC_GetSysClockFreq+0xf8>)
 800215a:	689b      	ldr	r3, [r3, #8]
 800215c:	2238      	movs	r2, #56	; 0x38
 800215e:	4013      	ands	r3, r2
 8002160:	2b08      	cmp	r3, #8
 8002162:	d102      	bne.n	800216a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002164:	4b30      	ldr	r3, [pc, #192]	; (8002228 <HAL_RCC_GetSysClockFreq+0x100>)
 8002166:	613b      	str	r3, [r7, #16]
 8002168:	e054      	b.n	8002214 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800216a:	4b2d      	ldr	r3, [pc, #180]	; (8002220 <HAL_RCC_GetSysClockFreq+0xf8>)
 800216c:	689b      	ldr	r3, [r3, #8]
 800216e:	2238      	movs	r2, #56	; 0x38
 8002170:	4013      	ands	r3, r2
 8002172:	2b10      	cmp	r3, #16
 8002174:	d138      	bne.n	80021e8 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002176:	4b2a      	ldr	r3, [pc, #168]	; (8002220 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002178:	68db      	ldr	r3, [r3, #12]
 800217a:	2203      	movs	r2, #3
 800217c:	4013      	ands	r3, r2
 800217e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002180:	4b27      	ldr	r3, [pc, #156]	; (8002220 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002182:	68db      	ldr	r3, [r3, #12]
 8002184:	091b      	lsrs	r3, r3, #4
 8002186:	2207      	movs	r2, #7
 8002188:	4013      	ands	r3, r2
 800218a:	3301      	adds	r3, #1
 800218c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	2b03      	cmp	r3, #3
 8002192:	d10d      	bne.n	80021b0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002194:	68b9      	ldr	r1, [r7, #8]
 8002196:	4824      	ldr	r0, [pc, #144]	; (8002228 <HAL_RCC_GetSysClockFreq+0x100>)
 8002198:	f7fd ffb6 	bl	8000108 <__udivsi3>
 800219c:	0003      	movs	r3, r0
 800219e:	0019      	movs	r1, r3
 80021a0:	4b1f      	ldr	r3, [pc, #124]	; (8002220 <HAL_RCC_GetSysClockFreq+0xf8>)
 80021a2:	68db      	ldr	r3, [r3, #12]
 80021a4:	0a1b      	lsrs	r3, r3, #8
 80021a6:	227f      	movs	r2, #127	; 0x7f
 80021a8:	4013      	ands	r3, r2
 80021aa:	434b      	muls	r3, r1
 80021ac:	617b      	str	r3, [r7, #20]
        break;
 80021ae:	e00d      	b.n	80021cc <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80021b0:	68b9      	ldr	r1, [r7, #8]
 80021b2:	481c      	ldr	r0, [pc, #112]	; (8002224 <HAL_RCC_GetSysClockFreq+0xfc>)
 80021b4:	f7fd ffa8 	bl	8000108 <__udivsi3>
 80021b8:	0003      	movs	r3, r0
 80021ba:	0019      	movs	r1, r3
 80021bc:	4b18      	ldr	r3, [pc, #96]	; (8002220 <HAL_RCC_GetSysClockFreq+0xf8>)
 80021be:	68db      	ldr	r3, [r3, #12]
 80021c0:	0a1b      	lsrs	r3, r3, #8
 80021c2:	227f      	movs	r2, #127	; 0x7f
 80021c4:	4013      	ands	r3, r2
 80021c6:	434b      	muls	r3, r1
 80021c8:	617b      	str	r3, [r7, #20]
        break;
 80021ca:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80021cc:	4b14      	ldr	r3, [pc, #80]	; (8002220 <HAL_RCC_GetSysClockFreq+0xf8>)
 80021ce:	68db      	ldr	r3, [r3, #12]
 80021d0:	0f5b      	lsrs	r3, r3, #29
 80021d2:	2207      	movs	r2, #7
 80021d4:	4013      	ands	r3, r2
 80021d6:	3301      	adds	r3, #1
 80021d8:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80021da:	6879      	ldr	r1, [r7, #4]
 80021dc:	6978      	ldr	r0, [r7, #20]
 80021de:	f7fd ff93 	bl	8000108 <__udivsi3>
 80021e2:	0003      	movs	r3, r0
 80021e4:	613b      	str	r3, [r7, #16]
 80021e6:	e015      	b.n	8002214 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80021e8:	4b0d      	ldr	r3, [pc, #52]	; (8002220 <HAL_RCC_GetSysClockFreq+0xf8>)
 80021ea:	689b      	ldr	r3, [r3, #8]
 80021ec:	2238      	movs	r2, #56	; 0x38
 80021ee:	4013      	ands	r3, r2
 80021f0:	2b20      	cmp	r3, #32
 80021f2:	d103      	bne.n	80021fc <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80021f4:	2380      	movs	r3, #128	; 0x80
 80021f6:	021b      	lsls	r3, r3, #8
 80021f8:	613b      	str	r3, [r7, #16]
 80021fa:	e00b      	b.n	8002214 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80021fc:	4b08      	ldr	r3, [pc, #32]	; (8002220 <HAL_RCC_GetSysClockFreq+0xf8>)
 80021fe:	689b      	ldr	r3, [r3, #8]
 8002200:	2238      	movs	r2, #56	; 0x38
 8002202:	4013      	ands	r3, r2
 8002204:	2b18      	cmp	r3, #24
 8002206:	d103      	bne.n	8002210 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002208:	23fa      	movs	r3, #250	; 0xfa
 800220a:	01db      	lsls	r3, r3, #7
 800220c:	613b      	str	r3, [r7, #16]
 800220e:	e001      	b.n	8002214 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002210:	2300      	movs	r3, #0
 8002212:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002214:	693b      	ldr	r3, [r7, #16]
}
 8002216:	0018      	movs	r0, r3
 8002218:	46bd      	mov	sp, r7
 800221a:	b006      	add	sp, #24
 800221c:	bd80      	pop	{r7, pc}
 800221e:	46c0      	nop			; (mov r8, r8)
 8002220:	40021000 	.word	0x40021000
 8002224:	00f42400 	.word	0x00f42400
 8002228:	007a1200 	.word	0x007a1200

0800222c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002230:	4b02      	ldr	r3, [pc, #8]	; (800223c <HAL_RCC_GetHCLKFreq+0x10>)
 8002232:	681b      	ldr	r3, [r3, #0]
}
 8002234:	0018      	movs	r0, r3
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}
 800223a:	46c0      	nop			; (mov r8, r8)
 800223c:	20000000 	.word	0x20000000

08002240 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002240:	b5b0      	push	{r4, r5, r7, lr}
 8002242:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002244:	f7ff fff2 	bl	800222c <HAL_RCC_GetHCLKFreq>
 8002248:	0004      	movs	r4, r0
 800224a:	f7ff fb49 	bl	80018e0 <LL_RCC_GetAPB1Prescaler>
 800224e:	0003      	movs	r3, r0
 8002250:	0b1a      	lsrs	r2, r3, #12
 8002252:	4b05      	ldr	r3, [pc, #20]	; (8002268 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002254:	0092      	lsls	r2, r2, #2
 8002256:	58d3      	ldr	r3, [r2, r3]
 8002258:	221f      	movs	r2, #31
 800225a:	4013      	ands	r3, r2
 800225c:	40dc      	lsrs	r4, r3
 800225e:	0023      	movs	r3, r4
}
 8002260:	0018      	movs	r0, r3
 8002262:	46bd      	mov	sp, r7
 8002264:	bdb0      	pop	{r4, r5, r7, pc}
 8002266:	46c0      	nop			; (mov r8, r8)
 8002268:	08007780 	.word	0x08007780

0800226c <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b082      	sub	sp, #8
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
 8002274:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2207      	movs	r2, #7
 800227a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800227c:	4b0e      	ldr	r3, [pc, #56]	; (80022b8 <HAL_RCC_GetClockConfig+0x4c>)
 800227e:	689b      	ldr	r3, [r3, #8]
 8002280:	2207      	movs	r2, #7
 8002282:	401a      	ands	r2, r3
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002288:	4b0b      	ldr	r3, [pc, #44]	; (80022b8 <HAL_RCC_GetClockConfig+0x4c>)
 800228a:	689a      	ldr	r2, [r3, #8]
 800228c:	23f0      	movs	r3, #240	; 0xf0
 800228e:	011b      	lsls	r3, r3, #4
 8002290:	401a      	ands	r2, r3
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);
 8002296:	4b08      	ldr	r3, [pc, #32]	; (80022b8 <HAL_RCC_GetClockConfig+0x4c>)
 8002298:	689a      	ldr	r2, [r3, #8]
 800229a:	23e0      	movs	r3, #224	; 0xe0
 800229c:	01db      	lsls	r3, r3, #7
 800229e:	401a      	ands	r2, r3
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	60da      	str	r2, [r3, #12]


  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80022a4:	4b05      	ldr	r3, [pc, #20]	; (80022bc <HAL_RCC_GetClockConfig+0x50>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	2207      	movs	r2, #7
 80022aa:	401a      	ands	r2, r3
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	601a      	str	r2, [r3, #0]
}
 80022b0:	46c0      	nop			; (mov r8, r8)
 80022b2:	46bd      	mov	sp, r7
 80022b4:	b002      	add	sp, #8
 80022b6:	bd80      	pop	{r7, pc}
 80022b8:	40021000 	.word	0x40021000
 80022bc:	40022000 	.word	0x40022000

080022c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b086      	sub	sp, #24
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80022c8:	2313      	movs	r3, #19
 80022ca:	18fb      	adds	r3, r7, r3
 80022cc:	2200      	movs	r2, #0
 80022ce:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80022d0:	2312      	movs	r3, #18
 80022d2:	18fb      	adds	r3, r7, r3
 80022d4:	2200      	movs	r2, #0
 80022d6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681a      	ldr	r2, [r3, #0]
 80022dc:	2380      	movs	r3, #128	; 0x80
 80022de:	029b      	lsls	r3, r3, #10
 80022e0:	4013      	ands	r3, r2
 80022e2:	d100      	bne.n	80022e6 <HAL_RCCEx_PeriphCLKConfig+0x26>
 80022e4:	e0a3      	b.n	800242e <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022e6:	2011      	movs	r0, #17
 80022e8:	183b      	adds	r3, r7, r0
 80022ea:	2200      	movs	r2, #0
 80022ec:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022ee:	4b86      	ldr	r3, [pc, #536]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80022f0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80022f2:	2380      	movs	r3, #128	; 0x80
 80022f4:	055b      	lsls	r3, r3, #21
 80022f6:	4013      	ands	r3, r2
 80022f8:	d110      	bne.n	800231c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022fa:	4b83      	ldr	r3, [pc, #524]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80022fc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80022fe:	4b82      	ldr	r3, [pc, #520]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002300:	2180      	movs	r1, #128	; 0x80
 8002302:	0549      	lsls	r1, r1, #21
 8002304:	430a      	orrs	r2, r1
 8002306:	63da      	str	r2, [r3, #60]	; 0x3c
 8002308:	4b7f      	ldr	r3, [pc, #508]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800230a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800230c:	2380      	movs	r3, #128	; 0x80
 800230e:	055b      	lsls	r3, r3, #21
 8002310:	4013      	ands	r3, r2
 8002312:	60bb      	str	r3, [r7, #8]
 8002314:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002316:	183b      	adds	r3, r7, r0
 8002318:	2201      	movs	r2, #1
 800231a:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800231c:	4b7b      	ldr	r3, [pc, #492]	; (800250c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800231e:	681a      	ldr	r2, [r3, #0]
 8002320:	4b7a      	ldr	r3, [pc, #488]	; (800250c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002322:	2180      	movs	r1, #128	; 0x80
 8002324:	0049      	lsls	r1, r1, #1
 8002326:	430a      	orrs	r2, r1
 8002328:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800232a:	f7fe fd37 	bl	8000d9c <HAL_GetTick>
 800232e:	0003      	movs	r3, r0
 8002330:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002332:	e00b      	b.n	800234c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002334:	f7fe fd32 	bl	8000d9c <HAL_GetTick>
 8002338:	0002      	movs	r2, r0
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	1ad3      	subs	r3, r2, r3
 800233e:	2b02      	cmp	r3, #2
 8002340:	d904      	bls.n	800234c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8002342:	2313      	movs	r3, #19
 8002344:	18fb      	adds	r3, r7, r3
 8002346:	2203      	movs	r2, #3
 8002348:	701a      	strb	r2, [r3, #0]
        break;
 800234a:	e005      	b.n	8002358 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800234c:	4b6f      	ldr	r3, [pc, #444]	; (800250c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800234e:	681a      	ldr	r2, [r3, #0]
 8002350:	2380      	movs	r3, #128	; 0x80
 8002352:	005b      	lsls	r3, r3, #1
 8002354:	4013      	ands	r3, r2
 8002356:	d0ed      	beq.n	8002334 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8002358:	2313      	movs	r3, #19
 800235a:	18fb      	adds	r3, r7, r3
 800235c:	781b      	ldrb	r3, [r3, #0]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d154      	bne.n	800240c <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002362:	4b69      	ldr	r3, [pc, #420]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002364:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002366:	23c0      	movs	r3, #192	; 0xc0
 8002368:	009b      	lsls	r3, r3, #2
 800236a:	4013      	ands	r3, r2
 800236c:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800236e:	697b      	ldr	r3, [r7, #20]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d019      	beq.n	80023a8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	699b      	ldr	r3, [r3, #24]
 8002378:	697a      	ldr	r2, [r7, #20]
 800237a:	429a      	cmp	r2, r3
 800237c:	d014      	beq.n	80023a8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800237e:	4b62      	ldr	r3, [pc, #392]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002380:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002382:	4a63      	ldr	r2, [pc, #396]	; (8002510 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002384:	4013      	ands	r3, r2
 8002386:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002388:	4b5f      	ldr	r3, [pc, #380]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800238a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800238c:	4b5e      	ldr	r3, [pc, #376]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800238e:	2180      	movs	r1, #128	; 0x80
 8002390:	0249      	lsls	r1, r1, #9
 8002392:	430a      	orrs	r2, r1
 8002394:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002396:	4b5c      	ldr	r3, [pc, #368]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002398:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800239a:	4b5b      	ldr	r3, [pc, #364]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800239c:	495d      	ldr	r1, [pc, #372]	; (8002514 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800239e:	400a      	ands	r2, r1
 80023a0:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80023a2:	4b59      	ldr	r3, [pc, #356]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80023a4:	697a      	ldr	r2, [r7, #20]
 80023a6:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80023a8:	697b      	ldr	r3, [r7, #20]
 80023aa:	2201      	movs	r2, #1
 80023ac:	4013      	ands	r3, r2
 80023ae:	d016      	beq.n	80023de <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023b0:	f7fe fcf4 	bl	8000d9c <HAL_GetTick>
 80023b4:	0003      	movs	r3, r0
 80023b6:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023b8:	e00c      	b.n	80023d4 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023ba:	f7fe fcef 	bl	8000d9c <HAL_GetTick>
 80023be:	0002      	movs	r2, r0
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	1ad3      	subs	r3, r2, r3
 80023c4:	4a54      	ldr	r2, [pc, #336]	; (8002518 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d904      	bls.n	80023d4 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80023ca:	2313      	movs	r3, #19
 80023cc:	18fb      	adds	r3, r7, r3
 80023ce:	2203      	movs	r2, #3
 80023d0:	701a      	strb	r2, [r3, #0]
            break;
 80023d2:	e004      	b.n	80023de <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023d4:	4b4c      	ldr	r3, [pc, #304]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80023d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023d8:	2202      	movs	r2, #2
 80023da:	4013      	ands	r3, r2
 80023dc:	d0ed      	beq.n	80023ba <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80023de:	2313      	movs	r3, #19
 80023e0:	18fb      	adds	r3, r7, r3
 80023e2:	781b      	ldrb	r3, [r3, #0]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d10a      	bne.n	80023fe <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80023e8:	4b47      	ldr	r3, [pc, #284]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80023ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023ec:	4a48      	ldr	r2, [pc, #288]	; (8002510 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80023ee:	4013      	ands	r3, r2
 80023f0:	0019      	movs	r1, r3
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	699a      	ldr	r2, [r3, #24]
 80023f6:	4b44      	ldr	r3, [pc, #272]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80023f8:	430a      	orrs	r2, r1
 80023fa:	65da      	str	r2, [r3, #92]	; 0x5c
 80023fc:	e00c      	b.n	8002418 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80023fe:	2312      	movs	r3, #18
 8002400:	18fb      	adds	r3, r7, r3
 8002402:	2213      	movs	r2, #19
 8002404:	18ba      	adds	r2, r7, r2
 8002406:	7812      	ldrb	r2, [r2, #0]
 8002408:	701a      	strb	r2, [r3, #0]
 800240a:	e005      	b.n	8002418 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800240c:	2312      	movs	r3, #18
 800240e:	18fb      	adds	r3, r7, r3
 8002410:	2213      	movs	r2, #19
 8002412:	18ba      	adds	r2, r7, r2
 8002414:	7812      	ldrb	r2, [r2, #0]
 8002416:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002418:	2311      	movs	r3, #17
 800241a:	18fb      	adds	r3, r7, r3
 800241c:	781b      	ldrb	r3, [r3, #0]
 800241e:	2b01      	cmp	r3, #1
 8002420:	d105      	bne.n	800242e <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002422:	4b39      	ldr	r3, [pc, #228]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002424:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002426:	4b38      	ldr	r3, [pc, #224]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002428:	493c      	ldr	r1, [pc, #240]	; (800251c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800242a:	400a      	ands	r2, r1
 800242c:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	2201      	movs	r2, #1
 8002434:	4013      	ands	r3, r2
 8002436:	d009      	beq.n	800244c <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002438:	4b33      	ldr	r3, [pc, #204]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800243a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800243c:	2203      	movs	r2, #3
 800243e:	4393      	bics	r3, r2
 8002440:	0019      	movs	r1, r3
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	685a      	ldr	r2, [r3, #4]
 8002446:	4b30      	ldr	r3, [pc, #192]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002448:	430a      	orrs	r2, r1
 800244a:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	2202      	movs	r2, #2
 8002452:	4013      	ands	r3, r2
 8002454:	d009      	beq.n	800246a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002456:	4b2c      	ldr	r3, [pc, #176]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002458:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800245a:	220c      	movs	r2, #12
 800245c:	4393      	bics	r3, r2
 800245e:	0019      	movs	r1, r3
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	689a      	ldr	r2, [r3, #8]
 8002464:	4b28      	ldr	r3, [pc, #160]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002466:	430a      	orrs	r2, r1
 8002468:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	2220      	movs	r2, #32
 8002470:	4013      	ands	r3, r2
 8002472:	d009      	beq.n	8002488 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002474:	4b24      	ldr	r3, [pc, #144]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002476:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002478:	4a29      	ldr	r2, [pc, #164]	; (8002520 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800247a:	4013      	ands	r3, r2
 800247c:	0019      	movs	r1, r3
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	68da      	ldr	r2, [r3, #12]
 8002482:	4b21      	ldr	r3, [pc, #132]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002484:	430a      	orrs	r2, r1
 8002486:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681a      	ldr	r2, [r3, #0]
 800248c:	2380      	movs	r3, #128	; 0x80
 800248e:	01db      	lsls	r3, r3, #7
 8002490:	4013      	ands	r3, r2
 8002492:	d015      	beq.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002494:	4b1c      	ldr	r3, [pc, #112]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002496:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002498:	009b      	lsls	r3, r3, #2
 800249a:	0899      	lsrs	r1, r3, #2
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	695a      	ldr	r2, [r3, #20]
 80024a0:	4b19      	ldr	r3, [pc, #100]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80024a2:	430a      	orrs	r2, r1
 80024a4:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	695a      	ldr	r2, [r3, #20]
 80024aa:	2380      	movs	r3, #128	; 0x80
 80024ac:	05db      	lsls	r3, r3, #23
 80024ae:	429a      	cmp	r2, r3
 80024b0:	d106      	bne.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80024b2:	4b15      	ldr	r3, [pc, #84]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80024b4:	68da      	ldr	r2, [r3, #12]
 80024b6:	4b14      	ldr	r3, [pc, #80]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80024b8:	2180      	movs	r1, #128	; 0x80
 80024ba:	0249      	lsls	r1, r1, #9
 80024bc:	430a      	orrs	r2, r1
 80024be:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681a      	ldr	r2, [r3, #0]
 80024c4:	2380      	movs	r3, #128	; 0x80
 80024c6:	011b      	lsls	r3, r3, #4
 80024c8:	4013      	ands	r3, r2
 80024ca:	d016      	beq.n	80024fa <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80024cc:	4b0e      	ldr	r3, [pc, #56]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80024ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024d0:	4a14      	ldr	r2, [pc, #80]	; (8002524 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80024d2:	4013      	ands	r3, r2
 80024d4:	0019      	movs	r1, r3
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	691a      	ldr	r2, [r3, #16]
 80024da:	4b0b      	ldr	r3, [pc, #44]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80024dc:	430a      	orrs	r2, r1
 80024de:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	691a      	ldr	r2, [r3, #16]
 80024e4:	2380      	movs	r3, #128	; 0x80
 80024e6:	01db      	lsls	r3, r3, #7
 80024e8:	429a      	cmp	r2, r3
 80024ea:	d106      	bne.n	80024fa <HAL_RCCEx_PeriphCLKConfig+0x23a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80024ec:	4b06      	ldr	r3, [pc, #24]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80024ee:	68da      	ldr	r2, [r3, #12]
 80024f0:	4b05      	ldr	r3, [pc, #20]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80024f2:	2180      	movs	r1, #128	; 0x80
 80024f4:	0249      	lsls	r1, r1, #9
 80024f6:	430a      	orrs	r2, r1
 80024f8:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80024fa:	2312      	movs	r3, #18
 80024fc:	18fb      	adds	r3, r7, r3
 80024fe:	781b      	ldrb	r3, [r3, #0]
}
 8002500:	0018      	movs	r0, r3
 8002502:	46bd      	mov	sp, r7
 8002504:	b006      	add	sp, #24
 8002506:	bd80      	pop	{r7, pc}
 8002508:	40021000 	.word	0x40021000
 800250c:	40007000 	.word	0x40007000
 8002510:	fffffcff 	.word	0xfffffcff
 8002514:	fffeffff 	.word	0xfffeffff
 8002518:	00001388 	.word	0x00001388
 800251c:	efffffff 	.word	0xefffffff
 8002520:	ffffcfff 	.word	0xffffcfff
 8002524:	ffff3fff 	.word	0xffff3fff

08002528 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b082      	sub	sp, #8
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d101      	bne.n	800253a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002536:	2301      	movs	r3, #1
 8002538:	e04a      	b.n	80025d0 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	223d      	movs	r2, #61	; 0x3d
 800253e:	5c9b      	ldrb	r3, [r3, r2]
 8002540:	b2db      	uxtb	r3, r3
 8002542:	2b00      	cmp	r3, #0
 8002544:	d107      	bne.n	8002556 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	223c      	movs	r2, #60	; 0x3c
 800254a:	2100      	movs	r1, #0
 800254c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	0018      	movs	r0, r3
 8002552:	f000 f841 	bl	80025d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	223d      	movs	r2, #61	; 0x3d
 800255a:	2102      	movs	r1, #2
 800255c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681a      	ldr	r2, [r3, #0]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	3304      	adds	r3, #4
 8002566:	0019      	movs	r1, r3
 8002568:	0010      	movs	r0, r2
 800256a:	f000 f9e5 	bl	8002938 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2248      	movs	r2, #72	; 0x48
 8002572:	2101      	movs	r1, #1
 8002574:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	223e      	movs	r2, #62	; 0x3e
 800257a:	2101      	movs	r1, #1
 800257c:	5499      	strb	r1, [r3, r2]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	223f      	movs	r2, #63	; 0x3f
 8002582:	2101      	movs	r1, #1
 8002584:	5499      	strb	r1, [r3, r2]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2240      	movs	r2, #64	; 0x40
 800258a:	2101      	movs	r1, #1
 800258c:	5499      	strb	r1, [r3, r2]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2241      	movs	r2, #65	; 0x41
 8002592:	2101      	movs	r1, #1
 8002594:	5499      	strb	r1, [r3, r2]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2242      	movs	r2, #66	; 0x42
 800259a:	2101      	movs	r1, #1
 800259c:	5499      	strb	r1, [r3, r2]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2243      	movs	r2, #67	; 0x43
 80025a2:	2101      	movs	r1, #1
 80025a4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2244      	movs	r2, #68	; 0x44
 80025aa:	2101      	movs	r1, #1
 80025ac:	5499      	strb	r1, [r3, r2]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2245      	movs	r2, #69	; 0x45
 80025b2:	2101      	movs	r1, #1
 80025b4:	5499      	strb	r1, [r3, r2]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2246      	movs	r2, #70	; 0x46
 80025ba:	2101      	movs	r1, #1
 80025bc:	5499      	strb	r1, [r3, r2]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2247      	movs	r2, #71	; 0x47
 80025c2:	2101      	movs	r1, #1
 80025c4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	223d      	movs	r2, #61	; 0x3d
 80025ca:	2101      	movs	r1, #1
 80025cc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80025ce:	2300      	movs	r3, #0
}
 80025d0:	0018      	movs	r0, r3
 80025d2:	46bd      	mov	sp, r7
 80025d4:	b002      	add	sp, #8
 80025d6:	bd80      	pop	{r7, pc}

080025d8 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b082      	sub	sp, #8
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80025e0:	46c0      	nop			; (mov r8, r8)
 80025e2:	46bd      	mov	sp, r7
 80025e4:	b002      	add	sp, #8
 80025e6:	bd80      	pop	{r7, pc}

080025e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b084      	sub	sp, #16
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	223d      	movs	r2, #61	; 0x3d
 80025f4:	5c9b      	ldrb	r3, [r3, r2]
 80025f6:	b2db      	uxtb	r3, r3
 80025f8:	2b01      	cmp	r3, #1
 80025fa:	d001      	beq.n	8002600 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80025fc:	2301      	movs	r3, #1
 80025fe:	e03c      	b.n	800267a <HAL_TIM_Base_Start_IT+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	223d      	movs	r2, #61	; 0x3d
 8002604:	2102      	movs	r1, #2
 8002606:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	68da      	ldr	r2, [r3, #12]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	2101      	movs	r1, #1
 8002614:	430a      	orrs	r2, r1
 8002616:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a19      	ldr	r2, [pc, #100]	; (8002684 <HAL_TIM_Base_Start_IT+0x9c>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d009      	beq.n	8002636 <HAL_TIM_Base_Start_IT+0x4e>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a18      	ldr	r2, [pc, #96]	; (8002688 <HAL_TIM_Base_Start_IT+0xa0>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d004      	beq.n	8002636 <HAL_TIM_Base_Start_IT+0x4e>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a16      	ldr	r2, [pc, #88]	; (800268c <HAL_TIM_Base_Start_IT+0xa4>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d116      	bne.n	8002664 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	4a14      	ldr	r2, [pc, #80]	; (8002690 <HAL_TIM_Base_Start_IT+0xa8>)
 800263e:	4013      	ands	r3, r2
 8002640:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	2b06      	cmp	r3, #6
 8002646:	d016      	beq.n	8002676 <HAL_TIM_Base_Start_IT+0x8e>
 8002648:	68fa      	ldr	r2, [r7, #12]
 800264a:	2380      	movs	r3, #128	; 0x80
 800264c:	025b      	lsls	r3, r3, #9
 800264e:	429a      	cmp	r2, r3
 8002650:	d011      	beq.n	8002676 <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	681a      	ldr	r2, [r3, #0]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	2101      	movs	r1, #1
 800265e:	430a      	orrs	r2, r1
 8002660:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002662:	e008      	b.n	8002676 <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	681a      	ldr	r2, [r3, #0]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	2101      	movs	r1, #1
 8002670:	430a      	orrs	r2, r1
 8002672:	601a      	str	r2, [r3, #0]
 8002674:	e000      	b.n	8002678 <HAL_TIM_Base_Start_IT+0x90>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002676:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8002678:	2300      	movs	r3, #0
}
 800267a:	0018      	movs	r0, r3
 800267c:	46bd      	mov	sp, r7
 800267e:	b004      	add	sp, #16
 8002680:	bd80      	pop	{r7, pc}
 8002682:	46c0      	nop			; (mov r8, r8)
 8002684:	40012c00 	.word	0x40012c00
 8002688:	40000400 	.word	0x40000400
 800268c:	40014000 	.word	0x40014000
 8002690:	00010007 	.word	0x00010007

08002694 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b082      	sub	sp, #8
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	691b      	ldr	r3, [r3, #16]
 80026a2:	2202      	movs	r2, #2
 80026a4:	4013      	ands	r3, r2
 80026a6:	2b02      	cmp	r3, #2
 80026a8:	d124      	bne.n	80026f4 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	68db      	ldr	r3, [r3, #12]
 80026b0:	2202      	movs	r2, #2
 80026b2:	4013      	ands	r3, r2
 80026b4:	2b02      	cmp	r3, #2
 80026b6:	d11d      	bne.n	80026f4 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	2203      	movs	r2, #3
 80026be:	4252      	negs	r2, r2
 80026c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2201      	movs	r2, #1
 80026c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	699b      	ldr	r3, [r3, #24]
 80026ce:	2203      	movs	r2, #3
 80026d0:	4013      	ands	r3, r2
 80026d2:	d004      	beq.n	80026de <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	0018      	movs	r0, r3
 80026d8:	f000 f916 	bl	8002908 <HAL_TIM_IC_CaptureCallback>
 80026dc:	e007      	b.n	80026ee <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	0018      	movs	r0, r3
 80026e2:	f000 f909 	bl	80028f8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	0018      	movs	r0, r3
 80026ea:	f000 f915 	bl	8002918 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2200      	movs	r2, #0
 80026f2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	691b      	ldr	r3, [r3, #16]
 80026fa:	2204      	movs	r2, #4
 80026fc:	4013      	ands	r3, r2
 80026fe:	2b04      	cmp	r3, #4
 8002700:	d125      	bne.n	800274e <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	68db      	ldr	r3, [r3, #12]
 8002708:	2204      	movs	r2, #4
 800270a:	4013      	ands	r3, r2
 800270c:	2b04      	cmp	r3, #4
 800270e:	d11e      	bne.n	800274e <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	2205      	movs	r2, #5
 8002716:	4252      	negs	r2, r2
 8002718:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2202      	movs	r2, #2
 800271e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	699a      	ldr	r2, [r3, #24]
 8002726:	23c0      	movs	r3, #192	; 0xc0
 8002728:	009b      	lsls	r3, r3, #2
 800272a:	4013      	ands	r3, r2
 800272c:	d004      	beq.n	8002738 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	0018      	movs	r0, r3
 8002732:	f000 f8e9 	bl	8002908 <HAL_TIM_IC_CaptureCallback>
 8002736:	e007      	b.n	8002748 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	0018      	movs	r0, r3
 800273c:	f000 f8dc 	bl	80028f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	0018      	movs	r0, r3
 8002744:	f000 f8e8 	bl	8002918 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2200      	movs	r2, #0
 800274c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	691b      	ldr	r3, [r3, #16]
 8002754:	2208      	movs	r2, #8
 8002756:	4013      	ands	r3, r2
 8002758:	2b08      	cmp	r3, #8
 800275a:	d124      	bne.n	80027a6 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	68db      	ldr	r3, [r3, #12]
 8002762:	2208      	movs	r2, #8
 8002764:	4013      	ands	r3, r2
 8002766:	2b08      	cmp	r3, #8
 8002768:	d11d      	bne.n	80027a6 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	2209      	movs	r2, #9
 8002770:	4252      	negs	r2, r2
 8002772:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2204      	movs	r2, #4
 8002778:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	69db      	ldr	r3, [r3, #28]
 8002780:	2203      	movs	r2, #3
 8002782:	4013      	ands	r3, r2
 8002784:	d004      	beq.n	8002790 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	0018      	movs	r0, r3
 800278a:	f000 f8bd 	bl	8002908 <HAL_TIM_IC_CaptureCallback>
 800278e:	e007      	b.n	80027a0 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	0018      	movs	r0, r3
 8002794:	f000 f8b0 	bl	80028f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	0018      	movs	r0, r3
 800279c:	f000 f8bc 	bl	8002918 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2200      	movs	r2, #0
 80027a4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	691b      	ldr	r3, [r3, #16]
 80027ac:	2210      	movs	r2, #16
 80027ae:	4013      	ands	r3, r2
 80027b0:	2b10      	cmp	r3, #16
 80027b2:	d125      	bne.n	8002800 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	68db      	ldr	r3, [r3, #12]
 80027ba:	2210      	movs	r2, #16
 80027bc:	4013      	ands	r3, r2
 80027be:	2b10      	cmp	r3, #16
 80027c0:	d11e      	bne.n	8002800 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	2211      	movs	r2, #17
 80027c8:	4252      	negs	r2, r2
 80027ca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2208      	movs	r2, #8
 80027d0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	69da      	ldr	r2, [r3, #28]
 80027d8:	23c0      	movs	r3, #192	; 0xc0
 80027da:	009b      	lsls	r3, r3, #2
 80027dc:	4013      	ands	r3, r2
 80027de:	d004      	beq.n	80027ea <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	0018      	movs	r0, r3
 80027e4:	f000 f890 	bl	8002908 <HAL_TIM_IC_CaptureCallback>
 80027e8:	e007      	b.n	80027fa <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	0018      	movs	r0, r3
 80027ee:	f000 f883 	bl	80028f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	0018      	movs	r0, r3
 80027f6:	f000 f88f 	bl	8002918 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2200      	movs	r2, #0
 80027fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	691b      	ldr	r3, [r3, #16]
 8002806:	2201      	movs	r2, #1
 8002808:	4013      	ands	r3, r2
 800280a:	2b01      	cmp	r3, #1
 800280c:	d10f      	bne.n	800282e <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	68db      	ldr	r3, [r3, #12]
 8002814:	2201      	movs	r2, #1
 8002816:	4013      	ands	r3, r2
 8002818:	2b01      	cmp	r3, #1
 800281a:	d108      	bne.n	800282e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	2202      	movs	r2, #2
 8002822:	4252      	negs	r2, r2
 8002824:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	0018      	movs	r0, r3
 800282a:	f7fe f845 	bl	80008b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	691b      	ldr	r3, [r3, #16]
 8002834:	2280      	movs	r2, #128	; 0x80
 8002836:	4013      	ands	r3, r2
 8002838:	2b80      	cmp	r3, #128	; 0x80
 800283a:	d10f      	bne.n	800285c <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	68db      	ldr	r3, [r3, #12]
 8002842:	2280      	movs	r2, #128	; 0x80
 8002844:	4013      	ands	r3, r2
 8002846:	2b80      	cmp	r3, #128	; 0x80
 8002848:	d108      	bne.n	800285c <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	2281      	movs	r2, #129	; 0x81
 8002850:	4252      	negs	r2, r2
 8002852:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	0018      	movs	r0, r3
 8002858:	f000 f8ec 	bl	8002a34 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	691a      	ldr	r2, [r3, #16]
 8002862:	2380      	movs	r3, #128	; 0x80
 8002864:	005b      	lsls	r3, r3, #1
 8002866:	401a      	ands	r2, r3
 8002868:	2380      	movs	r3, #128	; 0x80
 800286a:	005b      	lsls	r3, r3, #1
 800286c:	429a      	cmp	r2, r3
 800286e:	d10e      	bne.n	800288e <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	68db      	ldr	r3, [r3, #12]
 8002876:	2280      	movs	r2, #128	; 0x80
 8002878:	4013      	ands	r3, r2
 800287a:	2b80      	cmp	r3, #128	; 0x80
 800287c:	d107      	bne.n	800288e <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4a1c      	ldr	r2, [pc, #112]	; (80028f4 <HAL_TIM_IRQHandler+0x260>)
 8002884:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	0018      	movs	r0, r3
 800288a:	f000 f8db 	bl	8002a44 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	691b      	ldr	r3, [r3, #16]
 8002894:	2240      	movs	r2, #64	; 0x40
 8002896:	4013      	ands	r3, r2
 8002898:	2b40      	cmp	r3, #64	; 0x40
 800289a:	d10f      	bne.n	80028bc <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	68db      	ldr	r3, [r3, #12]
 80028a2:	2240      	movs	r2, #64	; 0x40
 80028a4:	4013      	ands	r3, r2
 80028a6:	2b40      	cmp	r3, #64	; 0x40
 80028a8:	d108      	bne.n	80028bc <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	2241      	movs	r2, #65	; 0x41
 80028b0:	4252      	negs	r2, r2
 80028b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	0018      	movs	r0, r3
 80028b8:	f000 f836 	bl	8002928 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	691b      	ldr	r3, [r3, #16]
 80028c2:	2220      	movs	r2, #32
 80028c4:	4013      	ands	r3, r2
 80028c6:	2b20      	cmp	r3, #32
 80028c8:	d10f      	bne.n	80028ea <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	68db      	ldr	r3, [r3, #12]
 80028d0:	2220      	movs	r2, #32
 80028d2:	4013      	ands	r3, r2
 80028d4:	2b20      	cmp	r3, #32
 80028d6:	d108      	bne.n	80028ea <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	2221      	movs	r2, #33	; 0x21
 80028de:	4252      	negs	r2, r2
 80028e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	0018      	movs	r0, r3
 80028e6:	f000 f89d 	bl	8002a24 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80028ea:	46c0      	nop			; (mov r8, r8)
 80028ec:	46bd      	mov	sp, r7
 80028ee:	b002      	add	sp, #8
 80028f0:	bd80      	pop	{r7, pc}
 80028f2:	46c0      	nop			; (mov r8, r8)
 80028f4:	fffffeff 	.word	0xfffffeff

080028f8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b082      	sub	sp, #8
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002900:	46c0      	nop			; (mov r8, r8)
 8002902:	46bd      	mov	sp, r7
 8002904:	b002      	add	sp, #8
 8002906:	bd80      	pop	{r7, pc}

08002908 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b082      	sub	sp, #8
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002910:	46c0      	nop			; (mov r8, r8)
 8002912:	46bd      	mov	sp, r7
 8002914:	b002      	add	sp, #8
 8002916:	bd80      	pop	{r7, pc}

08002918 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b082      	sub	sp, #8
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002920:	46c0      	nop			; (mov r8, r8)
 8002922:	46bd      	mov	sp, r7
 8002924:	b002      	add	sp, #8
 8002926:	bd80      	pop	{r7, pc}

08002928 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b082      	sub	sp, #8
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002930:	46c0      	nop			; (mov r8, r8)
 8002932:	46bd      	mov	sp, r7
 8002934:	b002      	add	sp, #8
 8002936:	bd80      	pop	{r7, pc}

08002938 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b084      	sub	sp, #16
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
 8002940:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	4a2f      	ldr	r2, [pc, #188]	; (8002a08 <TIM_Base_SetConfig+0xd0>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d003      	beq.n	8002958 <TIM_Base_SetConfig+0x20>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	4a2e      	ldr	r2, [pc, #184]	; (8002a0c <TIM_Base_SetConfig+0xd4>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d108      	bne.n	800296a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	2270      	movs	r2, #112	; 0x70
 800295c:	4393      	bics	r3, r2
 800295e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	68fa      	ldr	r2, [r7, #12]
 8002966:	4313      	orrs	r3, r2
 8002968:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	4a26      	ldr	r2, [pc, #152]	; (8002a08 <TIM_Base_SetConfig+0xd0>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d013      	beq.n	800299a <TIM_Base_SetConfig+0x62>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	4a25      	ldr	r2, [pc, #148]	; (8002a0c <TIM_Base_SetConfig+0xd4>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d00f      	beq.n	800299a <TIM_Base_SetConfig+0x62>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	4a24      	ldr	r2, [pc, #144]	; (8002a10 <TIM_Base_SetConfig+0xd8>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d00b      	beq.n	800299a <TIM_Base_SetConfig+0x62>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	4a23      	ldr	r2, [pc, #140]	; (8002a14 <TIM_Base_SetConfig+0xdc>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d007      	beq.n	800299a <TIM_Base_SetConfig+0x62>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	4a22      	ldr	r2, [pc, #136]	; (8002a18 <TIM_Base_SetConfig+0xe0>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d003      	beq.n	800299a <TIM_Base_SetConfig+0x62>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	4a21      	ldr	r2, [pc, #132]	; (8002a1c <TIM_Base_SetConfig+0xe4>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d108      	bne.n	80029ac <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	4a20      	ldr	r2, [pc, #128]	; (8002a20 <TIM_Base_SetConfig+0xe8>)
 800299e:	4013      	ands	r3, r2
 80029a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	68db      	ldr	r3, [r3, #12]
 80029a6:	68fa      	ldr	r2, [r7, #12]
 80029a8:	4313      	orrs	r3, r2
 80029aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	2280      	movs	r2, #128	; 0x80
 80029b0:	4393      	bics	r3, r2
 80029b2:	001a      	movs	r2, r3
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	695b      	ldr	r3, [r3, #20]
 80029b8:	4313      	orrs	r3, r2
 80029ba:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	68fa      	ldr	r2, [r7, #12]
 80029c0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	689a      	ldr	r2, [r3, #8]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	681a      	ldr	r2, [r3, #0]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	4a0c      	ldr	r2, [pc, #48]	; (8002a08 <TIM_Base_SetConfig+0xd0>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d00b      	beq.n	80029f2 <TIM_Base_SetConfig+0xba>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	4a0d      	ldr	r2, [pc, #52]	; (8002a14 <TIM_Base_SetConfig+0xdc>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d007      	beq.n	80029f2 <TIM_Base_SetConfig+0xba>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	4a0c      	ldr	r2, [pc, #48]	; (8002a18 <TIM_Base_SetConfig+0xe0>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d003      	beq.n	80029f2 <TIM_Base_SetConfig+0xba>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	4a0b      	ldr	r2, [pc, #44]	; (8002a1c <TIM_Base_SetConfig+0xe4>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d103      	bne.n	80029fa <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	691a      	ldr	r2, [r3, #16]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2201      	movs	r2, #1
 80029fe:	615a      	str	r2, [r3, #20]
}
 8002a00:	46c0      	nop			; (mov r8, r8)
 8002a02:	46bd      	mov	sp, r7
 8002a04:	b004      	add	sp, #16
 8002a06:	bd80      	pop	{r7, pc}
 8002a08:	40012c00 	.word	0x40012c00
 8002a0c:	40000400 	.word	0x40000400
 8002a10:	40002000 	.word	0x40002000
 8002a14:	40014000 	.word	0x40014000
 8002a18:	40014400 	.word	0x40014400
 8002a1c:	40014800 	.word	0x40014800
 8002a20:	fffffcff 	.word	0xfffffcff

08002a24 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b082      	sub	sp, #8
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002a2c:	46c0      	nop			; (mov r8, r8)
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	b002      	add	sp, #8
 8002a32:	bd80      	pop	{r7, pc}

08002a34 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b082      	sub	sp, #8
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002a3c:	46c0      	nop			; (mov r8, r8)
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	b002      	add	sp, #8
 8002a42:	bd80      	pop	{r7, pc}

08002a44 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b082      	sub	sp, #8
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002a4c:	46c0      	nop			; (mov r8, r8)
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	b002      	add	sp, #8
 8002a52:	bd80      	pop	{r7, pc}

08002a54 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b082      	sub	sp, #8
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d101      	bne.n	8002a66 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	e046      	b.n	8002af4 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2288      	movs	r2, #136	; 0x88
 8002a6a:	589b      	ldr	r3, [r3, r2]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d107      	bne.n	8002a80 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2284      	movs	r2, #132	; 0x84
 8002a74:	2100      	movs	r1, #0
 8002a76:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	0018      	movs	r0, r3
 8002a7c:	f7fe f86e 	bl	8000b5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2288      	movs	r2, #136	; 0x88
 8002a84:	2124      	movs	r1, #36	; 0x24
 8002a86:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	681a      	ldr	r2, [r3, #0]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	2101      	movs	r1, #1
 8002a94:	438a      	bics	r2, r1
 8002a96:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	0018      	movs	r0, r3
 8002a9c:	f000 fca0 	bl	80033e0 <UART_SetConfig>
 8002aa0:	0003      	movs	r3, r0
 8002aa2:	2b01      	cmp	r3, #1
 8002aa4:	d101      	bne.n	8002aaa <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	e024      	b.n	8002af4 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d003      	beq.n	8002aba <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	0018      	movs	r0, r3
 8002ab6:	f000 fe37 	bl	8003728 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	685a      	ldr	r2, [r3, #4]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	490d      	ldr	r1, [pc, #52]	; (8002afc <HAL_UART_Init+0xa8>)
 8002ac6:	400a      	ands	r2, r1
 8002ac8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	689a      	ldr	r2, [r3, #8]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	212a      	movs	r1, #42	; 0x2a
 8002ad6:	438a      	bics	r2, r1
 8002ad8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	681a      	ldr	r2, [r3, #0]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	2101      	movs	r1, #1
 8002ae6:	430a      	orrs	r2, r1
 8002ae8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	0018      	movs	r0, r3
 8002aee:	f000 fecf 	bl	8003890 <UART_CheckIdleState>
 8002af2:	0003      	movs	r3, r0
}
 8002af4:	0018      	movs	r0, r3
 8002af6:	46bd      	mov	sp, r7
 8002af8:	b002      	add	sp, #8
 8002afa:	bd80      	pop	{r7, pc}
 8002afc:	ffffb7ff 	.word	0xffffb7ff

08002b00 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b088      	sub	sp, #32
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	60f8      	str	r0, [r7, #12]
 8002b08:	60b9      	str	r1, [r7, #8]
 8002b0a:	1dbb      	adds	r3, r7, #6
 8002b0c:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	2288      	movs	r2, #136	; 0x88
 8002b12:	589b      	ldr	r3, [r3, r2]
 8002b14:	2b20      	cmp	r3, #32
 8002b16:	d000      	beq.n	8002b1a <HAL_UART_Transmit_DMA+0x1a>
 8002b18:	e079      	b.n	8002c0e <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b1a:	68bb      	ldr	r3, [r7, #8]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d003      	beq.n	8002b28 <HAL_UART_Transmit_DMA+0x28>
 8002b20:	1dbb      	adds	r3, r7, #6
 8002b22:	881b      	ldrh	r3, [r3, #0]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d101      	bne.n	8002b2c <HAL_UART_Transmit_DMA+0x2c>
    {
      return HAL_ERROR;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	e071      	b.n	8002c10 <HAL_UART_Transmit_DMA+0x110>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	689a      	ldr	r2, [r3, #8]
 8002b30:	2380      	movs	r3, #128	; 0x80
 8002b32:	015b      	lsls	r3, r3, #5
 8002b34:	429a      	cmp	r2, r3
 8002b36:	d109      	bne.n	8002b4c <HAL_UART_Transmit_DMA+0x4c>
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	691b      	ldr	r3, [r3, #16]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d105      	bne.n	8002b4c <HAL_UART_Transmit_DMA+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002b40:	68bb      	ldr	r3, [r7, #8]
 8002b42:	2201      	movs	r2, #1
 8002b44:	4013      	ands	r3, r2
 8002b46:	d001      	beq.n	8002b4c <HAL_UART_Transmit_DMA+0x4c>
      {
        return  HAL_ERROR;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	e061      	b.n	8002c10 <HAL_UART_Transmit_DMA+0x110>
      }
    }

    huart->pTxBuffPtr  = pData;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	68ba      	ldr	r2, [r7, #8]
 8002b50:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	1dba      	adds	r2, r7, #6
 8002b56:	2154      	movs	r1, #84	; 0x54
 8002b58:	8812      	ldrh	r2, [r2, #0]
 8002b5a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	1dba      	adds	r2, r7, #6
 8002b60:	2156      	movs	r1, #86	; 0x56
 8002b62:	8812      	ldrh	r2, [r2, #0]
 8002b64:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	2290      	movs	r2, #144	; 0x90
 8002b6a:	2100      	movs	r1, #0
 8002b6c:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	2288      	movs	r2, #136	; 0x88
 8002b72:	2121      	movs	r1, #33	; 0x21
 8002b74:	5099      	str	r1, [r3, r2]

    if (huart->hdmatx != NULL)
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d028      	beq.n	8002bd0 <HAL_UART_Transmit_DMA+0xd0>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b82:	4a25      	ldr	r2, [pc, #148]	; (8002c18 <HAL_UART_Transmit_DMA+0x118>)
 8002b84:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b8a:	4a24      	ldr	r2, [pc, #144]	; (8002c1c <HAL_UART_Transmit_DMA+0x11c>)
 8002b8c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b92:	4a23      	ldr	r2, [pc, #140]	; (8002c20 <HAL_UART_Transmit_DMA+0x120>)
 8002b94:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ba6:	0019      	movs	r1, r3
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	3328      	adds	r3, #40	; 0x28
 8002bae:	001a      	movs	r2, r3
 8002bb0:	1dbb      	adds	r3, r7, #6
 8002bb2:	881b      	ldrh	r3, [r3, #0]
 8002bb4:	f7fe fa34 	bl	8001020 <HAL_DMA_Start_IT>
 8002bb8:	1e03      	subs	r3, r0, #0
 8002bba:	d009      	beq.n	8002bd0 <HAL_UART_Transmit_DMA+0xd0>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	2290      	movs	r2, #144	; 0x90
 8002bc0:	2110      	movs	r1, #16
 8002bc2:	5099      	str	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	2288      	movs	r2, #136	; 0x88
 8002bc8:	2120      	movs	r1, #32
 8002bca:	5099      	str	r1, [r3, r2]

        return HAL_ERROR;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	e01f      	b.n	8002c10 <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	2240      	movs	r2, #64	; 0x40
 8002bd6:	621a      	str	r2, [r3, #32]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002bd8:	f3ef 8310 	mrs	r3, PRIMASK
 8002bdc:	613b      	str	r3, [r7, #16]
  return(result);
 8002bde:	693b      	ldr	r3, [r7, #16]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002be0:	61fb      	str	r3, [r7, #28]
 8002be2:	2301      	movs	r3, #1
 8002be4:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	f383 8810 	msr	PRIMASK, r3
}
 8002bec:	46c0      	nop			; (mov r8, r8)
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	689a      	ldr	r2, [r3, #8]
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	2180      	movs	r1, #128	; 0x80
 8002bfa:	430a      	orrs	r2, r1
 8002bfc:	609a      	str	r2, [r3, #8]
 8002bfe:	69fb      	ldr	r3, [r7, #28]
 8002c00:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c02:	69bb      	ldr	r3, [r7, #24]
 8002c04:	f383 8810 	msr	PRIMASK, r3
}
 8002c08:	46c0      	nop			; (mov r8, r8)

    return HAL_OK;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	e000      	b.n	8002c10 <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 8002c0e:	2302      	movs	r3, #2
  }
}
 8002c10:	0018      	movs	r0, r3
 8002c12:	46bd      	mov	sp, r7
 8002c14:	b008      	add	sp, #32
 8002c16:	bd80      	pop	{r7, pc}
 8002c18:	08003d55 	.word	0x08003d55
 8002c1c:	08003ded 	.word	0x08003ded
 8002c20:	08003f7f 	.word	0x08003f7f

08002c24 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b08c      	sub	sp, #48	; 0x30
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2288      	movs	r2, #136	; 0x88
 8002c30:	589b      	ldr	r3, [r3, r2]
 8002c32:	62fb      	str	r3, [r7, #44]	; 0x2c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	228c      	movs	r2, #140	; 0x8c
 8002c38:	589b      	ldr	r3, [r3, r2]
 8002c3a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	689b      	ldr	r3, [r3, #8]
 8002c42:	2280      	movs	r2, #128	; 0x80
 8002c44:	4013      	ands	r3, r2
 8002c46:	2b80      	cmp	r3, #128	; 0x80
 8002c48:	d138      	bne.n	8002cbc <HAL_UART_DMAStop+0x98>
 8002c4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c4c:	2b21      	cmp	r3, #33	; 0x21
 8002c4e:	d135      	bne.n	8002cbc <HAL_UART_DMAStop+0x98>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c50:	f3ef 8310 	mrs	r3, PRIMASK
 8002c54:	617b      	str	r3, [r7, #20]
  return(result);
 8002c56:	697b      	ldr	r3, [r7, #20]
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002c58:	627b      	str	r3, [r7, #36]	; 0x24
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c5e:	69bb      	ldr	r3, [r7, #24]
 8002c60:	f383 8810 	msr	PRIMASK, r3
}
 8002c64:	46c0      	nop			; (mov r8, r8)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	689a      	ldr	r2, [r3, #8]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	2180      	movs	r1, #128	; 0x80
 8002c72:	438a      	bics	r2, r1
 8002c74:	609a      	str	r2, [r3, #8]
 8002c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c78:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c7a:	69fb      	ldr	r3, [r7, #28]
 8002c7c:	f383 8810 	msr	PRIMASK, r3
}
 8002c80:	46c0      	nop			; (mov r8, r8)

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d014      	beq.n	8002cb4 <HAL_UART_DMAStop+0x90>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c8e:	0018      	movs	r0, r3
 8002c90:	f7fe fa4c 	bl	800112c <HAL_DMA_Abort>
 8002c94:	1e03      	subs	r3, r0, #0
 8002c96:	d00d      	beq.n	8002cb4 <HAL_UART_DMAStop+0x90>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c9c:	0018      	movs	r0, r3
 8002c9e:	f7fe fbc3 	bl	8001428 <HAL_DMA_GetError>
 8002ca2:	0003      	movs	r3, r0
 8002ca4:	2b20      	cmp	r3, #32
 8002ca6:	d105      	bne.n	8002cb4 <HAL_UART_DMAStop+0x90>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2290      	movs	r2, #144	; 0x90
 8002cac:	2110      	movs	r1, #16
 8002cae:	5099      	str	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002cb0:	2303      	movs	r3, #3
 8002cb2:	e047      	b.n	8002d44 <HAL_UART_DMAStop+0x120>
        }
      }
    }

    UART_EndTxTransfer(huart);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	0018      	movs	r0, r3
 8002cb8:	f000 ffa6 	bl	8003c08 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	689b      	ldr	r3, [r3, #8]
 8002cc2:	2240      	movs	r2, #64	; 0x40
 8002cc4:	4013      	ands	r3, r2
 8002cc6:	2b40      	cmp	r3, #64	; 0x40
 8002cc8:	d13b      	bne.n	8002d42 <HAL_UART_DMAStop+0x11e>
 8002cca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ccc:	2b22      	cmp	r3, #34	; 0x22
 8002cce:	d138      	bne.n	8002d42 <HAL_UART_DMAStop+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002cd0:	f3ef 8310 	mrs	r3, PRIMASK
 8002cd4:	60bb      	str	r3, [r7, #8]
  return(result);
 8002cd6:	68bb      	ldr	r3, [r7, #8]
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002cd8:	623b      	str	r3, [r7, #32]
 8002cda:	2301      	movs	r3, #1
 8002cdc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	f383 8810 	msr	PRIMASK, r3
}
 8002ce4:	46c0      	nop			; (mov r8, r8)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	689a      	ldr	r2, [r3, #8]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	2140      	movs	r1, #64	; 0x40
 8002cf2:	438a      	bics	r2, r1
 8002cf4:	609a      	str	r2, [r3, #8]
 8002cf6:	6a3b      	ldr	r3, [r7, #32]
 8002cf8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cfa:	693b      	ldr	r3, [r7, #16]
 8002cfc:	f383 8810 	msr	PRIMASK, r3
}
 8002d00:	46c0      	nop			; (mov r8, r8)

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2280      	movs	r2, #128	; 0x80
 8002d06:	589b      	ldr	r3, [r3, r2]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d016      	beq.n	8002d3a <HAL_UART_DMAStop+0x116>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2280      	movs	r2, #128	; 0x80
 8002d10:	589b      	ldr	r3, [r3, r2]
 8002d12:	0018      	movs	r0, r3
 8002d14:	f7fe fa0a 	bl	800112c <HAL_DMA_Abort>
 8002d18:	1e03      	subs	r3, r0, #0
 8002d1a:	d00e      	beq.n	8002d3a <HAL_UART_DMAStop+0x116>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2280      	movs	r2, #128	; 0x80
 8002d20:	589b      	ldr	r3, [r3, r2]
 8002d22:	0018      	movs	r0, r3
 8002d24:	f7fe fb80 	bl	8001428 <HAL_DMA_GetError>
 8002d28:	0003      	movs	r3, r0
 8002d2a:	2b20      	cmp	r3, #32
 8002d2c:	d105      	bne.n	8002d3a <HAL_UART_DMAStop+0x116>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2290      	movs	r2, #144	; 0x90
 8002d32:	2110      	movs	r1, #16
 8002d34:	5099      	str	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002d36:	2303      	movs	r3, #3
 8002d38:	e004      	b.n	8002d44 <HAL_UART_DMAStop+0x120>
        }
      }
    }

    UART_EndRxTransfer(huart);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	0018      	movs	r0, r3
 8002d3e:	f000 ffa3 	bl	8003c88 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8002d42:	2300      	movs	r3, #0
}
 8002d44:	0018      	movs	r0, r3
 8002d46:	46bd      	mov	sp, r7
 8002d48:	b00c      	add	sp, #48	; 0x30
 8002d4a:	bd80      	pop	{r7, pc}

08002d4c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002d4c:	b5b0      	push	{r4, r5, r7, lr}
 8002d4e:	b0aa      	sub	sp, #168	; 0xa8
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	69db      	ldr	r3, [r3, #28]
 8002d5a:	22a4      	movs	r2, #164	; 0xa4
 8002d5c:	18b9      	adds	r1, r7, r2
 8002d5e:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	20a0      	movs	r0, #160	; 0xa0
 8002d68:	1839      	adds	r1, r7, r0
 8002d6a:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	689b      	ldr	r3, [r3, #8]
 8002d72:	249c      	movs	r4, #156	; 0x9c
 8002d74:	1939      	adds	r1, r7, r4
 8002d76:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002d78:	0011      	movs	r1, r2
 8002d7a:	18bb      	adds	r3, r7, r2
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4aa2      	ldr	r2, [pc, #648]	; (8003008 <HAL_UART_IRQHandler+0x2bc>)
 8002d80:	4013      	ands	r3, r2
 8002d82:	2298      	movs	r2, #152	; 0x98
 8002d84:	18bd      	adds	r5, r7, r2
 8002d86:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8002d88:	18bb      	adds	r3, r7, r2
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d11a      	bne.n	8002dc6 <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002d90:	187b      	adds	r3, r7, r1
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	2220      	movs	r2, #32
 8002d96:	4013      	ands	r3, r2
 8002d98:	d015      	beq.n	8002dc6 <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002d9a:	183b      	adds	r3, r7, r0
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	2220      	movs	r2, #32
 8002da0:	4013      	ands	r3, r2
 8002da2:	d105      	bne.n	8002db0 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002da4:	193b      	adds	r3, r7, r4
 8002da6:	681a      	ldr	r2, [r3, #0]
 8002da8:	2380      	movs	r3, #128	; 0x80
 8002daa:	055b      	lsls	r3, r3, #21
 8002dac:	4013      	ands	r3, r2
 8002dae:	d00a      	beq.n	8002dc6 <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d100      	bne.n	8002dba <HAL_UART_IRQHandler+0x6e>
 8002db8:	e2dc      	b.n	8003374 <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dbe:	687a      	ldr	r2, [r7, #4]
 8002dc0:	0010      	movs	r0, r2
 8002dc2:	4798      	blx	r3
      }
      return;
 8002dc4:	e2d6      	b.n	8003374 <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002dc6:	2398      	movs	r3, #152	; 0x98
 8002dc8:	18fb      	adds	r3, r7, r3
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d100      	bne.n	8002dd2 <HAL_UART_IRQHandler+0x86>
 8002dd0:	e122      	b.n	8003018 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8002dd2:	239c      	movs	r3, #156	; 0x9c
 8002dd4:	18fb      	adds	r3, r7, r3
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4a8c      	ldr	r2, [pc, #560]	; (800300c <HAL_UART_IRQHandler+0x2c0>)
 8002dda:	4013      	ands	r3, r2
 8002ddc:	d106      	bne.n	8002dec <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8002dde:	23a0      	movs	r3, #160	; 0xa0
 8002de0:	18fb      	adds	r3, r7, r3
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a8a      	ldr	r2, [pc, #552]	; (8003010 <HAL_UART_IRQHandler+0x2c4>)
 8002de6:	4013      	ands	r3, r2
 8002de8:	d100      	bne.n	8002dec <HAL_UART_IRQHandler+0xa0>
 8002dea:	e115      	b.n	8003018 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002dec:	23a4      	movs	r3, #164	; 0xa4
 8002dee:	18fb      	adds	r3, r7, r3
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	2201      	movs	r2, #1
 8002df4:	4013      	ands	r3, r2
 8002df6:	d012      	beq.n	8002e1e <HAL_UART_IRQHandler+0xd2>
 8002df8:	23a0      	movs	r3, #160	; 0xa0
 8002dfa:	18fb      	adds	r3, r7, r3
 8002dfc:	681a      	ldr	r2, [r3, #0]
 8002dfe:	2380      	movs	r3, #128	; 0x80
 8002e00:	005b      	lsls	r3, r3, #1
 8002e02:	4013      	ands	r3, r2
 8002e04:	d00b      	beq.n	8002e1e <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	2201      	movs	r2, #1
 8002e0c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2290      	movs	r2, #144	; 0x90
 8002e12:	589b      	ldr	r3, [r3, r2]
 8002e14:	2201      	movs	r2, #1
 8002e16:	431a      	orrs	r2, r3
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2190      	movs	r1, #144	; 0x90
 8002e1c:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002e1e:	23a4      	movs	r3, #164	; 0xa4
 8002e20:	18fb      	adds	r3, r7, r3
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	2202      	movs	r2, #2
 8002e26:	4013      	ands	r3, r2
 8002e28:	d011      	beq.n	8002e4e <HAL_UART_IRQHandler+0x102>
 8002e2a:	239c      	movs	r3, #156	; 0x9c
 8002e2c:	18fb      	adds	r3, r7, r3
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	2201      	movs	r2, #1
 8002e32:	4013      	ands	r3, r2
 8002e34:	d00b      	beq.n	8002e4e <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	2202      	movs	r2, #2
 8002e3c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2290      	movs	r2, #144	; 0x90
 8002e42:	589b      	ldr	r3, [r3, r2]
 8002e44:	2204      	movs	r2, #4
 8002e46:	431a      	orrs	r2, r3
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2190      	movs	r1, #144	; 0x90
 8002e4c:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002e4e:	23a4      	movs	r3, #164	; 0xa4
 8002e50:	18fb      	adds	r3, r7, r3
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	2204      	movs	r2, #4
 8002e56:	4013      	ands	r3, r2
 8002e58:	d011      	beq.n	8002e7e <HAL_UART_IRQHandler+0x132>
 8002e5a:	239c      	movs	r3, #156	; 0x9c
 8002e5c:	18fb      	adds	r3, r7, r3
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	2201      	movs	r2, #1
 8002e62:	4013      	ands	r3, r2
 8002e64:	d00b      	beq.n	8002e7e <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	2204      	movs	r2, #4
 8002e6c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2290      	movs	r2, #144	; 0x90
 8002e72:	589b      	ldr	r3, [r3, r2]
 8002e74:	2202      	movs	r2, #2
 8002e76:	431a      	orrs	r2, r3
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2190      	movs	r1, #144	; 0x90
 8002e7c:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002e7e:	23a4      	movs	r3, #164	; 0xa4
 8002e80:	18fb      	adds	r3, r7, r3
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	2208      	movs	r2, #8
 8002e86:	4013      	ands	r3, r2
 8002e88:	d017      	beq.n	8002eba <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002e8a:	23a0      	movs	r3, #160	; 0xa0
 8002e8c:	18fb      	adds	r3, r7, r3
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	2220      	movs	r2, #32
 8002e92:	4013      	ands	r3, r2
 8002e94:	d105      	bne.n	8002ea2 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8002e96:	239c      	movs	r3, #156	; 0x9c
 8002e98:	18fb      	adds	r3, r7, r3
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a5b      	ldr	r2, [pc, #364]	; (800300c <HAL_UART_IRQHandler+0x2c0>)
 8002e9e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002ea0:	d00b      	beq.n	8002eba <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	2208      	movs	r2, #8
 8002ea8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2290      	movs	r2, #144	; 0x90
 8002eae:	589b      	ldr	r3, [r3, r2]
 8002eb0:	2208      	movs	r2, #8
 8002eb2:	431a      	orrs	r2, r3
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2190      	movs	r1, #144	; 0x90
 8002eb8:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002eba:	23a4      	movs	r3, #164	; 0xa4
 8002ebc:	18fb      	adds	r3, r7, r3
 8002ebe:	681a      	ldr	r2, [r3, #0]
 8002ec0:	2380      	movs	r3, #128	; 0x80
 8002ec2:	011b      	lsls	r3, r3, #4
 8002ec4:	4013      	ands	r3, r2
 8002ec6:	d013      	beq.n	8002ef0 <HAL_UART_IRQHandler+0x1a4>
 8002ec8:	23a0      	movs	r3, #160	; 0xa0
 8002eca:	18fb      	adds	r3, r7, r3
 8002ecc:	681a      	ldr	r2, [r3, #0]
 8002ece:	2380      	movs	r3, #128	; 0x80
 8002ed0:	04db      	lsls	r3, r3, #19
 8002ed2:	4013      	ands	r3, r2
 8002ed4:	d00c      	beq.n	8002ef0 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	2280      	movs	r2, #128	; 0x80
 8002edc:	0112      	lsls	r2, r2, #4
 8002ede:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2290      	movs	r2, #144	; 0x90
 8002ee4:	589b      	ldr	r3, [r3, r2]
 8002ee6:	2220      	movs	r2, #32
 8002ee8:	431a      	orrs	r2, r3
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2190      	movs	r1, #144	; 0x90
 8002eee:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2290      	movs	r2, #144	; 0x90
 8002ef4:	589b      	ldr	r3, [r3, r2]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d100      	bne.n	8002efc <HAL_UART_IRQHandler+0x1b0>
 8002efa:	e23d      	b.n	8003378 <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002efc:	23a4      	movs	r3, #164	; 0xa4
 8002efe:	18fb      	adds	r3, r7, r3
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	2220      	movs	r2, #32
 8002f04:	4013      	ands	r3, r2
 8002f06:	d015      	beq.n	8002f34 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002f08:	23a0      	movs	r3, #160	; 0xa0
 8002f0a:	18fb      	adds	r3, r7, r3
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	2220      	movs	r2, #32
 8002f10:	4013      	ands	r3, r2
 8002f12:	d106      	bne.n	8002f22 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002f14:	239c      	movs	r3, #156	; 0x9c
 8002f16:	18fb      	adds	r3, r7, r3
 8002f18:	681a      	ldr	r2, [r3, #0]
 8002f1a:	2380      	movs	r3, #128	; 0x80
 8002f1c:	055b      	lsls	r3, r3, #21
 8002f1e:	4013      	ands	r3, r2
 8002f20:	d008      	beq.n	8002f34 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d004      	beq.n	8002f34 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f2e:	687a      	ldr	r2, [r7, #4]
 8002f30:	0010      	movs	r0, r2
 8002f32:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2290      	movs	r2, #144	; 0x90
 8002f38:	589b      	ldr	r3, [r3, r2]
 8002f3a:	2194      	movs	r1, #148	; 0x94
 8002f3c:	187a      	adds	r2, r7, r1
 8002f3e:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	689b      	ldr	r3, [r3, #8]
 8002f46:	2240      	movs	r2, #64	; 0x40
 8002f48:	4013      	ands	r3, r2
 8002f4a:	2b40      	cmp	r3, #64	; 0x40
 8002f4c:	d004      	beq.n	8002f58 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002f4e:	187b      	adds	r3, r7, r1
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	2228      	movs	r2, #40	; 0x28
 8002f54:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002f56:	d04c      	beq.n	8002ff2 <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	0018      	movs	r0, r3
 8002f5c:	f000 fe94 	bl	8003c88 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	689b      	ldr	r3, [r3, #8]
 8002f66:	2240      	movs	r2, #64	; 0x40
 8002f68:	4013      	ands	r3, r2
 8002f6a:	2b40      	cmp	r3, #64	; 0x40
 8002f6c:	d13c      	bne.n	8002fe8 <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f6e:	f3ef 8310 	mrs	r3, PRIMASK
 8002f72:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8002f74:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002f76:	2090      	movs	r0, #144	; 0x90
 8002f78:	183a      	adds	r2, r7, r0
 8002f7a:	6013      	str	r3, [r2, #0]
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f80:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002f82:	f383 8810 	msr	PRIMASK, r3
}
 8002f86:	46c0      	nop			; (mov r8, r8)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	689a      	ldr	r2, [r3, #8]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	2140      	movs	r1, #64	; 0x40
 8002f94:	438a      	bics	r2, r1
 8002f96:	609a      	str	r2, [r3, #8]
 8002f98:	183b      	adds	r3, r7, r0
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f9e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002fa0:	f383 8810 	msr	PRIMASK, r3
}
 8002fa4:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2280      	movs	r2, #128	; 0x80
 8002faa:	589b      	ldr	r3, [r3, r2]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d016      	beq.n	8002fde <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2280      	movs	r2, #128	; 0x80
 8002fb4:	589b      	ldr	r3, [r3, r2]
 8002fb6:	4a17      	ldr	r2, [pc, #92]	; (8003014 <HAL_UART_IRQHandler+0x2c8>)
 8002fb8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2280      	movs	r2, #128	; 0x80
 8002fbe:	589b      	ldr	r3, [r3, r2]
 8002fc0:	0018      	movs	r0, r3
 8002fc2:	f7fe f915 	bl	80011f0 <HAL_DMA_Abort_IT>
 8002fc6:	1e03      	subs	r3, r0, #0
 8002fc8:	d01c      	beq.n	8003004 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2280      	movs	r2, #128	; 0x80
 8002fce:	589b      	ldr	r3, [r3, r2]
 8002fd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fd2:	687a      	ldr	r2, [r7, #4]
 8002fd4:	2180      	movs	r1, #128	; 0x80
 8002fd6:	5852      	ldr	r2, [r2, r1]
 8002fd8:	0010      	movs	r0, r2
 8002fda:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fdc:	e012      	b.n	8003004 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	0018      	movs	r0, r3
 8002fe2:	f7fd fb43 	bl	800066c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fe6:	e00d      	b.n	8003004 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	0018      	movs	r0, r3
 8002fec:	f7fd fb3e 	bl	800066c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ff0:	e008      	b.n	8003004 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	0018      	movs	r0, r3
 8002ff6:	f7fd fb39 	bl	800066c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2290      	movs	r2, #144	; 0x90
 8002ffe:	2100      	movs	r1, #0
 8003000:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8003002:	e1b9      	b.n	8003378 <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003004:	46c0      	nop			; (mov r8, r8)
    return;
 8003006:	e1b7      	b.n	8003378 <HAL_UART_IRQHandler+0x62c>
 8003008:	0000080f 	.word	0x0000080f
 800300c:	10000001 	.word	0x10000001
 8003010:	04000120 	.word	0x04000120
 8003014:	08004005 	.word	0x08004005

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800301c:	2b01      	cmp	r3, #1
 800301e:	d000      	beq.n	8003022 <HAL_UART_IRQHandler+0x2d6>
 8003020:	e13e      	b.n	80032a0 <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003022:	23a4      	movs	r3, #164	; 0xa4
 8003024:	18fb      	adds	r3, r7, r3
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	2210      	movs	r2, #16
 800302a:	4013      	ands	r3, r2
 800302c:	d100      	bne.n	8003030 <HAL_UART_IRQHandler+0x2e4>
 800302e:	e137      	b.n	80032a0 <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003030:	23a0      	movs	r3, #160	; 0xa0
 8003032:	18fb      	adds	r3, r7, r3
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	2210      	movs	r2, #16
 8003038:	4013      	ands	r3, r2
 800303a:	d100      	bne.n	800303e <HAL_UART_IRQHandler+0x2f2>
 800303c:	e130      	b.n	80032a0 <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	2210      	movs	r2, #16
 8003044:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	2240      	movs	r2, #64	; 0x40
 800304e:	4013      	ands	r3, r2
 8003050:	2b40      	cmp	r3, #64	; 0x40
 8003052:	d000      	beq.n	8003056 <HAL_UART_IRQHandler+0x30a>
 8003054:	e0a4      	b.n	80031a0 <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2280      	movs	r2, #128	; 0x80
 800305a:	589b      	ldr	r3, [r3, r2]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	685a      	ldr	r2, [r3, #4]
 8003060:	217e      	movs	r1, #126	; 0x7e
 8003062:	187b      	adds	r3, r7, r1
 8003064:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8003066:	187b      	adds	r3, r7, r1
 8003068:	881b      	ldrh	r3, [r3, #0]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d100      	bne.n	8003070 <HAL_UART_IRQHandler+0x324>
 800306e:	e185      	b.n	800337c <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	225c      	movs	r2, #92	; 0x5c
 8003074:	5a9b      	ldrh	r3, [r3, r2]
 8003076:	187a      	adds	r2, r7, r1
 8003078:	8812      	ldrh	r2, [r2, #0]
 800307a:	429a      	cmp	r2, r3
 800307c:	d300      	bcc.n	8003080 <HAL_UART_IRQHandler+0x334>
 800307e:	e17d      	b.n	800337c <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	187a      	adds	r2, r7, r1
 8003084:	215e      	movs	r1, #94	; 0x5e
 8003086:	8812      	ldrh	r2, [r2, #0]
 8003088:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2280      	movs	r2, #128	; 0x80
 800308e:	589b      	ldr	r3, [r3, r2]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	2220      	movs	r2, #32
 8003096:	4013      	ands	r3, r2
 8003098:	d170      	bne.n	800317c <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800309a:	f3ef 8310 	mrs	r3, PRIMASK
 800309e:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80030a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80030a2:	67bb      	str	r3, [r7, #120]	; 0x78
 80030a4:	2301      	movs	r3, #1
 80030a6:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030aa:	f383 8810 	msr	PRIMASK, r3
}
 80030ae:	46c0      	nop			; (mov r8, r8)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	681a      	ldr	r2, [r3, #0]
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	49b4      	ldr	r1, [pc, #720]	; (800338c <HAL_UART_IRQHandler+0x640>)
 80030bc:	400a      	ands	r2, r1
 80030be:	601a      	str	r2, [r3, #0]
 80030c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80030c2:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030c6:	f383 8810 	msr	PRIMASK, r3
}
 80030ca:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80030cc:	f3ef 8310 	mrs	r3, PRIMASK
 80030d0:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 80030d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030d4:	677b      	str	r3, [r7, #116]	; 0x74
 80030d6:	2301      	movs	r3, #1
 80030d8:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030dc:	f383 8810 	msr	PRIMASK, r3
}
 80030e0:	46c0      	nop			; (mov r8, r8)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	689a      	ldr	r2, [r3, #8]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	2101      	movs	r1, #1
 80030ee:	438a      	bics	r2, r1
 80030f0:	609a      	str	r2, [r3, #8]
 80030f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80030f4:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80030f8:	f383 8810 	msr	PRIMASK, r3
}
 80030fc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80030fe:	f3ef 8310 	mrs	r3, PRIMASK
 8003102:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8003104:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003106:	673b      	str	r3, [r7, #112]	; 0x70
 8003108:	2301      	movs	r3, #1
 800310a:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800310c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800310e:	f383 8810 	msr	PRIMASK, r3
}
 8003112:	46c0      	nop			; (mov r8, r8)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	689a      	ldr	r2, [r3, #8]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	2140      	movs	r1, #64	; 0x40
 8003120:	438a      	bics	r2, r1
 8003122:	609a      	str	r2, [r3, #8]
 8003124:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003126:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003128:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800312a:	f383 8810 	msr	PRIMASK, r3
}
 800312e:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	228c      	movs	r2, #140	; 0x8c
 8003134:	2120      	movs	r1, #32
 8003136:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2200      	movs	r2, #0
 800313c:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800313e:	f3ef 8310 	mrs	r3, PRIMASK
 8003142:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8003144:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003146:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003148:	2301      	movs	r3, #1
 800314a:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800314c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800314e:	f383 8810 	msr	PRIMASK, r3
}
 8003152:	46c0      	nop			; (mov r8, r8)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	681a      	ldr	r2, [r3, #0]
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	2110      	movs	r1, #16
 8003160:	438a      	bics	r2, r1
 8003162:	601a      	str	r2, [r3, #0]
 8003164:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003166:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003168:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800316a:	f383 8810 	msr	PRIMASK, r3
}
 800316e:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2280      	movs	r2, #128	; 0x80
 8003174:	589b      	ldr	r3, [r3, r2]
 8003176:	0018      	movs	r0, r3
 8003178:	f7fd ffd8 	bl	800112c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2202      	movs	r2, #2
 8003180:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	225c      	movs	r2, #92	; 0x5c
 8003186:	5a9a      	ldrh	r2, [r3, r2]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	215e      	movs	r1, #94	; 0x5e
 800318c:	5a5b      	ldrh	r3, [r3, r1]
 800318e:	b29b      	uxth	r3, r3
 8003190:	1ad3      	subs	r3, r2, r3
 8003192:	b29a      	uxth	r2, r3
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	0011      	movs	r1, r2
 8003198:	0018      	movs	r0, r3
 800319a:	f7fd faa1 	bl	80006e0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800319e:	e0ed      	b.n	800337c <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	225c      	movs	r2, #92	; 0x5c
 80031a4:	5a99      	ldrh	r1, [r3, r2]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	225e      	movs	r2, #94	; 0x5e
 80031aa:	5a9b      	ldrh	r3, [r3, r2]
 80031ac:	b29a      	uxth	r2, r3
 80031ae:	208e      	movs	r0, #142	; 0x8e
 80031b0:	183b      	adds	r3, r7, r0
 80031b2:	1a8a      	subs	r2, r1, r2
 80031b4:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	225e      	movs	r2, #94	; 0x5e
 80031ba:	5a9b      	ldrh	r3, [r3, r2]
 80031bc:	b29b      	uxth	r3, r3
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d100      	bne.n	80031c4 <HAL_UART_IRQHandler+0x478>
 80031c2:	e0dd      	b.n	8003380 <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 80031c4:	183b      	adds	r3, r7, r0
 80031c6:	881b      	ldrh	r3, [r3, #0]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d100      	bne.n	80031ce <HAL_UART_IRQHandler+0x482>
 80031cc:	e0d8      	b.n	8003380 <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80031ce:	f3ef 8310 	mrs	r3, PRIMASK
 80031d2:	60fb      	str	r3, [r7, #12]
  return(result);
 80031d4:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80031d6:	2488      	movs	r4, #136	; 0x88
 80031d8:	193a      	adds	r2, r7, r4
 80031da:	6013      	str	r3, [r2, #0]
 80031dc:	2301      	movs	r3, #1
 80031de:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031e0:	693b      	ldr	r3, [r7, #16]
 80031e2:	f383 8810 	msr	PRIMASK, r3
}
 80031e6:	46c0      	nop			; (mov r8, r8)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	681a      	ldr	r2, [r3, #0]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4967      	ldr	r1, [pc, #412]	; (8003390 <HAL_UART_IRQHandler+0x644>)
 80031f4:	400a      	ands	r2, r1
 80031f6:	601a      	str	r2, [r3, #0]
 80031f8:	193b      	adds	r3, r7, r4
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031fe:	697b      	ldr	r3, [r7, #20]
 8003200:	f383 8810 	msr	PRIMASK, r3
}
 8003204:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003206:	f3ef 8310 	mrs	r3, PRIMASK
 800320a:	61bb      	str	r3, [r7, #24]
  return(result);
 800320c:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800320e:	2484      	movs	r4, #132	; 0x84
 8003210:	193a      	adds	r2, r7, r4
 8003212:	6013      	str	r3, [r2, #0]
 8003214:	2301      	movs	r3, #1
 8003216:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003218:	69fb      	ldr	r3, [r7, #28]
 800321a:	f383 8810 	msr	PRIMASK, r3
}
 800321e:	46c0      	nop			; (mov r8, r8)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	689a      	ldr	r2, [r3, #8]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	495a      	ldr	r1, [pc, #360]	; (8003394 <HAL_UART_IRQHandler+0x648>)
 800322c:	400a      	ands	r2, r1
 800322e:	609a      	str	r2, [r3, #8]
 8003230:	193b      	adds	r3, r7, r4
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003236:	6a3b      	ldr	r3, [r7, #32]
 8003238:	f383 8810 	msr	PRIMASK, r3
}
 800323c:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	228c      	movs	r2, #140	; 0x8c
 8003242:	2120      	movs	r1, #32
 8003244:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2200      	movs	r2, #0
 800324a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2200      	movs	r2, #0
 8003250:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003252:	f3ef 8310 	mrs	r3, PRIMASK
 8003256:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003258:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800325a:	2480      	movs	r4, #128	; 0x80
 800325c:	193a      	adds	r2, r7, r4
 800325e:	6013      	str	r3, [r2, #0]
 8003260:	2301      	movs	r3, #1
 8003262:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003266:	f383 8810 	msr	PRIMASK, r3
}
 800326a:	46c0      	nop			; (mov r8, r8)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	681a      	ldr	r2, [r3, #0]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	2110      	movs	r1, #16
 8003278:	438a      	bics	r2, r1
 800327a:	601a      	str	r2, [r3, #0]
 800327c:	193b      	adds	r3, r7, r4
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003284:	f383 8810 	msr	PRIMASK, r3
}
 8003288:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2202      	movs	r2, #2
 800328e:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003290:	183b      	adds	r3, r7, r0
 8003292:	881a      	ldrh	r2, [r3, #0]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	0011      	movs	r1, r2
 8003298:	0018      	movs	r0, r3
 800329a:	f7fd fa21 	bl	80006e0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800329e:	e06f      	b.n	8003380 <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80032a0:	23a4      	movs	r3, #164	; 0xa4
 80032a2:	18fb      	adds	r3, r7, r3
 80032a4:	681a      	ldr	r2, [r3, #0]
 80032a6:	2380      	movs	r3, #128	; 0x80
 80032a8:	035b      	lsls	r3, r3, #13
 80032aa:	4013      	ands	r3, r2
 80032ac:	d010      	beq.n	80032d0 <HAL_UART_IRQHandler+0x584>
 80032ae:	239c      	movs	r3, #156	; 0x9c
 80032b0:	18fb      	adds	r3, r7, r3
 80032b2:	681a      	ldr	r2, [r3, #0]
 80032b4:	2380      	movs	r3, #128	; 0x80
 80032b6:	03db      	lsls	r3, r3, #15
 80032b8:	4013      	ands	r3, r2
 80032ba:	d009      	beq.n	80032d0 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	2280      	movs	r2, #128	; 0x80
 80032c2:	0352      	lsls	r2, r2, #13
 80032c4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	0018      	movs	r0, r3
 80032ca:	f000 fede 	bl	800408a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80032ce:	e05a      	b.n	8003386 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80032d0:	23a4      	movs	r3, #164	; 0xa4
 80032d2:	18fb      	adds	r3, r7, r3
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	2280      	movs	r2, #128	; 0x80
 80032d8:	4013      	ands	r3, r2
 80032da:	d016      	beq.n	800330a <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80032dc:	23a0      	movs	r3, #160	; 0xa0
 80032de:	18fb      	adds	r3, r7, r3
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	2280      	movs	r2, #128	; 0x80
 80032e4:	4013      	ands	r3, r2
 80032e6:	d106      	bne.n	80032f6 <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80032e8:	239c      	movs	r3, #156	; 0x9c
 80032ea:	18fb      	adds	r3, r7, r3
 80032ec:	681a      	ldr	r2, [r3, #0]
 80032ee:	2380      	movs	r3, #128	; 0x80
 80032f0:	041b      	lsls	r3, r3, #16
 80032f2:	4013      	ands	r3, r2
 80032f4:	d009      	beq.n	800330a <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d042      	beq.n	8003384 <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003302:	687a      	ldr	r2, [r7, #4]
 8003304:	0010      	movs	r0, r2
 8003306:	4798      	blx	r3
    }
    return;
 8003308:	e03c      	b.n	8003384 <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800330a:	23a4      	movs	r3, #164	; 0xa4
 800330c:	18fb      	adds	r3, r7, r3
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	2240      	movs	r2, #64	; 0x40
 8003312:	4013      	ands	r3, r2
 8003314:	d00a      	beq.n	800332c <HAL_UART_IRQHandler+0x5e0>
 8003316:	23a0      	movs	r3, #160	; 0xa0
 8003318:	18fb      	adds	r3, r7, r3
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	2240      	movs	r2, #64	; 0x40
 800331e:	4013      	ands	r3, r2
 8003320:	d004      	beq.n	800332c <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	0018      	movs	r0, r3
 8003326:	f000 fe84 	bl	8004032 <UART_EndTransmit_IT>
    return;
 800332a:	e02c      	b.n	8003386 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800332c:	23a4      	movs	r3, #164	; 0xa4
 800332e:	18fb      	adds	r3, r7, r3
 8003330:	681a      	ldr	r2, [r3, #0]
 8003332:	2380      	movs	r3, #128	; 0x80
 8003334:	041b      	lsls	r3, r3, #16
 8003336:	4013      	ands	r3, r2
 8003338:	d00b      	beq.n	8003352 <HAL_UART_IRQHandler+0x606>
 800333a:	23a0      	movs	r3, #160	; 0xa0
 800333c:	18fb      	adds	r3, r7, r3
 800333e:	681a      	ldr	r2, [r3, #0]
 8003340:	2380      	movs	r3, #128	; 0x80
 8003342:	05db      	lsls	r3, r3, #23
 8003344:	4013      	ands	r3, r2
 8003346:	d004      	beq.n	8003352 <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	0018      	movs	r0, r3
 800334c:	f000 fead 	bl	80040aa <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003350:	e019      	b.n	8003386 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8003352:	23a4      	movs	r3, #164	; 0xa4
 8003354:	18fb      	adds	r3, r7, r3
 8003356:	681a      	ldr	r2, [r3, #0]
 8003358:	2380      	movs	r3, #128	; 0x80
 800335a:	045b      	lsls	r3, r3, #17
 800335c:	4013      	ands	r3, r2
 800335e:	d012      	beq.n	8003386 <HAL_UART_IRQHandler+0x63a>
 8003360:	23a0      	movs	r3, #160	; 0xa0
 8003362:	18fb      	adds	r3, r7, r3
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	2b00      	cmp	r3, #0
 8003368:	da0d      	bge.n	8003386 <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	0018      	movs	r0, r3
 800336e:	f000 fe94 	bl	800409a <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003372:	e008      	b.n	8003386 <HAL_UART_IRQHandler+0x63a>
      return;
 8003374:	46c0      	nop			; (mov r8, r8)
 8003376:	e006      	b.n	8003386 <HAL_UART_IRQHandler+0x63a>
    return;
 8003378:	46c0      	nop			; (mov r8, r8)
 800337a:	e004      	b.n	8003386 <HAL_UART_IRQHandler+0x63a>
      return;
 800337c:	46c0      	nop			; (mov r8, r8)
 800337e:	e002      	b.n	8003386 <HAL_UART_IRQHandler+0x63a>
      return;
 8003380:	46c0      	nop			; (mov r8, r8)
 8003382:	e000      	b.n	8003386 <HAL_UART_IRQHandler+0x63a>
    return;
 8003384:	46c0      	nop			; (mov r8, r8)
  }
}
 8003386:	46bd      	mov	sp, r7
 8003388:	b02a      	add	sp, #168	; 0xa8
 800338a:	bdb0      	pop	{r4, r5, r7, pc}
 800338c:	fffffeff 	.word	0xfffffeff
 8003390:	fffffedf 	.word	0xfffffedf
 8003394:	effffffe 	.word	0xeffffffe

08003398 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b082      	sub	sp, #8
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80033a0:	46c0      	nop			; (mov r8, r8)
 80033a2:	46bd      	mov	sp, r7
 80033a4:	b002      	add	sp, #8
 80033a6:	bd80      	pop	{r7, pc}

080033a8 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b082      	sub	sp, #8
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80033b0:	46c0      	nop			; (mov r8, r8)
 80033b2:	46bd      	mov	sp, r7
 80033b4:	b002      	add	sp, #8
 80033b6:	bd80      	pop	{r7, pc}

080033b8 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b082      	sub	sp, #8
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80033c0:	46c0      	nop			; (mov r8, r8)
 80033c2:	46bd      	mov	sp, r7
 80033c4:	b002      	add	sp, #8
 80033c6:	bd80      	pop	{r7, pc}

080033c8 <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b082      	sub	sp, #8
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2290      	movs	r2, #144	; 0x90
 80033d4:	589b      	ldr	r3, [r3, r2]
}
 80033d6:	0018      	movs	r0, r3
 80033d8:	46bd      	mov	sp, r7
 80033da:	b002      	add	sp, #8
 80033dc:	bd80      	pop	{r7, pc}
	...

080033e0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b088      	sub	sp, #32
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80033e8:	231a      	movs	r3, #26
 80033ea:	18fb      	adds	r3, r7, r3
 80033ec:	2200      	movs	r2, #0
 80033ee:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	689a      	ldr	r2, [r3, #8]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	691b      	ldr	r3, [r3, #16]
 80033f8:	431a      	orrs	r2, r3
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	695b      	ldr	r3, [r3, #20]
 80033fe:	431a      	orrs	r2, r3
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	69db      	ldr	r3, [r3, #28]
 8003404:	4313      	orrs	r3, r2
 8003406:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4abc      	ldr	r2, [pc, #752]	; (8003700 <UART_SetConfig+0x320>)
 8003410:	4013      	ands	r3, r2
 8003412:	0019      	movs	r1, r3
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	69fa      	ldr	r2, [r7, #28]
 800341a:	430a      	orrs	r2, r1
 800341c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	4ab7      	ldr	r2, [pc, #732]	; (8003704 <UART_SetConfig+0x324>)
 8003426:	4013      	ands	r3, r2
 8003428:	0019      	movs	r1, r3
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	68da      	ldr	r2, [r3, #12]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	430a      	orrs	r2, r1
 8003434:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	699b      	ldr	r3, [r3, #24]
 800343a:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6a1b      	ldr	r3, [r3, #32]
 8003440:	69fa      	ldr	r2, [r7, #28]
 8003442:	4313      	orrs	r3, r2
 8003444:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	689b      	ldr	r3, [r3, #8]
 800344c:	4aae      	ldr	r2, [pc, #696]	; (8003708 <UART_SetConfig+0x328>)
 800344e:	4013      	ands	r3, r2
 8003450:	0019      	movs	r1, r3
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	69fa      	ldr	r2, [r7, #28]
 8003458:	430a      	orrs	r2, r1
 800345a:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003462:	220f      	movs	r2, #15
 8003464:	4393      	bics	r3, r2
 8003466:	0019      	movs	r1, r3
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	430a      	orrs	r2, r1
 8003472:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4aa4      	ldr	r2, [pc, #656]	; (800370c <UART_SetConfig+0x32c>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d127      	bne.n	80034ce <UART_SetConfig+0xee>
 800347e:	4ba4      	ldr	r3, [pc, #656]	; (8003710 <UART_SetConfig+0x330>)
 8003480:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003482:	2203      	movs	r2, #3
 8003484:	4013      	ands	r3, r2
 8003486:	2b03      	cmp	r3, #3
 8003488:	d017      	beq.n	80034ba <UART_SetConfig+0xda>
 800348a:	d81b      	bhi.n	80034c4 <UART_SetConfig+0xe4>
 800348c:	2b02      	cmp	r3, #2
 800348e:	d00a      	beq.n	80034a6 <UART_SetConfig+0xc6>
 8003490:	d818      	bhi.n	80034c4 <UART_SetConfig+0xe4>
 8003492:	2b00      	cmp	r3, #0
 8003494:	d002      	beq.n	800349c <UART_SetConfig+0xbc>
 8003496:	2b01      	cmp	r3, #1
 8003498:	d00a      	beq.n	80034b0 <UART_SetConfig+0xd0>
 800349a:	e013      	b.n	80034c4 <UART_SetConfig+0xe4>
 800349c:	231b      	movs	r3, #27
 800349e:	18fb      	adds	r3, r7, r3
 80034a0:	2200      	movs	r2, #0
 80034a2:	701a      	strb	r2, [r3, #0]
 80034a4:	e058      	b.n	8003558 <UART_SetConfig+0x178>
 80034a6:	231b      	movs	r3, #27
 80034a8:	18fb      	adds	r3, r7, r3
 80034aa:	2202      	movs	r2, #2
 80034ac:	701a      	strb	r2, [r3, #0]
 80034ae:	e053      	b.n	8003558 <UART_SetConfig+0x178>
 80034b0:	231b      	movs	r3, #27
 80034b2:	18fb      	adds	r3, r7, r3
 80034b4:	2204      	movs	r2, #4
 80034b6:	701a      	strb	r2, [r3, #0]
 80034b8:	e04e      	b.n	8003558 <UART_SetConfig+0x178>
 80034ba:	231b      	movs	r3, #27
 80034bc:	18fb      	adds	r3, r7, r3
 80034be:	2208      	movs	r2, #8
 80034c0:	701a      	strb	r2, [r3, #0]
 80034c2:	e049      	b.n	8003558 <UART_SetConfig+0x178>
 80034c4:	231b      	movs	r3, #27
 80034c6:	18fb      	adds	r3, r7, r3
 80034c8:	2210      	movs	r2, #16
 80034ca:	701a      	strb	r2, [r3, #0]
 80034cc:	e044      	b.n	8003558 <UART_SetConfig+0x178>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a90      	ldr	r2, [pc, #576]	; (8003714 <UART_SetConfig+0x334>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d127      	bne.n	8003528 <UART_SetConfig+0x148>
 80034d8:	4b8d      	ldr	r3, [pc, #564]	; (8003710 <UART_SetConfig+0x330>)
 80034da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034dc:	220c      	movs	r2, #12
 80034de:	4013      	ands	r3, r2
 80034e0:	2b0c      	cmp	r3, #12
 80034e2:	d017      	beq.n	8003514 <UART_SetConfig+0x134>
 80034e4:	d81b      	bhi.n	800351e <UART_SetConfig+0x13e>
 80034e6:	2b08      	cmp	r3, #8
 80034e8:	d00a      	beq.n	8003500 <UART_SetConfig+0x120>
 80034ea:	d818      	bhi.n	800351e <UART_SetConfig+0x13e>
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d002      	beq.n	80034f6 <UART_SetConfig+0x116>
 80034f0:	2b04      	cmp	r3, #4
 80034f2:	d00a      	beq.n	800350a <UART_SetConfig+0x12a>
 80034f4:	e013      	b.n	800351e <UART_SetConfig+0x13e>
 80034f6:	231b      	movs	r3, #27
 80034f8:	18fb      	adds	r3, r7, r3
 80034fa:	2200      	movs	r2, #0
 80034fc:	701a      	strb	r2, [r3, #0]
 80034fe:	e02b      	b.n	8003558 <UART_SetConfig+0x178>
 8003500:	231b      	movs	r3, #27
 8003502:	18fb      	adds	r3, r7, r3
 8003504:	2202      	movs	r2, #2
 8003506:	701a      	strb	r2, [r3, #0]
 8003508:	e026      	b.n	8003558 <UART_SetConfig+0x178>
 800350a:	231b      	movs	r3, #27
 800350c:	18fb      	adds	r3, r7, r3
 800350e:	2204      	movs	r2, #4
 8003510:	701a      	strb	r2, [r3, #0]
 8003512:	e021      	b.n	8003558 <UART_SetConfig+0x178>
 8003514:	231b      	movs	r3, #27
 8003516:	18fb      	adds	r3, r7, r3
 8003518:	2208      	movs	r2, #8
 800351a:	701a      	strb	r2, [r3, #0]
 800351c:	e01c      	b.n	8003558 <UART_SetConfig+0x178>
 800351e:	231b      	movs	r3, #27
 8003520:	18fb      	adds	r3, r7, r3
 8003522:	2210      	movs	r2, #16
 8003524:	701a      	strb	r2, [r3, #0]
 8003526:	e017      	b.n	8003558 <UART_SetConfig+0x178>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a7a      	ldr	r2, [pc, #488]	; (8003718 <UART_SetConfig+0x338>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d104      	bne.n	800353c <UART_SetConfig+0x15c>
 8003532:	231b      	movs	r3, #27
 8003534:	18fb      	adds	r3, r7, r3
 8003536:	2200      	movs	r2, #0
 8003538:	701a      	strb	r2, [r3, #0]
 800353a:	e00d      	b.n	8003558 <UART_SetConfig+0x178>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a76      	ldr	r2, [pc, #472]	; (800371c <UART_SetConfig+0x33c>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d104      	bne.n	8003550 <UART_SetConfig+0x170>
 8003546:	231b      	movs	r3, #27
 8003548:	18fb      	adds	r3, r7, r3
 800354a:	2200      	movs	r2, #0
 800354c:	701a      	strb	r2, [r3, #0]
 800354e:	e003      	b.n	8003558 <UART_SetConfig+0x178>
 8003550:	231b      	movs	r3, #27
 8003552:	18fb      	adds	r3, r7, r3
 8003554:	2210      	movs	r2, #16
 8003556:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	69da      	ldr	r2, [r3, #28]
 800355c:	2380      	movs	r3, #128	; 0x80
 800355e:	021b      	lsls	r3, r3, #8
 8003560:	429a      	cmp	r2, r3
 8003562:	d000      	beq.n	8003566 <UART_SetConfig+0x186>
 8003564:	e065      	b.n	8003632 <UART_SetConfig+0x252>
  {
    switch (clocksource)
 8003566:	231b      	movs	r3, #27
 8003568:	18fb      	adds	r3, r7, r3
 800356a:	781b      	ldrb	r3, [r3, #0]
 800356c:	2b08      	cmp	r3, #8
 800356e:	d015      	beq.n	800359c <UART_SetConfig+0x1bc>
 8003570:	dc18      	bgt.n	80035a4 <UART_SetConfig+0x1c4>
 8003572:	2b04      	cmp	r3, #4
 8003574:	d00d      	beq.n	8003592 <UART_SetConfig+0x1b2>
 8003576:	dc15      	bgt.n	80035a4 <UART_SetConfig+0x1c4>
 8003578:	2b00      	cmp	r3, #0
 800357a:	d002      	beq.n	8003582 <UART_SetConfig+0x1a2>
 800357c:	2b02      	cmp	r3, #2
 800357e:	d005      	beq.n	800358c <UART_SetConfig+0x1ac>
 8003580:	e010      	b.n	80035a4 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003582:	f7fe fe5d 	bl	8002240 <HAL_RCC_GetPCLK1Freq>
 8003586:	0003      	movs	r3, r0
 8003588:	617b      	str	r3, [r7, #20]
        break;
 800358a:	e012      	b.n	80035b2 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800358c:	4b64      	ldr	r3, [pc, #400]	; (8003720 <UART_SetConfig+0x340>)
 800358e:	617b      	str	r3, [r7, #20]
        break;
 8003590:	e00f      	b.n	80035b2 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003592:	f7fe fdc9 	bl	8002128 <HAL_RCC_GetSysClockFreq>
 8003596:	0003      	movs	r3, r0
 8003598:	617b      	str	r3, [r7, #20]
        break;
 800359a:	e00a      	b.n	80035b2 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800359c:	2380      	movs	r3, #128	; 0x80
 800359e:	021b      	lsls	r3, r3, #8
 80035a0:	617b      	str	r3, [r7, #20]
        break;
 80035a2:	e006      	b.n	80035b2 <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 80035a4:	2300      	movs	r3, #0
 80035a6:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80035a8:	231a      	movs	r3, #26
 80035aa:	18fb      	adds	r3, r7, r3
 80035ac:	2201      	movs	r2, #1
 80035ae:	701a      	strb	r2, [r3, #0]
        break;
 80035b0:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80035b2:	697b      	ldr	r3, [r7, #20]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d100      	bne.n	80035ba <UART_SetConfig+0x1da>
 80035b8:	e08d      	b.n	80036d6 <UART_SetConfig+0x2f6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80035be:	4b59      	ldr	r3, [pc, #356]	; (8003724 <UART_SetConfig+0x344>)
 80035c0:	0052      	lsls	r2, r2, #1
 80035c2:	5ad3      	ldrh	r3, [r2, r3]
 80035c4:	0019      	movs	r1, r3
 80035c6:	6978      	ldr	r0, [r7, #20]
 80035c8:	f7fc fd9e 	bl	8000108 <__udivsi3>
 80035cc:	0003      	movs	r3, r0
 80035ce:	005a      	lsls	r2, r3, #1
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	085b      	lsrs	r3, r3, #1
 80035d6:	18d2      	adds	r2, r2, r3
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	0019      	movs	r1, r3
 80035de:	0010      	movs	r0, r2
 80035e0:	f7fc fd92 	bl	8000108 <__udivsi3>
 80035e4:	0003      	movs	r3, r0
 80035e6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80035e8:	693b      	ldr	r3, [r7, #16]
 80035ea:	2b0f      	cmp	r3, #15
 80035ec:	d91c      	bls.n	8003628 <UART_SetConfig+0x248>
 80035ee:	693a      	ldr	r2, [r7, #16]
 80035f0:	2380      	movs	r3, #128	; 0x80
 80035f2:	025b      	lsls	r3, r3, #9
 80035f4:	429a      	cmp	r2, r3
 80035f6:	d217      	bcs.n	8003628 <UART_SetConfig+0x248>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80035f8:	693b      	ldr	r3, [r7, #16]
 80035fa:	b29a      	uxth	r2, r3
 80035fc:	200e      	movs	r0, #14
 80035fe:	183b      	adds	r3, r7, r0
 8003600:	210f      	movs	r1, #15
 8003602:	438a      	bics	r2, r1
 8003604:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	085b      	lsrs	r3, r3, #1
 800360a:	b29b      	uxth	r3, r3
 800360c:	2207      	movs	r2, #7
 800360e:	4013      	ands	r3, r2
 8003610:	b299      	uxth	r1, r3
 8003612:	183b      	adds	r3, r7, r0
 8003614:	183a      	adds	r2, r7, r0
 8003616:	8812      	ldrh	r2, [r2, #0]
 8003618:	430a      	orrs	r2, r1
 800361a:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	183a      	adds	r2, r7, r0
 8003622:	8812      	ldrh	r2, [r2, #0]
 8003624:	60da      	str	r2, [r3, #12]
 8003626:	e056      	b.n	80036d6 <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 8003628:	231a      	movs	r3, #26
 800362a:	18fb      	adds	r3, r7, r3
 800362c:	2201      	movs	r2, #1
 800362e:	701a      	strb	r2, [r3, #0]
 8003630:	e051      	b.n	80036d6 <UART_SetConfig+0x2f6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003632:	231b      	movs	r3, #27
 8003634:	18fb      	adds	r3, r7, r3
 8003636:	781b      	ldrb	r3, [r3, #0]
 8003638:	2b08      	cmp	r3, #8
 800363a:	d015      	beq.n	8003668 <UART_SetConfig+0x288>
 800363c:	dc18      	bgt.n	8003670 <UART_SetConfig+0x290>
 800363e:	2b04      	cmp	r3, #4
 8003640:	d00d      	beq.n	800365e <UART_SetConfig+0x27e>
 8003642:	dc15      	bgt.n	8003670 <UART_SetConfig+0x290>
 8003644:	2b00      	cmp	r3, #0
 8003646:	d002      	beq.n	800364e <UART_SetConfig+0x26e>
 8003648:	2b02      	cmp	r3, #2
 800364a:	d005      	beq.n	8003658 <UART_SetConfig+0x278>
 800364c:	e010      	b.n	8003670 <UART_SetConfig+0x290>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800364e:	f7fe fdf7 	bl	8002240 <HAL_RCC_GetPCLK1Freq>
 8003652:	0003      	movs	r3, r0
 8003654:	617b      	str	r3, [r7, #20]
        break;
 8003656:	e012      	b.n	800367e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003658:	4b31      	ldr	r3, [pc, #196]	; (8003720 <UART_SetConfig+0x340>)
 800365a:	617b      	str	r3, [r7, #20]
        break;
 800365c:	e00f      	b.n	800367e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800365e:	f7fe fd63 	bl	8002128 <HAL_RCC_GetSysClockFreq>
 8003662:	0003      	movs	r3, r0
 8003664:	617b      	str	r3, [r7, #20]
        break;
 8003666:	e00a      	b.n	800367e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003668:	2380      	movs	r3, #128	; 0x80
 800366a:	021b      	lsls	r3, r3, #8
 800366c:	617b      	str	r3, [r7, #20]
        break;
 800366e:	e006      	b.n	800367e <UART_SetConfig+0x29e>
      default:
        pclk = 0U;
 8003670:	2300      	movs	r3, #0
 8003672:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003674:	231a      	movs	r3, #26
 8003676:	18fb      	adds	r3, r7, r3
 8003678:	2201      	movs	r2, #1
 800367a:	701a      	strb	r2, [r3, #0]
        break;
 800367c:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800367e:	697b      	ldr	r3, [r7, #20]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d028      	beq.n	80036d6 <UART_SetConfig+0x2f6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003688:	4b26      	ldr	r3, [pc, #152]	; (8003724 <UART_SetConfig+0x344>)
 800368a:	0052      	lsls	r2, r2, #1
 800368c:	5ad3      	ldrh	r3, [r2, r3]
 800368e:	0019      	movs	r1, r3
 8003690:	6978      	ldr	r0, [r7, #20]
 8003692:	f7fc fd39 	bl	8000108 <__udivsi3>
 8003696:	0003      	movs	r3, r0
 8003698:	001a      	movs	r2, r3
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	085b      	lsrs	r3, r3, #1
 80036a0:	18d2      	adds	r2, r2, r3
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	0019      	movs	r1, r3
 80036a8:	0010      	movs	r0, r2
 80036aa:	f7fc fd2d 	bl	8000108 <__udivsi3>
 80036ae:	0003      	movs	r3, r0
 80036b0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80036b2:	693b      	ldr	r3, [r7, #16]
 80036b4:	2b0f      	cmp	r3, #15
 80036b6:	d90a      	bls.n	80036ce <UART_SetConfig+0x2ee>
 80036b8:	693a      	ldr	r2, [r7, #16]
 80036ba:	2380      	movs	r3, #128	; 0x80
 80036bc:	025b      	lsls	r3, r3, #9
 80036be:	429a      	cmp	r2, r3
 80036c0:	d205      	bcs.n	80036ce <UART_SetConfig+0x2ee>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80036c2:	693b      	ldr	r3, [r7, #16]
 80036c4:	b29a      	uxth	r2, r3
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	60da      	str	r2, [r3, #12]
 80036cc:	e003      	b.n	80036d6 <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 80036ce:	231a      	movs	r3, #26
 80036d0:	18fb      	adds	r3, r7, r3
 80036d2:	2201      	movs	r2, #1
 80036d4:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	226a      	movs	r2, #106	; 0x6a
 80036da:	2101      	movs	r1, #1
 80036dc:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2268      	movs	r2, #104	; 0x68
 80036e2:	2101      	movs	r1, #1
 80036e4:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2200      	movs	r2, #0
 80036ea:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2200      	movs	r2, #0
 80036f0:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80036f2:	231a      	movs	r3, #26
 80036f4:	18fb      	adds	r3, r7, r3
 80036f6:	781b      	ldrb	r3, [r3, #0]
}
 80036f8:	0018      	movs	r0, r3
 80036fa:	46bd      	mov	sp, r7
 80036fc:	b008      	add	sp, #32
 80036fe:	bd80      	pop	{r7, pc}
 8003700:	cfff69f3 	.word	0xcfff69f3
 8003704:	ffffcfff 	.word	0xffffcfff
 8003708:	11fff4ff 	.word	0x11fff4ff
 800370c:	40013800 	.word	0x40013800
 8003710:	40021000 	.word	0x40021000
 8003714:	40004400 	.word	0x40004400
 8003718:	40004800 	.word	0x40004800
 800371c:	40004c00 	.word	0x40004c00
 8003720:	00f42400 	.word	0x00f42400
 8003724:	080077a0 	.word	0x080077a0

08003728 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b082      	sub	sp, #8
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003734:	2201      	movs	r2, #1
 8003736:	4013      	ands	r3, r2
 8003738:	d00b      	beq.n	8003752 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	4a4a      	ldr	r2, [pc, #296]	; (800386c <UART_AdvFeatureConfig+0x144>)
 8003742:	4013      	ands	r3, r2
 8003744:	0019      	movs	r1, r3
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	430a      	orrs	r2, r1
 8003750:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003756:	2202      	movs	r2, #2
 8003758:	4013      	ands	r3, r2
 800375a:	d00b      	beq.n	8003774 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	4a43      	ldr	r2, [pc, #268]	; (8003870 <UART_AdvFeatureConfig+0x148>)
 8003764:	4013      	ands	r3, r2
 8003766:	0019      	movs	r1, r3
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	430a      	orrs	r2, r1
 8003772:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003778:	2204      	movs	r2, #4
 800377a:	4013      	ands	r3, r2
 800377c:	d00b      	beq.n	8003796 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	4a3b      	ldr	r2, [pc, #236]	; (8003874 <UART_AdvFeatureConfig+0x14c>)
 8003786:	4013      	ands	r3, r2
 8003788:	0019      	movs	r1, r3
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	430a      	orrs	r2, r1
 8003794:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800379a:	2208      	movs	r2, #8
 800379c:	4013      	ands	r3, r2
 800379e:	d00b      	beq.n	80037b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	4a34      	ldr	r2, [pc, #208]	; (8003878 <UART_AdvFeatureConfig+0x150>)
 80037a8:	4013      	ands	r3, r2
 80037aa:	0019      	movs	r1, r3
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	430a      	orrs	r2, r1
 80037b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037bc:	2210      	movs	r2, #16
 80037be:	4013      	ands	r3, r2
 80037c0:	d00b      	beq.n	80037da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	689b      	ldr	r3, [r3, #8]
 80037c8:	4a2c      	ldr	r2, [pc, #176]	; (800387c <UART_AdvFeatureConfig+0x154>)
 80037ca:	4013      	ands	r3, r2
 80037cc:	0019      	movs	r1, r3
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	430a      	orrs	r2, r1
 80037d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037de:	2220      	movs	r2, #32
 80037e0:	4013      	ands	r3, r2
 80037e2:	d00b      	beq.n	80037fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	689b      	ldr	r3, [r3, #8]
 80037ea:	4a25      	ldr	r2, [pc, #148]	; (8003880 <UART_AdvFeatureConfig+0x158>)
 80037ec:	4013      	ands	r3, r2
 80037ee:	0019      	movs	r1, r3
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	430a      	orrs	r2, r1
 80037fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003800:	2240      	movs	r2, #64	; 0x40
 8003802:	4013      	ands	r3, r2
 8003804:	d01d      	beq.n	8003842 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	4a1d      	ldr	r2, [pc, #116]	; (8003884 <UART_AdvFeatureConfig+0x15c>)
 800380e:	4013      	ands	r3, r2
 8003810:	0019      	movs	r1, r3
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	430a      	orrs	r2, r1
 800381c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003822:	2380      	movs	r3, #128	; 0x80
 8003824:	035b      	lsls	r3, r3, #13
 8003826:	429a      	cmp	r2, r3
 8003828:	d10b      	bne.n	8003842 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	4a15      	ldr	r2, [pc, #84]	; (8003888 <UART_AdvFeatureConfig+0x160>)
 8003832:	4013      	ands	r3, r2
 8003834:	0019      	movs	r1, r3
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	430a      	orrs	r2, r1
 8003840:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003846:	2280      	movs	r2, #128	; 0x80
 8003848:	4013      	ands	r3, r2
 800384a:	d00b      	beq.n	8003864 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	4a0e      	ldr	r2, [pc, #56]	; (800388c <UART_AdvFeatureConfig+0x164>)
 8003854:	4013      	ands	r3, r2
 8003856:	0019      	movs	r1, r3
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	430a      	orrs	r2, r1
 8003862:	605a      	str	r2, [r3, #4]
  }
}
 8003864:	46c0      	nop			; (mov r8, r8)
 8003866:	46bd      	mov	sp, r7
 8003868:	b002      	add	sp, #8
 800386a:	bd80      	pop	{r7, pc}
 800386c:	fffdffff 	.word	0xfffdffff
 8003870:	fffeffff 	.word	0xfffeffff
 8003874:	fffbffff 	.word	0xfffbffff
 8003878:	ffff7fff 	.word	0xffff7fff
 800387c:	ffffefff 	.word	0xffffefff
 8003880:	ffffdfff 	.word	0xffffdfff
 8003884:	ffefffff 	.word	0xffefffff
 8003888:	ff9fffff 	.word	0xff9fffff
 800388c:	fff7ffff 	.word	0xfff7ffff

08003890 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b086      	sub	sp, #24
 8003894:	af02      	add	r7, sp, #8
 8003896:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2290      	movs	r2, #144	; 0x90
 800389c:	2100      	movs	r1, #0
 800389e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80038a0:	f7fd fa7c 	bl	8000d9c <HAL_GetTick>
 80038a4:	0003      	movs	r3, r0
 80038a6:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	2208      	movs	r2, #8
 80038b0:	4013      	ands	r3, r2
 80038b2:	2b08      	cmp	r3, #8
 80038b4:	d10c      	bne.n	80038d0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	2280      	movs	r2, #128	; 0x80
 80038ba:	0391      	lsls	r1, r2, #14
 80038bc:	6878      	ldr	r0, [r7, #4]
 80038be:	4a1a      	ldr	r2, [pc, #104]	; (8003928 <UART_CheckIdleState+0x98>)
 80038c0:	9200      	str	r2, [sp, #0]
 80038c2:	2200      	movs	r2, #0
 80038c4:	f000 f832 	bl	800392c <UART_WaitOnFlagUntilTimeout>
 80038c8:	1e03      	subs	r3, r0, #0
 80038ca:	d001      	beq.n	80038d0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80038cc:	2303      	movs	r3, #3
 80038ce:	e026      	b.n	800391e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	2204      	movs	r2, #4
 80038d8:	4013      	ands	r3, r2
 80038da:	2b04      	cmp	r3, #4
 80038dc:	d10c      	bne.n	80038f8 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	2280      	movs	r2, #128	; 0x80
 80038e2:	03d1      	lsls	r1, r2, #15
 80038e4:	6878      	ldr	r0, [r7, #4]
 80038e6:	4a10      	ldr	r2, [pc, #64]	; (8003928 <UART_CheckIdleState+0x98>)
 80038e8:	9200      	str	r2, [sp, #0]
 80038ea:	2200      	movs	r2, #0
 80038ec:	f000 f81e 	bl	800392c <UART_WaitOnFlagUntilTimeout>
 80038f0:	1e03      	subs	r3, r0, #0
 80038f2:	d001      	beq.n	80038f8 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80038f4:	2303      	movs	r3, #3
 80038f6:	e012      	b.n	800391e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2288      	movs	r2, #136	; 0x88
 80038fc:	2120      	movs	r1, #32
 80038fe:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	228c      	movs	r2, #140	; 0x8c
 8003904:	2120      	movs	r1, #32
 8003906:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2200      	movs	r2, #0
 800390c:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2200      	movs	r2, #0
 8003912:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2284      	movs	r2, #132	; 0x84
 8003918:	2100      	movs	r1, #0
 800391a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800391c:	2300      	movs	r3, #0
}
 800391e:	0018      	movs	r0, r3
 8003920:	46bd      	mov	sp, r7
 8003922:	b004      	add	sp, #16
 8003924:	bd80      	pop	{r7, pc}
 8003926:	46c0      	nop			; (mov r8, r8)
 8003928:	01ffffff 	.word	0x01ffffff

0800392c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b094      	sub	sp, #80	; 0x50
 8003930:	af00      	add	r7, sp, #0
 8003932:	60f8      	str	r0, [r7, #12]
 8003934:	60b9      	str	r1, [r7, #8]
 8003936:	603b      	str	r3, [r7, #0]
 8003938:	1dfb      	adds	r3, r7, #7
 800393a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800393c:	e0a7      	b.n	8003a8e <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800393e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003940:	3301      	adds	r3, #1
 8003942:	d100      	bne.n	8003946 <UART_WaitOnFlagUntilTimeout+0x1a>
 8003944:	e0a3      	b.n	8003a8e <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003946:	f7fd fa29 	bl	8000d9c <HAL_GetTick>
 800394a:	0002      	movs	r2, r0
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	1ad3      	subs	r3, r2, r3
 8003950:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003952:	429a      	cmp	r2, r3
 8003954:	d302      	bcc.n	800395c <UART_WaitOnFlagUntilTimeout+0x30>
 8003956:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003958:	2b00      	cmp	r3, #0
 800395a:	d13f      	bne.n	80039dc <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800395c:	f3ef 8310 	mrs	r3, PRIMASK
 8003960:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8003962:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003964:	647b      	str	r3, [r7, #68]	; 0x44
 8003966:	2301      	movs	r3, #1
 8003968:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800396a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800396c:	f383 8810 	msr	PRIMASK, r3
}
 8003970:	46c0      	nop			; (mov r8, r8)
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	681a      	ldr	r2, [r3, #0]
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	494e      	ldr	r1, [pc, #312]	; (8003ab8 <UART_WaitOnFlagUntilTimeout+0x18c>)
 800397e:	400a      	ands	r2, r1
 8003980:	601a      	str	r2, [r3, #0]
 8003982:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003984:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003988:	f383 8810 	msr	PRIMASK, r3
}
 800398c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800398e:	f3ef 8310 	mrs	r3, PRIMASK
 8003992:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8003994:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003996:	643b      	str	r3, [r7, #64]	; 0x40
 8003998:	2301      	movs	r3, #1
 800399a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800399c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800399e:	f383 8810 	msr	PRIMASK, r3
}
 80039a2:	46c0      	nop			; (mov r8, r8)
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	689a      	ldr	r2, [r3, #8]
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	2101      	movs	r1, #1
 80039b0:	438a      	bics	r2, r1
 80039b2:	609a      	str	r2, [r3, #8]
 80039b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80039b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039ba:	f383 8810 	msr	PRIMASK, r3
}
 80039be:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	2288      	movs	r2, #136	; 0x88
 80039c4:	2120      	movs	r1, #32
 80039c6:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	228c      	movs	r2, #140	; 0x8c
 80039cc:	2120      	movs	r1, #32
 80039ce:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	2284      	movs	r2, #132	; 0x84
 80039d4:	2100      	movs	r1, #0
 80039d6:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80039d8:	2303      	movs	r3, #3
 80039da:	e069      	b.n	8003ab0 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	2204      	movs	r2, #4
 80039e4:	4013      	ands	r3, r2
 80039e6:	d052      	beq.n	8003a8e <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	69da      	ldr	r2, [r3, #28]
 80039ee:	2380      	movs	r3, #128	; 0x80
 80039f0:	011b      	lsls	r3, r3, #4
 80039f2:	401a      	ands	r2, r3
 80039f4:	2380      	movs	r3, #128	; 0x80
 80039f6:	011b      	lsls	r3, r3, #4
 80039f8:	429a      	cmp	r2, r3
 80039fa:	d148      	bne.n	8003a8e <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	2280      	movs	r2, #128	; 0x80
 8003a02:	0112      	lsls	r2, r2, #4
 8003a04:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a06:	f3ef 8310 	mrs	r3, PRIMASK
 8003a0a:	613b      	str	r3, [r7, #16]
  return(result);
 8003a0c:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003a0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a10:	2301      	movs	r3, #1
 8003a12:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a14:	697b      	ldr	r3, [r7, #20]
 8003a16:	f383 8810 	msr	PRIMASK, r3
}
 8003a1a:	46c0      	nop			; (mov r8, r8)
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	681a      	ldr	r2, [r3, #0]
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4924      	ldr	r1, [pc, #144]	; (8003ab8 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8003a28:	400a      	ands	r2, r1
 8003a2a:	601a      	str	r2, [r3, #0]
 8003a2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a2e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a30:	69bb      	ldr	r3, [r7, #24]
 8003a32:	f383 8810 	msr	PRIMASK, r3
}
 8003a36:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a38:	f3ef 8310 	mrs	r3, PRIMASK
 8003a3c:	61fb      	str	r3, [r7, #28]
  return(result);
 8003a3e:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a40:	64bb      	str	r3, [r7, #72]	; 0x48
 8003a42:	2301      	movs	r3, #1
 8003a44:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a46:	6a3b      	ldr	r3, [r7, #32]
 8003a48:	f383 8810 	msr	PRIMASK, r3
}
 8003a4c:	46c0      	nop			; (mov r8, r8)
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	689a      	ldr	r2, [r3, #8]
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	2101      	movs	r1, #1
 8003a5a:	438a      	bics	r2, r1
 8003a5c:	609a      	str	r2, [r3, #8]
 8003a5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a60:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a64:	f383 8810 	msr	PRIMASK, r3
}
 8003a68:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	2288      	movs	r2, #136	; 0x88
 8003a6e:	2120      	movs	r1, #32
 8003a70:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	228c      	movs	r2, #140	; 0x8c
 8003a76:	2120      	movs	r1, #32
 8003a78:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	2290      	movs	r2, #144	; 0x90
 8003a7e:	2120      	movs	r1, #32
 8003a80:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	2284      	movs	r2, #132	; 0x84
 8003a86:	2100      	movs	r1, #0
 8003a88:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003a8a:	2303      	movs	r3, #3
 8003a8c:	e010      	b.n	8003ab0 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	69db      	ldr	r3, [r3, #28]
 8003a94:	68ba      	ldr	r2, [r7, #8]
 8003a96:	4013      	ands	r3, r2
 8003a98:	68ba      	ldr	r2, [r7, #8]
 8003a9a:	1ad3      	subs	r3, r2, r3
 8003a9c:	425a      	negs	r2, r3
 8003a9e:	4153      	adcs	r3, r2
 8003aa0:	b2db      	uxtb	r3, r3
 8003aa2:	001a      	movs	r2, r3
 8003aa4:	1dfb      	adds	r3, r7, #7
 8003aa6:	781b      	ldrb	r3, [r3, #0]
 8003aa8:	429a      	cmp	r2, r3
 8003aaa:	d100      	bne.n	8003aae <UART_WaitOnFlagUntilTimeout+0x182>
 8003aac:	e747      	b.n	800393e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003aae:	2300      	movs	r3, #0
}
 8003ab0:	0018      	movs	r0, r3
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	b014      	add	sp, #80	; 0x50
 8003ab6:	bd80      	pop	{r7, pc}
 8003ab8:	fffffe5f 	.word	0xfffffe5f

08003abc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b090      	sub	sp, #64	; 0x40
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	60f8      	str	r0, [r7, #12]
 8003ac4:	60b9      	str	r1, [r7, #8]
 8003ac6:	1dbb      	adds	r3, r7, #6
 8003ac8:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	68ba      	ldr	r2, [r7, #8]
 8003ace:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	1dba      	adds	r2, r7, #6
 8003ad4:	215c      	movs	r1, #92	; 0x5c
 8003ad6:	8812      	ldrh	r2, [r2, #0]
 8003ad8:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	2290      	movs	r2, #144	; 0x90
 8003ade:	2100      	movs	r1, #0
 8003ae0:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	228c      	movs	r2, #140	; 0x8c
 8003ae6:	2122      	movs	r1, #34	; 0x22
 8003ae8:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	2280      	movs	r2, #128	; 0x80
 8003aee:	589b      	ldr	r3, [r3, r2]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d02d      	beq.n	8003b50 <UART_Start_Receive_DMA+0x94>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	2280      	movs	r2, #128	; 0x80
 8003af8:	589b      	ldr	r3, [r3, r2]
 8003afa:	4a40      	ldr	r2, [pc, #256]	; (8003bfc <UART_Start_Receive_DMA+0x140>)
 8003afc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	2280      	movs	r2, #128	; 0x80
 8003b02:	589b      	ldr	r3, [r3, r2]
 8003b04:	4a3e      	ldr	r2, [pc, #248]	; (8003c00 <UART_Start_Receive_DMA+0x144>)
 8003b06:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	2280      	movs	r2, #128	; 0x80
 8003b0c:	589b      	ldr	r3, [r3, r2]
 8003b0e:	4a3d      	ldr	r2, [pc, #244]	; (8003c04 <UART_Start_Receive_DMA+0x148>)
 8003b10:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	2280      	movs	r2, #128	; 0x80
 8003b16:	589b      	ldr	r3, [r3, r2]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	2280      	movs	r2, #128	; 0x80
 8003b20:	5898      	ldr	r0, [r3, r2]
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	3324      	adds	r3, #36	; 0x24
 8003b28:	0019      	movs	r1, r3
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b2e:	001a      	movs	r2, r3
 8003b30:	1dbb      	adds	r3, r7, #6
 8003b32:	881b      	ldrh	r3, [r3, #0]
 8003b34:	f7fd fa74 	bl	8001020 <HAL_DMA_Start_IT>
 8003b38:	1e03      	subs	r3, r0, #0
 8003b3a:	d009      	beq.n	8003b50 <UART_Start_Receive_DMA+0x94>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	2290      	movs	r2, #144	; 0x90
 8003b40:	2110      	movs	r1, #16
 8003b42:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	228c      	movs	r2, #140	; 0x8c
 8003b48:	2120      	movs	r1, #32
 8003b4a:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	e050      	b.n	8003bf2 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	691b      	ldr	r3, [r3, #16]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d019      	beq.n	8003b8c <UART_Start_Receive_DMA+0xd0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b58:	f3ef 8310 	mrs	r3, PRIMASK
 8003b5c:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8003b5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003b60:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b62:	2301      	movs	r3, #1
 8003b64:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b68:	f383 8810 	msr	PRIMASK, r3
}
 8003b6c:	46c0      	nop			; (mov r8, r8)
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	681a      	ldr	r2, [r3, #0]
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	2180      	movs	r1, #128	; 0x80
 8003b7a:	0049      	lsls	r1, r1, #1
 8003b7c:	430a      	orrs	r2, r1
 8003b7e:	601a      	str	r2, [r3, #0]
 8003b80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b82:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b86:	f383 8810 	msr	PRIMASK, r3
}
 8003b8a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b8c:	f3ef 8310 	mrs	r3, PRIMASK
 8003b90:	613b      	str	r3, [r7, #16]
  return(result);
 8003b92:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b94:	63bb      	str	r3, [r7, #56]	; 0x38
 8003b96:	2301      	movs	r3, #1
 8003b98:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b9a:	697b      	ldr	r3, [r7, #20]
 8003b9c:	f383 8810 	msr	PRIMASK, r3
}
 8003ba0:	46c0      	nop			; (mov r8, r8)
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	689a      	ldr	r2, [r3, #8]
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	2101      	movs	r1, #1
 8003bae:	430a      	orrs	r2, r1
 8003bb0:	609a      	str	r2, [r3, #8]
 8003bb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bb4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bb6:	69bb      	ldr	r3, [r7, #24]
 8003bb8:	f383 8810 	msr	PRIMASK, r3
}
 8003bbc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003bbe:	f3ef 8310 	mrs	r3, PRIMASK
 8003bc2:	61fb      	str	r3, [r7, #28]
  return(result);
 8003bc4:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003bc6:	637b      	str	r3, [r7, #52]	; 0x34
 8003bc8:	2301      	movs	r3, #1
 8003bca:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bcc:	6a3b      	ldr	r3, [r7, #32]
 8003bce:	f383 8810 	msr	PRIMASK, r3
}
 8003bd2:	46c0      	nop			; (mov r8, r8)
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	689a      	ldr	r2, [r3, #8]
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	2140      	movs	r1, #64	; 0x40
 8003be0:	430a      	orrs	r2, r1
 8003be2:	609a      	str	r2, [r3, #8]
 8003be4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003be6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bea:	f383 8810 	msr	PRIMASK, r3
}
 8003bee:	46c0      	nop			; (mov r8, r8)

  return HAL_OK;
 8003bf0:	2300      	movs	r3, #0
}
 8003bf2:	0018      	movs	r0, r3
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	b010      	add	sp, #64	; 0x40
 8003bf8:	bd80      	pop	{r7, pc}
 8003bfa:	46c0      	nop			; (mov r8, r8)
 8003bfc:	08003e0d 	.word	0x08003e0d
 8003c00:	08003f3d 	.word	0x08003f3d
 8003c04:	08003f7f 	.word	0x08003f7f

08003c08 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b08a      	sub	sp, #40	; 0x28
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c10:	f3ef 8310 	mrs	r3, PRIMASK
 8003c14:	60bb      	str	r3, [r7, #8]
  return(result);
 8003c16:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8003c18:	627b      	str	r3, [r7, #36]	; 0x24
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	f383 8810 	msr	PRIMASK, r3
}
 8003c24:	46c0      	nop			; (mov r8, r8)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	681a      	ldr	r2, [r3, #0]
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	21c0      	movs	r1, #192	; 0xc0
 8003c32:	438a      	bics	r2, r1
 8003c34:	601a      	str	r2, [r3, #0]
 8003c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c38:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c3a:	693b      	ldr	r3, [r7, #16]
 8003c3c:	f383 8810 	msr	PRIMASK, r3
}
 8003c40:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c42:	f3ef 8310 	mrs	r3, PRIMASK
 8003c46:	617b      	str	r3, [r7, #20]
  return(result);
 8003c48:	697b      	ldr	r3, [r7, #20]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8003c4a:	623b      	str	r3, [r7, #32]
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c50:	69bb      	ldr	r3, [r7, #24]
 8003c52:	f383 8810 	msr	PRIMASK, r3
}
 8003c56:	46c0      	nop			; (mov r8, r8)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	689a      	ldr	r2, [r3, #8]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4908      	ldr	r1, [pc, #32]	; (8003c84 <UART_EndTxTransfer+0x7c>)
 8003c64:	400a      	ands	r2, r1
 8003c66:	609a      	str	r2, [r3, #8]
 8003c68:	6a3b      	ldr	r3, [r7, #32]
 8003c6a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c6c:	69fb      	ldr	r3, [r7, #28]
 8003c6e:	f383 8810 	msr	PRIMASK, r3
}
 8003c72:	46c0      	nop			; (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2288      	movs	r2, #136	; 0x88
 8003c78:	2120      	movs	r1, #32
 8003c7a:	5099      	str	r1, [r3, r2]
}
 8003c7c:	46c0      	nop			; (mov r8, r8)
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	b00a      	add	sp, #40	; 0x28
 8003c82:	bd80      	pop	{r7, pc}
 8003c84:	ff7fffff 	.word	0xff7fffff

08003c88 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b08e      	sub	sp, #56	; 0x38
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c90:	f3ef 8310 	mrs	r3, PRIMASK
 8003c94:	617b      	str	r3, [r7, #20]
  return(result);
 8003c96:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003c98:	637b      	str	r3, [r7, #52]	; 0x34
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c9e:	69bb      	ldr	r3, [r7, #24]
 8003ca0:	f383 8810 	msr	PRIMASK, r3
}
 8003ca4:	46c0      	nop			; (mov r8, r8)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	681a      	ldr	r2, [r3, #0]
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4926      	ldr	r1, [pc, #152]	; (8003d4c <UART_EndRxTransfer+0xc4>)
 8003cb2:	400a      	ands	r2, r1
 8003cb4:	601a      	str	r2, [r3, #0]
 8003cb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cb8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cba:	69fb      	ldr	r3, [r7, #28]
 8003cbc:	f383 8810 	msr	PRIMASK, r3
}
 8003cc0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003cc2:	f3ef 8310 	mrs	r3, PRIMASK
 8003cc6:	623b      	str	r3, [r7, #32]
  return(result);
 8003cc8:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003cca:	633b      	str	r3, [r7, #48]	; 0x30
 8003ccc:	2301      	movs	r3, #1
 8003cce:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cd2:	f383 8810 	msr	PRIMASK, r3
}
 8003cd6:	46c0      	nop			; (mov r8, r8)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	689a      	ldr	r2, [r3, #8]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	491b      	ldr	r1, [pc, #108]	; (8003d50 <UART_EndRxTransfer+0xc8>)
 8003ce4:	400a      	ands	r2, r1
 8003ce6:	609a      	str	r2, [r3, #8]
 8003ce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cea:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cee:	f383 8810 	msr	PRIMASK, r3
}
 8003cf2:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003cf8:	2b01      	cmp	r3, #1
 8003cfa:	d118      	bne.n	8003d2e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003cfc:	f3ef 8310 	mrs	r3, PRIMASK
 8003d00:	60bb      	str	r3, [r7, #8]
  return(result);
 8003d02:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d04:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d06:	2301      	movs	r3, #1
 8003d08:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	f383 8810 	msr	PRIMASK, r3
}
 8003d10:	46c0      	nop			; (mov r8, r8)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	681a      	ldr	r2, [r3, #0]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	2110      	movs	r1, #16
 8003d1e:	438a      	bics	r2, r1
 8003d20:	601a      	str	r2, [r3, #0]
 8003d22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d24:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	f383 8810 	msr	PRIMASK, r3
}
 8003d2c:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	228c      	movs	r2, #140	; 0x8c
 8003d32:	2120      	movs	r1, #32
 8003d34:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	675a      	str	r2, [r3, #116]	; 0x74
}
 8003d42:	46c0      	nop			; (mov r8, r8)
 8003d44:	46bd      	mov	sp, r7
 8003d46:	b00e      	add	sp, #56	; 0x38
 8003d48:	bd80      	pop	{r7, pc}
 8003d4a:	46c0      	nop			; (mov r8, r8)
 8003d4c:	fffffedf 	.word	0xfffffedf
 8003d50:	effffffe 	.word	0xeffffffe

08003d54 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b08c      	sub	sp, #48	; 0x30
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d60:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	2220      	movs	r2, #32
 8003d6a:	4013      	ands	r3, r2
 8003d6c:	d135      	bne.n	8003dda <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 8003d6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d70:	2256      	movs	r2, #86	; 0x56
 8003d72:	2100      	movs	r1, #0
 8003d74:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d76:	f3ef 8310 	mrs	r3, PRIMASK
 8003d7a:	60fb      	str	r3, [r7, #12]
  return(result);
 8003d7c:	68fb      	ldr	r3, [r7, #12]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003d7e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d80:	2301      	movs	r3, #1
 8003d82:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d84:	693b      	ldr	r3, [r7, #16]
 8003d86:	f383 8810 	msr	PRIMASK, r3
}
 8003d8a:	46c0      	nop			; (mov r8, r8)
 8003d8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	689a      	ldr	r2, [r3, #8]
 8003d92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	2180      	movs	r1, #128	; 0x80
 8003d98:	438a      	bics	r2, r1
 8003d9a:	609a      	str	r2, [r3, #8]
 8003d9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d9e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003da0:	697b      	ldr	r3, [r7, #20]
 8003da2:	f383 8810 	msr	PRIMASK, r3
}
 8003da6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003da8:	f3ef 8310 	mrs	r3, PRIMASK
 8003dac:	61bb      	str	r3, [r7, #24]
  return(result);
 8003dae:	69bb      	ldr	r3, [r7, #24]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003db0:	627b      	str	r3, [r7, #36]	; 0x24
 8003db2:	2301      	movs	r3, #1
 8003db4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003db6:	69fb      	ldr	r3, [r7, #28]
 8003db8:	f383 8810 	msr	PRIMASK, r3
}
 8003dbc:	46c0      	nop			; (mov r8, r8)
 8003dbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	681a      	ldr	r2, [r3, #0]
 8003dc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	2140      	movs	r1, #64	; 0x40
 8003dca:	430a      	orrs	r2, r1
 8003dcc:	601a      	str	r2, [r3, #0]
 8003dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003dd2:	6a3b      	ldr	r3, [r7, #32]
 8003dd4:	f383 8810 	msr	PRIMASK, r3
}
 8003dd8:	e004      	b.n	8003de4 <UART_DMATransmitCplt+0x90>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Tx complete callback*/
    huart->TxCpltCallback(huart);
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
 8003dda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ddc:	0018      	movs	r0, r3
 8003dde:	f7fc fcdb 	bl	8000798 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003de2:	46c0      	nop			; (mov r8, r8)
 8003de4:	46c0      	nop			; (mov r8, r8)
 8003de6:	46bd      	mov	sp, r7
 8003de8:	b00c      	add	sp, #48	; 0x30
 8003dea:	bd80      	pop	{r7, pc}

08003dec <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b084      	sub	sp, #16
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003df8:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	0018      	movs	r0, r3
 8003dfe:	f7ff facb 	bl	8003398 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003e02:	46c0      	nop			; (mov r8, r8)
 8003e04:	46bd      	mov	sp, r7
 8003e06:	b004      	add	sp, #16
 8003e08:	bd80      	pop	{r7, pc}
	...

08003e0c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b094      	sub	sp, #80	; 0x50
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e18:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	2220      	movs	r2, #32
 8003e22:	4013      	ands	r3, r2
 8003e24:	d16f      	bne.n	8003f06 <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 8003e26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e28:	225e      	movs	r2, #94	; 0x5e
 8003e2a:	2100      	movs	r1, #0
 8003e2c:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e2e:	f3ef 8310 	mrs	r3, PRIMASK
 8003e32:	61bb      	str	r3, [r7, #24]
  return(result);
 8003e34:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003e36:	64bb      	str	r3, [r7, #72]	; 0x48
 8003e38:	2301      	movs	r3, #1
 8003e3a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e3c:	69fb      	ldr	r3, [r7, #28]
 8003e3e:	f383 8810 	msr	PRIMASK, r3
}
 8003e42:	46c0      	nop			; (mov r8, r8)
 8003e44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	681a      	ldr	r2, [r3, #0]
 8003e4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	493a      	ldr	r1, [pc, #232]	; (8003f38 <UART_DMAReceiveCplt+0x12c>)
 8003e50:	400a      	ands	r2, r1
 8003e52:	601a      	str	r2, [r3, #0]
 8003e54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e56:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e58:	6a3b      	ldr	r3, [r7, #32]
 8003e5a:	f383 8810 	msr	PRIMASK, r3
}
 8003e5e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e60:	f3ef 8310 	mrs	r3, PRIMASK
 8003e64:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e68:	647b      	str	r3, [r7, #68]	; 0x44
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e70:	f383 8810 	msr	PRIMASK, r3
}
 8003e74:	46c0      	nop			; (mov r8, r8)
 8003e76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	689a      	ldr	r2, [r3, #8]
 8003e7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	2101      	movs	r1, #1
 8003e82:	438a      	bics	r2, r1
 8003e84:	609a      	str	r2, [r3, #8]
 8003e86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e88:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e8c:	f383 8810 	msr	PRIMASK, r3
}
 8003e90:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e92:	f3ef 8310 	mrs	r3, PRIMASK
 8003e96:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8003e98:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e9a:	643b      	str	r3, [r7, #64]	; 0x40
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ea0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ea2:	f383 8810 	msr	PRIMASK, r3
}
 8003ea6:	46c0      	nop			; (mov r8, r8)
 8003ea8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	689a      	ldr	r2, [r3, #8]
 8003eae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	2140      	movs	r1, #64	; 0x40
 8003eb4:	438a      	bics	r2, r1
 8003eb6:	609a      	str	r2, [r3, #8]
 8003eb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003eba:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ebc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ebe:	f383 8810 	msr	PRIMASK, r3
}
 8003ec2:	46c0      	nop			; (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003ec4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ec6:	228c      	movs	r2, #140	; 0x8c
 8003ec8:	2120      	movs	r1, #32
 8003eca:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ecc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ece:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ed0:	2b01      	cmp	r3, #1
 8003ed2:	d118      	bne.n	8003f06 <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ed4:	f3ef 8310 	mrs	r3, PRIMASK
 8003ed8:	60fb      	str	r3, [r7, #12]
  return(result);
 8003eda:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003edc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ede:	2301      	movs	r3, #1
 8003ee0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ee2:	693b      	ldr	r3, [r7, #16]
 8003ee4:	f383 8810 	msr	PRIMASK, r3
}
 8003ee8:	46c0      	nop			; (mov r8, r8)
 8003eea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	681a      	ldr	r2, [r3, #0]
 8003ef0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	2110      	movs	r1, #16
 8003ef6:	438a      	bics	r2, r1
 8003ef8:	601a      	str	r2, [r3, #0]
 8003efa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003efc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003efe:	697b      	ldr	r3, [r7, #20]
 8003f00:	f383 8810 	msr	PRIMASK, r3
}
 8003f04:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003f06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f08:	2200      	movs	r2, #0
 8003f0a:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f10:	2b01      	cmp	r3, #1
 8003f12:	d108      	bne.n	8003f26 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003f14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f16:	225c      	movs	r2, #92	; 0x5c
 8003f18:	5a9a      	ldrh	r2, [r3, r2]
 8003f1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f1c:	0011      	movs	r1, r2
 8003f1e:	0018      	movs	r0, r3
 8003f20:	f7fc fbde 	bl	80006e0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003f24:	e003      	b.n	8003f2e <UART_DMAReceiveCplt+0x122>
    HAL_UART_RxCpltCallback(huart);
 8003f26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f28:	0018      	movs	r0, r3
 8003f2a:	f7ff fa3d 	bl	80033a8 <HAL_UART_RxCpltCallback>
}
 8003f2e:	46c0      	nop			; (mov r8, r8)
 8003f30:	46bd      	mov	sp, r7
 8003f32:	b014      	add	sp, #80	; 0x50
 8003f34:	bd80      	pop	{r7, pc}
 8003f36:	46c0      	nop			; (mov r8, r8)
 8003f38:	fffffeff 	.word	0xfffffeff

08003f3c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b084      	sub	sp, #16
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f48:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	2201      	movs	r2, #1
 8003f4e:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f54:	2b01      	cmp	r3, #1
 8003f56:	d10a      	bne.n	8003f6e <UART_DMARxHalfCplt+0x32>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	225c      	movs	r2, #92	; 0x5c
 8003f5c:	5a9b      	ldrh	r3, [r3, r2]
 8003f5e:	085b      	lsrs	r3, r3, #1
 8003f60:	b29a      	uxth	r2, r3
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	0011      	movs	r1, r2
 8003f66:	0018      	movs	r0, r3
 8003f68:	f7fc fbba 	bl	80006e0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003f6c:	e003      	b.n	8003f76 <UART_DMARxHalfCplt+0x3a>
    HAL_UART_RxHalfCpltCallback(huart);
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	0018      	movs	r0, r3
 8003f72:	f7ff fa21 	bl	80033b8 <HAL_UART_RxHalfCpltCallback>
}
 8003f76:	46c0      	nop			; (mov r8, r8)
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	b004      	add	sp, #16
 8003f7c:	bd80      	pop	{r7, pc}

08003f7e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003f7e:	b580      	push	{r7, lr}
 8003f80:	b086      	sub	sp, #24
 8003f82:	af00      	add	r7, sp, #0
 8003f84:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f8a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8003f8c:	697b      	ldr	r3, [r7, #20]
 8003f8e:	2288      	movs	r2, #136	; 0x88
 8003f90:	589b      	ldr	r3, [r3, r2]
 8003f92:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8003f94:	697b      	ldr	r3, [r7, #20]
 8003f96:	228c      	movs	r2, #140	; 0x8c
 8003f98:	589b      	ldr	r3, [r3, r2]
 8003f9a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8003f9c:	697b      	ldr	r3, [r7, #20]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	689b      	ldr	r3, [r3, #8]
 8003fa2:	2280      	movs	r2, #128	; 0x80
 8003fa4:	4013      	ands	r3, r2
 8003fa6:	2b80      	cmp	r3, #128	; 0x80
 8003fa8:	d10a      	bne.n	8003fc0 <UART_DMAError+0x42>
 8003faa:	693b      	ldr	r3, [r7, #16]
 8003fac:	2b21      	cmp	r3, #33	; 0x21
 8003fae:	d107      	bne.n	8003fc0 <UART_DMAError+0x42>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8003fb0:	697b      	ldr	r3, [r7, #20]
 8003fb2:	2256      	movs	r2, #86	; 0x56
 8003fb4:	2100      	movs	r1, #0
 8003fb6:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8003fb8:	697b      	ldr	r3, [r7, #20]
 8003fba:	0018      	movs	r0, r3
 8003fbc:	f7ff fe24 	bl	8003c08 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8003fc0:	697b      	ldr	r3, [r7, #20]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	689b      	ldr	r3, [r3, #8]
 8003fc6:	2240      	movs	r2, #64	; 0x40
 8003fc8:	4013      	ands	r3, r2
 8003fca:	2b40      	cmp	r3, #64	; 0x40
 8003fcc:	d10a      	bne.n	8003fe4 <UART_DMAError+0x66>
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	2b22      	cmp	r3, #34	; 0x22
 8003fd2:	d107      	bne.n	8003fe4 <UART_DMAError+0x66>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8003fd4:	697b      	ldr	r3, [r7, #20]
 8003fd6:	225e      	movs	r2, #94	; 0x5e
 8003fd8:	2100      	movs	r1, #0
 8003fda:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8003fdc:	697b      	ldr	r3, [r7, #20]
 8003fde:	0018      	movs	r0, r3
 8003fe0:	f7ff fe52 	bl	8003c88 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003fe4:	697b      	ldr	r3, [r7, #20]
 8003fe6:	2290      	movs	r2, #144	; 0x90
 8003fe8:	589b      	ldr	r3, [r3, r2]
 8003fea:	2210      	movs	r2, #16
 8003fec:	431a      	orrs	r2, r3
 8003fee:	697b      	ldr	r3, [r7, #20]
 8003ff0:	2190      	movs	r1, #144	; 0x90
 8003ff2:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003ff4:	697b      	ldr	r3, [r7, #20]
 8003ff6:	0018      	movs	r0, r3
 8003ff8:	f7fc fb38 	bl	800066c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003ffc:	46c0      	nop			; (mov r8, r8)
 8003ffe:	46bd      	mov	sp, r7
 8004000:	b006      	add	sp, #24
 8004002:	bd80      	pop	{r7, pc}

08004004 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b084      	sub	sp, #16
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004010:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	225e      	movs	r2, #94	; 0x5e
 8004016:	2100      	movs	r1, #0
 8004018:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	2256      	movs	r2, #86	; 0x56
 800401e:	2100      	movs	r1, #0
 8004020:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	0018      	movs	r0, r3
 8004026:	f7fc fb21 	bl	800066c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800402a:	46c0      	nop			; (mov r8, r8)
 800402c:	46bd      	mov	sp, r7
 800402e:	b004      	add	sp, #16
 8004030:	bd80      	pop	{r7, pc}

08004032 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004032:	b580      	push	{r7, lr}
 8004034:	b086      	sub	sp, #24
 8004036:	af00      	add	r7, sp, #0
 8004038:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800403a:	f3ef 8310 	mrs	r3, PRIMASK
 800403e:	60bb      	str	r3, [r7, #8]
  return(result);
 8004040:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004042:	617b      	str	r3, [r7, #20]
 8004044:	2301      	movs	r3, #1
 8004046:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	f383 8810 	msr	PRIMASK, r3
}
 800404e:	46c0      	nop			; (mov r8, r8)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	681a      	ldr	r2, [r3, #0]
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	2140      	movs	r1, #64	; 0x40
 800405c:	438a      	bics	r2, r1
 800405e:	601a      	str	r2, [r3, #0]
 8004060:	697b      	ldr	r3, [r7, #20]
 8004062:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004064:	693b      	ldr	r3, [r7, #16]
 8004066:	f383 8810 	msr	PRIMASK, r3
}
 800406a:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2288      	movs	r2, #136	; 0x88
 8004070:	2120      	movs	r1, #32
 8004072:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2200      	movs	r2, #0
 8004078:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	0018      	movs	r0, r3
 800407e:	f7fc fb8b 	bl	8000798 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004082:	46c0      	nop			; (mov r8, r8)
 8004084:	46bd      	mov	sp, r7
 8004086:	b006      	add	sp, #24
 8004088:	bd80      	pop	{r7, pc}

0800408a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800408a:	b580      	push	{r7, lr}
 800408c:	b082      	sub	sp, #8
 800408e:	af00      	add	r7, sp, #0
 8004090:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004092:	46c0      	nop			; (mov r8, r8)
 8004094:	46bd      	mov	sp, r7
 8004096:	b002      	add	sp, #8
 8004098:	bd80      	pop	{r7, pc}

0800409a <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800409a:	b580      	push	{r7, lr}
 800409c:	b082      	sub	sp, #8
 800409e:	af00      	add	r7, sp, #0
 80040a0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80040a2:	46c0      	nop			; (mov r8, r8)
 80040a4:	46bd      	mov	sp, r7
 80040a6:	b002      	add	sp, #8
 80040a8:	bd80      	pop	{r7, pc}

080040aa <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80040aa:	b580      	push	{r7, lr}
 80040ac:	b082      	sub	sp, #8
 80040ae:	af00      	add	r7, sp, #0
 80040b0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80040b2:	46c0      	nop			; (mov r8, r8)
 80040b4:	46bd      	mov	sp, r7
 80040b6:	b002      	add	sp, #8
 80040b8:	bd80      	pop	{r7, pc}
	...

080040bc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b084      	sub	sp, #16
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2284      	movs	r2, #132	; 0x84
 80040c8:	5c9b      	ldrb	r3, [r3, r2]
 80040ca:	2b01      	cmp	r3, #1
 80040cc:	d101      	bne.n	80040d2 <HAL_UARTEx_DisableFifoMode+0x16>
 80040ce:	2302      	movs	r3, #2
 80040d0:	e027      	b.n	8004122 <HAL_UARTEx_DisableFifoMode+0x66>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2284      	movs	r2, #132	; 0x84
 80040d6:	2101      	movs	r1, #1
 80040d8:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2288      	movs	r2, #136	; 0x88
 80040de:	2124      	movs	r1, #36	; 0x24
 80040e0:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	681a      	ldr	r2, [r3, #0]
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	2101      	movs	r1, #1
 80040f6:	438a      	bics	r2, r1
 80040f8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	4a0b      	ldr	r2, [pc, #44]	; (800412c <HAL_UARTEx_DisableFifoMode+0x70>)
 80040fe:	4013      	ands	r3, r2
 8004100:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2200      	movs	r2, #0
 8004106:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	68fa      	ldr	r2, [r7, #12]
 800410e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2288      	movs	r2, #136	; 0x88
 8004114:	2120      	movs	r1, #32
 8004116:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2284      	movs	r2, #132	; 0x84
 800411c:	2100      	movs	r1, #0
 800411e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004120:	2300      	movs	r3, #0
}
 8004122:	0018      	movs	r0, r3
 8004124:	46bd      	mov	sp, r7
 8004126:	b004      	add	sp, #16
 8004128:	bd80      	pop	{r7, pc}
 800412a:	46c0      	nop			; (mov r8, r8)
 800412c:	dfffffff 	.word	0xdfffffff

08004130 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b084      	sub	sp, #16
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
 8004138:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2284      	movs	r2, #132	; 0x84
 800413e:	5c9b      	ldrb	r3, [r3, r2]
 8004140:	2b01      	cmp	r3, #1
 8004142:	d101      	bne.n	8004148 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004144:	2302      	movs	r3, #2
 8004146:	e02e      	b.n	80041a6 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2284      	movs	r2, #132	; 0x84
 800414c:	2101      	movs	r1, #1
 800414e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2288      	movs	r2, #136	; 0x88
 8004154:	2124      	movs	r1, #36	; 0x24
 8004156:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	681a      	ldr	r2, [r3, #0]
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	2101      	movs	r1, #1
 800416c:	438a      	bics	r2, r1
 800416e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	689b      	ldr	r3, [r3, #8]
 8004176:	00db      	lsls	r3, r3, #3
 8004178:	08d9      	lsrs	r1, r3, #3
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	683a      	ldr	r2, [r7, #0]
 8004180:	430a      	orrs	r2, r1
 8004182:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	0018      	movs	r0, r3
 8004188:	f000 f8bc 	bl	8004304 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	68fa      	ldr	r2, [r7, #12]
 8004192:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2288      	movs	r2, #136	; 0x88
 8004198:	2120      	movs	r1, #32
 800419a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2284      	movs	r2, #132	; 0x84
 80041a0:	2100      	movs	r1, #0
 80041a2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80041a4:	2300      	movs	r3, #0
}
 80041a6:	0018      	movs	r0, r3
 80041a8:	46bd      	mov	sp, r7
 80041aa:	b004      	add	sp, #16
 80041ac:	bd80      	pop	{r7, pc}
	...

080041b0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b084      	sub	sp, #16
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
 80041b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2284      	movs	r2, #132	; 0x84
 80041be:	5c9b      	ldrb	r3, [r3, r2]
 80041c0:	2b01      	cmp	r3, #1
 80041c2:	d101      	bne.n	80041c8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80041c4:	2302      	movs	r3, #2
 80041c6:	e02f      	b.n	8004228 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2284      	movs	r2, #132	; 0x84
 80041cc:	2101      	movs	r1, #1
 80041ce:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2288      	movs	r2, #136	; 0x88
 80041d4:	2124      	movs	r1, #36	; 0x24
 80041d6:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	681a      	ldr	r2, [r3, #0]
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	2101      	movs	r1, #1
 80041ec:	438a      	bics	r2, r1
 80041ee:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	689b      	ldr	r3, [r3, #8]
 80041f6:	4a0e      	ldr	r2, [pc, #56]	; (8004230 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 80041f8:	4013      	ands	r3, r2
 80041fa:	0019      	movs	r1, r3
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	683a      	ldr	r2, [r7, #0]
 8004202:	430a      	orrs	r2, r1
 8004204:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	0018      	movs	r0, r3
 800420a:	f000 f87b 	bl	8004304 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	68fa      	ldr	r2, [r7, #12]
 8004214:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2288      	movs	r2, #136	; 0x88
 800421a:	2120      	movs	r1, #32
 800421c:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2284      	movs	r2, #132	; 0x84
 8004222:	2100      	movs	r1, #0
 8004224:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004226:	2300      	movs	r3, #0
}
 8004228:	0018      	movs	r0, r3
 800422a:	46bd      	mov	sp, r7
 800422c:	b004      	add	sp, #16
 800422e:	bd80      	pop	{r7, pc}
 8004230:	f1ffffff 	.word	0xf1ffffff

08004234 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004234:	b5b0      	push	{r4, r5, r7, lr}
 8004236:	b08a      	sub	sp, #40	; 0x28
 8004238:	af00      	add	r7, sp, #0
 800423a:	60f8      	str	r0, [r7, #12]
 800423c:	60b9      	str	r1, [r7, #8]
 800423e:	1dbb      	adds	r3, r7, #6
 8004240:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	228c      	movs	r2, #140	; 0x8c
 8004246:	589b      	ldr	r3, [r3, r2]
 8004248:	2b20      	cmp	r3, #32
 800424a:	d156      	bne.n	80042fa <HAL_UARTEx_ReceiveToIdle_DMA+0xc6>
  {
    if ((pData == NULL) || (Size == 0U))
 800424c:	68bb      	ldr	r3, [r7, #8]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d003      	beq.n	800425a <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8004252:	1dbb      	adds	r3, r7, #6
 8004254:	881b      	ldrh	r3, [r3, #0]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d101      	bne.n	800425e <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 800425a:	2301      	movs	r3, #1
 800425c:	e04e      	b.n	80042fc <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a uint16_t frontier, as data copy from RDR will be
       handled by DMA from a uint16_t frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	689a      	ldr	r2, [r3, #8]
 8004262:	2380      	movs	r3, #128	; 0x80
 8004264:	015b      	lsls	r3, r3, #5
 8004266:	429a      	cmp	r2, r3
 8004268:	d109      	bne.n	800427e <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	691b      	ldr	r3, [r3, #16]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d105      	bne.n	800427e <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004272:	68bb      	ldr	r3, [r7, #8]
 8004274:	2201      	movs	r2, #1
 8004276:	4013      	ands	r3, r2
 8004278:	d001      	beq.n	800427e <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
      {
        return  HAL_ERROR;
 800427a:	2301      	movs	r3, #1
 800427c:	e03e      	b.n	80042fc <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
      }
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	2201      	movs	r2, #1
 8004282:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	2200      	movs	r2, #0
 8004288:	671a      	str	r2, [r3, #112]	; 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800428a:	2527      	movs	r5, #39	; 0x27
 800428c:	197c      	adds	r4, r7, r5
 800428e:	1dbb      	adds	r3, r7, #6
 8004290:	881a      	ldrh	r2, [r3, #0]
 8004292:	68b9      	ldr	r1, [r7, #8]
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	0018      	movs	r0, r3
 8004298:	f7ff fc10 	bl	8003abc <UART_Start_Receive_DMA>
 800429c:	0003      	movs	r3, r0
 800429e:	7023      	strb	r3, [r4, #0]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80042a0:	197b      	adds	r3, r7, r5
 80042a2:	781b      	ldrb	r3, [r3, #0]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d124      	bne.n	80042f2 <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80042ac:	2b01      	cmp	r3, #1
 80042ae:	d11c      	bne.n	80042ea <HAL_UARTEx_ReceiveToIdle_DMA+0xb6>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	2210      	movs	r2, #16
 80042b6:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80042b8:	f3ef 8310 	mrs	r3, PRIMASK
 80042bc:	617b      	str	r3, [r7, #20]
  return(result);
 80042be:	697b      	ldr	r3, [r7, #20]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042c0:	623b      	str	r3, [r7, #32]
 80042c2:	2301      	movs	r3, #1
 80042c4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042c6:	69bb      	ldr	r3, [r7, #24]
 80042c8:	f383 8810 	msr	PRIMASK, r3
}
 80042cc:	46c0      	nop			; (mov r8, r8)
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	681a      	ldr	r2, [r3, #0]
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	2110      	movs	r1, #16
 80042da:	430a      	orrs	r2, r1
 80042dc:	601a      	str	r2, [r3, #0]
 80042de:	6a3b      	ldr	r3, [r7, #32]
 80042e0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042e2:	69fb      	ldr	r3, [r7, #28]
 80042e4:	f383 8810 	msr	PRIMASK, r3
}
 80042e8:	e003      	b.n	80042f2 <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80042ea:	2327      	movs	r3, #39	; 0x27
 80042ec:	18fb      	adds	r3, r7, r3
 80042ee:	2201      	movs	r2, #1
 80042f0:	701a      	strb	r2, [r3, #0]
      }
    }

    return status;
 80042f2:	2327      	movs	r3, #39	; 0x27
 80042f4:	18fb      	adds	r3, r7, r3
 80042f6:	781b      	ldrb	r3, [r3, #0]
 80042f8:	e000      	b.n	80042fc <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
  }
  else
  {
    return HAL_BUSY;
 80042fa:	2302      	movs	r3, #2
  }
}
 80042fc:	0018      	movs	r0, r3
 80042fe:	46bd      	mov	sp, r7
 8004300:	b00a      	add	sp, #40	; 0x28
 8004302:	bdb0      	pop	{r4, r5, r7, pc}

08004304 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004304:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004306:	b085      	sub	sp, #20
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004310:	2b00      	cmp	r3, #0
 8004312:	d108      	bne.n	8004326 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	226a      	movs	r2, #106	; 0x6a
 8004318:	2101      	movs	r1, #1
 800431a:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2268      	movs	r2, #104	; 0x68
 8004320:	2101      	movs	r1, #1
 8004322:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004324:	e043      	b.n	80043ae <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004326:	260f      	movs	r6, #15
 8004328:	19bb      	adds	r3, r7, r6
 800432a:	2208      	movs	r2, #8
 800432c:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800432e:	200e      	movs	r0, #14
 8004330:	183b      	adds	r3, r7, r0
 8004332:	2208      	movs	r2, #8
 8004334:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	689b      	ldr	r3, [r3, #8]
 800433c:	0e5b      	lsrs	r3, r3, #25
 800433e:	b2da      	uxtb	r2, r3
 8004340:	240d      	movs	r4, #13
 8004342:	193b      	adds	r3, r7, r4
 8004344:	2107      	movs	r1, #7
 8004346:	400a      	ands	r2, r1
 8004348:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	689b      	ldr	r3, [r3, #8]
 8004350:	0f5b      	lsrs	r3, r3, #29
 8004352:	b2da      	uxtb	r2, r3
 8004354:	250c      	movs	r5, #12
 8004356:	197b      	adds	r3, r7, r5
 8004358:	2107      	movs	r1, #7
 800435a:	400a      	ands	r2, r1
 800435c:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800435e:	183b      	adds	r3, r7, r0
 8004360:	781b      	ldrb	r3, [r3, #0]
 8004362:	197a      	adds	r2, r7, r5
 8004364:	7812      	ldrb	r2, [r2, #0]
 8004366:	4914      	ldr	r1, [pc, #80]	; (80043b8 <UARTEx_SetNbDataToProcess+0xb4>)
 8004368:	5c8a      	ldrb	r2, [r1, r2]
 800436a:	435a      	muls	r2, r3
 800436c:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800436e:	197b      	adds	r3, r7, r5
 8004370:	781b      	ldrb	r3, [r3, #0]
 8004372:	4a12      	ldr	r2, [pc, #72]	; (80043bc <UARTEx_SetNbDataToProcess+0xb8>)
 8004374:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004376:	0019      	movs	r1, r3
 8004378:	f7fb ff50 	bl	800021c <__divsi3>
 800437c:	0003      	movs	r3, r0
 800437e:	b299      	uxth	r1, r3
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	226a      	movs	r2, #106	; 0x6a
 8004384:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004386:	19bb      	adds	r3, r7, r6
 8004388:	781b      	ldrb	r3, [r3, #0]
 800438a:	193a      	adds	r2, r7, r4
 800438c:	7812      	ldrb	r2, [r2, #0]
 800438e:	490a      	ldr	r1, [pc, #40]	; (80043b8 <UARTEx_SetNbDataToProcess+0xb4>)
 8004390:	5c8a      	ldrb	r2, [r1, r2]
 8004392:	435a      	muls	r2, r3
 8004394:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8004396:	193b      	adds	r3, r7, r4
 8004398:	781b      	ldrb	r3, [r3, #0]
 800439a:	4a08      	ldr	r2, [pc, #32]	; (80043bc <UARTEx_SetNbDataToProcess+0xb8>)
 800439c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800439e:	0019      	movs	r1, r3
 80043a0:	f7fb ff3c 	bl	800021c <__divsi3>
 80043a4:	0003      	movs	r3, r0
 80043a6:	b299      	uxth	r1, r3
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2268      	movs	r2, #104	; 0x68
 80043ac:	5299      	strh	r1, [r3, r2]
}
 80043ae:	46c0      	nop			; (mov r8, r8)
 80043b0:	46bd      	mov	sp, r7
 80043b2:	b005      	add	sp, #20
 80043b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80043b6:	46c0      	nop			; (mov r8, r8)
 80043b8:	080077b8 	.word	0x080077b8
 80043bc:	080077c0 	.word	0x080077c0

080043c0 <__NVIC_SetPriority>:
{
 80043c0:	b590      	push	{r4, r7, lr}
 80043c2:	b083      	sub	sp, #12
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	0002      	movs	r2, r0
 80043c8:	6039      	str	r1, [r7, #0]
 80043ca:	1dfb      	adds	r3, r7, #7
 80043cc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80043ce:	1dfb      	adds	r3, r7, #7
 80043d0:	781b      	ldrb	r3, [r3, #0]
 80043d2:	2b7f      	cmp	r3, #127	; 0x7f
 80043d4:	d828      	bhi.n	8004428 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80043d6:	4a2f      	ldr	r2, [pc, #188]	; (8004494 <__NVIC_SetPriority+0xd4>)
 80043d8:	1dfb      	adds	r3, r7, #7
 80043da:	781b      	ldrb	r3, [r3, #0]
 80043dc:	b25b      	sxtb	r3, r3
 80043de:	089b      	lsrs	r3, r3, #2
 80043e0:	33c0      	adds	r3, #192	; 0xc0
 80043e2:	009b      	lsls	r3, r3, #2
 80043e4:	589b      	ldr	r3, [r3, r2]
 80043e6:	1dfa      	adds	r2, r7, #7
 80043e8:	7812      	ldrb	r2, [r2, #0]
 80043ea:	0011      	movs	r1, r2
 80043ec:	2203      	movs	r2, #3
 80043ee:	400a      	ands	r2, r1
 80043f0:	00d2      	lsls	r2, r2, #3
 80043f2:	21ff      	movs	r1, #255	; 0xff
 80043f4:	4091      	lsls	r1, r2
 80043f6:	000a      	movs	r2, r1
 80043f8:	43d2      	mvns	r2, r2
 80043fa:	401a      	ands	r2, r3
 80043fc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	019b      	lsls	r3, r3, #6
 8004402:	22ff      	movs	r2, #255	; 0xff
 8004404:	401a      	ands	r2, r3
 8004406:	1dfb      	adds	r3, r7, #7
 8004408:	781b      	ldrb	r3, [r3, #0]
 800440a:	0018      	movs	r0, r3
 800440c:	2303      	movs	r3, #3
 800440e:	4003      	ands	r3, r0
 8004410:	00db      	lsls	r3, r3, #3
 8004412:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004414:	481f      	ldr	r0, [pc, #124]	; (8004494 <__NVIC_SetPriority+0xd4>)
 8004416:	1dfb      	adds	r3, r7, #7
 8004418:	781b      	ldrb	r3, [r3, #0]
 800441a:	b25b      	sxtb	r3, r3
 800441c:	089b      	lsrs	r3, r3, #2
 800441e:	430a      	orrs	r2, r1
 8004420:	33c0      	adds	r3, #192	; 0xc0
 8004422:	009b      	lsls	r3, r3, #2
 8004424:	501a      	str	r2, [r3, r0]
}
 8004426:	e031      	b.n	800448c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004428:	4a1b      	ldr	r2, [pc, #108]	; (8004498 <__NVIC_SetPriority+0xd8>)
 800442a:	1dfb      	adds	r3, r7, #7
 800442c:	781b      	ldrb	r3, [r3, #0]
 800442e:	0019      	movs	r1, r3
 8004430:	230f      	movs	r3, #15
 8004432:	400b      	ands	r3, r1
 8004434:	3b08      	subs	r3, #8
 8004436:	089b      	lsrs	r3, r3, #2
 8004438:	3306      	adds	r3, #6
 800443a:	009b      	lsls	r3, r3, #2
 800443c:	18d3      	adds	r3, r2, r3
 800443e:	3304      	adds	r3, #4
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	1dfa      	adds	r2, r7, #7
 8004444:	7812      	ldrb	r2, [r2, #0]
 8004446:	0011      	movs	r1, r2
 8004448:	2203      	movs	r2, #3
 800444a:	400a      	ands	r2, r1
 800444c:	00d2      	lsls	r2, r2, #3
 800444e:	21ff      	movs	r1, #255	; 0xff
 8004450:	4091      	lsls	r1, r2
 8004452:	000a      	movs	r2, r1
 8004454:	43d2      	mvns	r2, r2
 8004456:	401a      	ands	r2, r3
 8004458:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	019b      	lsls	r3, r3, #6
 800445e:	22ff      	movs	r2, #255	; 0xff
 8004460:	401a      	ands	r2, r3
 8004462:	1dfb      	adds	r3, r7, #7
 8004464:	781b      	ldrb	r3, [r3, #0]
 8004466:	0018      	movs	r0, r3
 8004468:	2303      	movs	r3, #3
 800446a:	4003      	ands	r3, r0
 800446c:	00db      	lsls	r3, r3, #3
 800446e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004470:	4809      	ldr	r0, [pc, #36]	; (8004498 <__NVIC_SetPriority+0xd8>)
 8004472:	1dfb      	adds	r3, r7, #7
 8004474:	781b      	ldrb	r3, [r3, #0]
 8004476:	001c      	movs	r4, r3
 8004478:	230f      	movs	r3, #15
 800447a:	4023      	ands	r3, r4
 800447c:	3b08      	subs	r3, #8
 800447e:	089b      	lsrs	r3, r3, #2
 8004480:	430a      	orrs	r2, r1
 8004482:	3306      	adds	r3, #6
 8004484:	009b      	lsls	r3, r3, #2
 8004486:	18c3      	adds	r3, r0, r3
 8004488:	3304      	adds	r3, #4
 800448a:	601a      	str	r2, [r3, #0]
}
 800448c:	46c0      	nop			; (mov r8, r8)
 800448e:	46bd      	mov	sp, r7
 8004490:	b003      	add	sp, #12
 8004492:	bd90      	pop	{r4, r7, pc}
 8004494:	e000e100 	.word	0xe000e100
 8004498:	e000ed00 	.word	0xe000ed00

0800449c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800449c:	b580      	push	{r7, lr}
 800449e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80044a0:	4b05      	ldr	r3, [pc, #20]	; (80044b8 <SysTick_Handler+0x1c>)
 80044a2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80044a4:	f002 f84a 	bl	800653c <xTaskGetSchedulerState>
 80044a8:	0003      	movs	r3, r0
 80044aa:	2b01      	cmp	r3, #1
 80044ac:	d001      	beq.n	80044b2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80044ae:	f002 fe03 	bl	80070b8 <xPortSysTickHandler>
  }
}
 80044b2:	46c0      	nop			; (mov r8, r8)
 80044b4:	46bd      	mov	sp, r7
 80044b6:	bd80      	pop	{r7, pc}
 80044b8:	e000e010 	.word	0xe000e010

080044bc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80044bc:	b580      	push	{r7, lr}
 80044be:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80044c0:	2305      	movs	r3, #5
 80044c2:	425b      	negs	r3, r3
 80044c4:	2100      	movs	r1, #0
 80044c6:	0018      	movs	r0, r3
 80044c8:	f7ff ff7a 	bl	80043c0 <__NVIC_SetPriority>
#endif
}
 80044cc:	46c0      	nop			; (mov r8, r8)
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bd80      	pop	{r7, pc}
	...

080044d4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b082      	sub	sp, #8
 80044d8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80044da:	f3ef 8305 	mrs	r3, IPSR
 80044de:	603b      	str	r3, [r7, #0]
  return(result);
 80044e0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d003      	beq.n	80044ee <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80044e6:	2306      	movs	r3, #6
 80044e8:	425b      	negs	r3, r3
 80044ea:	607b      	str	r3, [r7, #4]
 80044ec:	e00c      	b.n	8004508 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80044ee:	4b09      	ldr	r3, [pc, #36]	; (8004514 <osKernelInitialize+0x40>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d105      	bne.n	8004502 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80044f6:	4b07      	ldr	r3, [pc, #28]	; (8004514 <osKernelInitialize+0x40>)
 80044f8:	2201      	movs	r2, #1
 80044fa:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80044fc:	2300      	movs	r3, #0
 80044fe:	607b      	str	r3, [r7, #4]
 8004500:	e002      	b.n	8004508 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004502:	2301      	movs	r3, #1
 8004504:	425b      	negs	r3, r3
 8004506:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004508:	687b      	ldr	r3, [r7, #4]
}
 800450a:	0018      	movs	r0, r3
 800450c:	46bd      	mov	sp, r7
 800450e:	b002      	add	sp, #8
 8004510:	bd80      	pop	{r7, pc}
 8004512:	46c0      	nop			; (mov r8, r8)
 8004514:	200006c4 	.word	0x200006c4

08004518 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004518:	b580      	push	{r7, lr}
 800451a:	b082      	sub	sp, #8
 800451c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800451e:	f3ef 8305 	mrs	r3, IPSR
 8004522:	603b      	str	r3, [r7, #0]
  return(result);
 8004524:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004526:	2b00      	cmp	r3, #0
 8004528:	d003      	beq.n	8004532 <osKernelStart+0x1a>
    stat = osErrorISR;
 800452a:	2306      	movs	r3, #6
 800452c:	425b      	negs	r3, r3
 800452e:	607b      	str	r3, [r7, #4]
 8004530:	e010      	b.n	8004554 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004532:	4b0b      	ldr	r3, [pc, #44]	; (8004560 <osKernelStart+0x48>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	2b01      	cmp	r3, #1
 8004538:	d109      	bne.n	800454e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800453a:	f7ff ffbf 	bl	80044bc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800453e:	4b08      	ldr	r3, [pc, #32]	; (8004560 <osKernelStart+0x48>)
 8004540:	2202      	movs	r2, #2
 8004542:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004544:	f001 fc10 	bl	8005d68 <vTaskStartScheduler>
      stat = osOK;
 8004548:	2300      	movs	r3, #0
 800454a:	607b      	str	r3, [r7, #4]
 800454c:	e002      	b.n	8004554 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800454e:	2301      	movs	r3, #1
 8004550:	425b      	negs	r3, r3
 8004552:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004554:	687b      	ldr	r3, [r7, #4]
}
 8004556:	0018      	movs	r0, r3
 8004558:	46bd      	mov	sp, r7
 800455a:	b002      	add	sp, #8
 800455c:	bd80      	pop	{r7, pc}
 800455e:	46c0      	nop			; (mov r8, r8)
 8004560:	200006c4 	.word	0x200006c4

08004564 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004564:	b5b0      	push	{r4, r5, r7, lr}
 8004566:	b08e      	sub	sp, #56	; 0x38
 8004568:	af04      	add	r7, sp, #16
 800456a:	60f8      	str	r0, [r7, #12]
 800456c:	60b9      	str	r1, [r7, #8]
 800456e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004570:	2300      	movs	r3, #0
 8004572:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004574:	f3ef 8305 	mrs	r3, IPSR
 8004578:	617b      	str	r3, [r7, #20]
  return(result);
 800457a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800457c:	2b00      	cmp	r3, #0
 800457e:	d000      	beq.n	8004582 <osThreadNew+0x1e>
 8004580:	e081      	b.n	8004686 <osThreadNew+0x122>
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d100      	bne.n	800458a <osThreadNew+0x26>
 8004588:	e07d      	b.n	8004686 <osThreadNew+0x122>
    stack = configMINIMAL_STACK_SIZE;
 800458a:	2380      	movs	r3, #128	; 0x80
 800458c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800458e:	2318      	movs	r3, #24
 8004590:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004592:	2300      	movs	r3, #0
 8004594:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8004596:	2301      	movs	r3, #1
 8004598:	425b      	negs	r3, r3
 800459a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d044      	beq.n	800462c <osThreadNew+0xc8>
      if (attr->name != NULL) {
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d002      	beq.n	80045b0 <osThreadNew+0x4c>
        name = attr->name;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	699b      	ldr	r3, [r3, #24]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d002      	beq.n	80045be <osThreadNew+0x5a>
        prio = (UBaseType_t)attr->priority;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	699b      	ldr	r3, [r3, #24]
 80045bc:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80045be:	69fb      	ldr	r3, [r7, #28]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d007      	beq.n	80045d4 <osThreadNew+0x70>
 80045c4:	69fb      	ldr	r3, [r7, #28]
 80045c6:	2b38      	cmp	r3, #56	; 0x38
 80045c8:	d804      	bhi.n	80045d4 <osThreadNew+0x70>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	685b      	ldr	r3, [r3, #4]
 80045ce:	2201      	movs	r2, #1
 80045d0:	4013      	ands	r3, r2
 80045d2:	d001      	beq.n	80045d8 <osThreadNew+0x74>
        return (NULL);
 80045d4:	2300      	movs	r3, #0
 80045d6:	e057      	b.n	8004688 <osThreadNew+0x124>
      }

      if (attr->stack_size > 0U) {
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	695b      	ldr	r3, [r3, #20]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d003      	beq.n	80045e8 <osThreadNew+0x84>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	695b      	ldr	r3, [r3, #20]
 80045e4:	089b      	lsrs	r3, r3, #2
 80045e6:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	689b      	ldr	r3, [r3, #8]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d00e      	beq.n	800460e <osThreadNew+0xaa>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	68db      	ldr	r3, [r3, #12]
 80045f4:	2bbb      	cmp	r3, #187	; 0xbb
 80045f6:	d90a      	bls.n	800460e <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d006      	beq.n	800460e <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	695b      	ldr	r3, [r3, #20]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d002      	beq.n	800460e <osThreadNew+0xaa>
        mem = 1;
 8004608:	2301      	movs	r3, #1
 800460a:	61bb      	str	r3, [r7, #24]
 800460c:	e010      	b.n	8004630 <osThreadNew+0xcc>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	689b      	ldr	r3, [r3, #8]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d10c      	bne.n	8004630 <osThreadNew+0xcc>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	68db      	ldr	r3, [r3, #12]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d108      	bne.n	8004630 <osThreadNew+0xcc>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	691b      	ldr	r3, [r3, #16]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d104      	bne.n	8004630 <osThreadNew+0xcc>
          mem = 0;
 8004626:	2300      	movs	r3, #0
 8004628:	61bb      	str	r3, [r7, #24]
 800462a:	e001      	b.n	8004630 <osThreadNew+0xcc>
        }
      }
    }
    else {
      mem = 0;
 800462c:	2300      	movs	r3, #0
 800462e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004630:	69bb      	ldr	r3, [r7, #24]
 8004632:	2b01      	cmp	r3, #1
 8004634:	d112      	bne.n	800465c <osThreadNew+0xf8>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	691a      	ldr	r2, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	689b      	ldr	r3, [r3, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800463e:	68bd      	ldr	r5, [r7, #8]
 8004640:	6a3c      	ldr	r4, [r7, #32]
 8004642:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004644:	68f8      	ldr	r0, [r7, #12]
 8004646:	9302      	str	r3, [sp, #8]
 8004648:	9201      	str	r2, [sp, #4]
 800464a:	69fb      	ldr	r3, [r7, #28]
 800464c:	9300      	str	r3, [sp, #0]
 800464e:	002b      	movs	r3, r5
 8004650:	0022      	movs	r2, r4
 8004652:	f001 f9f0 	bl	8005a36 <xTaskCreateStatic>
 8004656:	0003      	movs	r3, r0
 8004658:	613b      	str	r3, [r7, #16]
 800465a:	e014      	b.n	8004686 <osThreadNew+0x122>
      #endif
    }
    else {
      if (mem == 0) {
 800465c:	69bb      	ldr	r3, [r7, #24]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d111      	bne.n	8004686 <osThreadNew+0x122>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004662:	6a3b      	ldr	r3, [r7, #32]
 8004664:	b29a      	uxth	r2, r3
 8004666:	68bc      	ldr	r4, [r7, #8]
 8004668:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800466a:	68f8      	ldr	r0, [r7, #12]
 800466c:	2310      	movs	r3, #16
 800466e:	18fb      	adds	r3, r7, r3
 8004670:	9301      	str	r3, [sp, #4]
 8004672:	69fb      	ldr	r3, [r7, #28]
 8004674:	9300      	str	r3, [sp, #0]
 8004676:	0023      	movs	r3, r4
 8004678:	f001 fa21 	bl	8005abe <xTaskCreate>
 800467c:	0003      	movs	r3, r0
 800467e:	2b01      	cmp	r3, #1
 8004680:	d001      	beq.n	8004686 <osThreadNew+0x122>
            hTask = NULL;
 8004682:	2300      	movs	r3, #0
 8004684:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004686:	693b      	ldr	r3, [r7, #16]
}
 8004688:	0018      	movs	r0, r3
 800468a:	46bd      	mov	sp, r7
 800468c:	b00a      	add	sp, #40	; 0x28
 800468e:	bdb0      	pop	{r4, r5, r7, pc}

08004690 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8004690:	b580      	push	{r7, lr}
 8004692:	b08a      	sub	sp, #40	; 0x28
 8004694:	af02      	add	r7, sp, #8
 8004696:	60f8      	str	r0, [r7, #12]
 8004698:	60b9      	str	r1, [r7, #8]
 800469a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800469c:	2300      	movs	r3, #0
 800469e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80046a0:	f3ef 8305 	mrs	r3, IPSR
 80046a4:	613b      	str	r3, [r7, #16]
  return(result);
 80046a6:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d000      	beq.n	80046ae <osSemaphoreNew+0x1e>
 80046ac:	e07f      	b.n	80047ae <osSemaphoreNew+0x11e>
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d100      	bne.n	80046b6 <osSemaphoreNew+0x26>
 80046b4:	e07b      	b.n	80047ae <osSemaphoreNew+0x11e>
 80046b6:	68ba      	ldr	r2, [r7, #8]
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	429a      	cmp	r2, r3
 80046bc:	d900      	bls.n	80046c0 <osSemaphoreNew+0x30>
 80046be:	e076      	b.n	80047ae <osSemaphoreNew+0x11e>
    mem = -1;
 80046c0:	2301      	movs	r3, #1
 80046c2:	425b      	negs	r3, r3
 80046c4:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d015      	beq.n	80046f8 <osSemaphoreNew+0x68>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	689b      	ldr	r3, [r3, #8]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d006      	beq.n	80046e2 <osSemaphoreNew+0x52>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	68db      	ldr	r3, [r3, #12]
 80046d8:	2b4f      	cmp	r3, #79	; 0x4f
 80046da:	d902      	bls.n	80046e2 <osSemaphoreNew+0x52>
        mem = 1;
 80046dc:	2301      	movs	r3, #1
 80046de:	61bb      	str	r3, [r7, #24]
 80046e0:	e00c      	b.n	80046fc <osSemaphoreNew+0x6c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	689b      	ldr	r3, [r3, #8]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d108      	bne.n	80046fc <osSemaphoreNew+0x6c>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	68db      	ldr	r3, [r3, #12]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d104      	bne.n	80046fc <osSemaphoreNew+0x6c>
          mem = 0;
 80046f2:	2300      	movs	r3, #0
 80046f4:	61bb      	str	r3, [r7, #24]
 80046f6:	e001      	b.n	80046fc <osSemaphoreNew+0x6c>
        }
      }
    }
    else {
      mem = 0;
 80046f8:	2300      	movs	r3, #0
 80046fa:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 80046fc:	69bb      	ldr	r3, [r7, #24]
 80046fe:	3301      	adds	r3, #1
 8004700:	d055      	beq.n	80047ae <osSemaphoreNew+0x11e>
      if (max_count == 1U) {
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	2b01      	cmp	r3, #1
 8004706:	d12b      	bne.n	8004760 <osSemaphoreNew+0xd0>
        if (mem == 1) {
 8004708:	69bb      	ldr	r3, [r7, #24]
 800470a:	2b01      	cmp	r3, #1
 800470c:	d10b      	bne.n	8004726 <osSemaphoreNew+0x96>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	689b      	ldr	r3, [r3, #8]
 8004712:	2203      	movs	r2, #3
 8004714:	9200      	str	r2, [sp, #0]
 8004716:	2200      	movs	r2, #0
 8004718:	2100      	movs	r1, #0
 800471a:	2001      	movs	r0, #1
 800471c:	f000 fb39 	bl	8004d92 <xQueueGenericCreateStatic>
 8004720:	0003      	movs	r3, r0
 8004722:	61fb      	str	r3, [r7, #28]
 8004724:	e006      	b.n	8004734 <osSemaphoreNew+0xa4>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8004726:	2203      	movs	r2, #3
 8004728:	2100      	movs	r1, #0
 800472a:	2001      	movs	r0, #1
 800472c:	f000 fb7d 	bl	8004e2a <xQueueGenericCreate>
 8004730:	0003      	movs	r3, r0
 8004732:	61fb      	str	r3, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8004734:	69fb      	ldr	r3, [r7, #28]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d027      	beq.n	800478a <osSemaphoreNew+0xfa>
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d024      	beq.n	800478a <osSemaphoreNew+0xfa>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8004740:	69f8      	ldr	r0, [r7, #28]
 8004742:	2300      	movs	r3, #0
 8004744:	2200      	movs	r2, #0
 8004746:	2100      	movs	r1, #0
 8004748:	f000 fc11 	bl	8004f6e <xQueueGenericSend>
 800474c:	0003      	movs	r3, r0
 800474e:	2b01      	cmp	r3, #1
 8004750:	d01b      	beq.n	800478a <osSemaphoreNew+0xfa>
            vSemaphoreDelete (hSemaphore);
 8004752:	69fb      	ldr	r3, [r7, #28]
 8004754:	0018      	movs	r0, r3
 8004756:	f000 ff99 	bl	800568c <vQueueDelete>
            hSemaphore = NULL;
 800475a:	2300      	movs	r3, #0
 800475c:	61fb      	str	r3, [r7, #28]
 800475e:	e014      	b.n	800478a <osSemaphoreNew+0xfa>
          }
        }
      }
      else {
        if (mem == 1) {
 8004760:	69bb      	ldr	r3, [r7, #24]
 8004762:	2b01      	cmp	r3, #1
 8004764:	d109      	bne.n	800477a <osSemaphoreNew+0xea>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	689a      	ldr	r2, [r3, #8]
 800476a:	68b9      	ldr	r1, [r7, #8]
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	0018      	movs	r0, r3
 8004770:	f000 fbb4 	bl	8004edc <xQueueCreateCountingSemaphoreStatic>
 8004774:	0003      	movs	r3, r0
 8004776:	61fb      	str	r3, [r7, #28]
 8004778:	e007      	b.n	800478a <osSemaphoreNew+0xfa>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800477a:	68ba      	ldr	r2, [r7, #8]
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	0011      	movs	r1, r2
 8004780:	0018      	movs	r0, r3
 8004782:	f000 fbd1 	bl	8004f28 <xQueueCreateCountingSemaphore>
 8004786:	0003      	movs	r3, r0
 8004788:	61fb      	str	r3, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800478a:	69fb      	ldr	r3, [r7, #28]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d00e      	beq.n	80047ae <osSemaphoreNew+0x11e>
        if (attr != NULL) {
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d003      	beq.n	800479e <osSemaphoreNew+0x10e>
          name = attr->name;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	617b      	str	r3, [r7, #20]
 800479c:	e001      	b.n	80047a2 <osSemaphoreNew+0x112>
        } else {
          name = NULL;
 800479e:	2300      	movs	r3, #0
 80047a0:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80047a2:	697a      	ldr	r2, [r7, #20]
 80047a4:	69fb      	ldr	r3, [r7, #28]
 80047a6:	0011      	movs	r1, r2
 80047a8:	0018      	movs	r0, r3
 80047aa:	f001 f8bf 	bl	800592c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80047ae:	69fb      	ldr	r3, [r7, #28]
}
 80047b0:	0018      	movs	r0, r3
 80047b2:	46bd      	mov	sp, r7
 80047b4:	b008      	add	sp, #32
 80047b6:	bd80      	pop	{r7, pc}

080047b8 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b086      	sub	sp, #24
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
 80047c0:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80047c6:	2300      	movs	r3, #0
 80047c8:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80047ca:	693b      	ldr	r3, [r7, #16]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d103      	bne.n	80047d8 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 80047d0:	2304      	movs	r3, #4
 80047d2:	425b      	negs	r3, r3
 80047d4:	617b      	str	r3, [r7, #20]
 80047d6:	e037      	b.n	8004848 <osSemaphoreAcquire+0x90>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80047d8:	f3ef 8305 	mrs	r3, IPSR
 80047dc:	60fb      	str	r3, [r7, #12]
  return(result);
 80047de:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d01e      	beq.n	8004822 <osSemaphoreAcquire+0x6a>
    if (timeout != 0U) {
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d003      	beq.n	80047f2 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 80047ea:	2304      	movs	r3, #4
 80047ec:	425b      	negs	r3, r3
 80047ee:	617b      	str	r3, [r7, #20]
 80047f0:	e02a      	b.n	8004848 <osSemaphoreAcquire+0x90>
    }
    else {
      yield = pdFALSE;
 80047f2:	2300      	movs	r3, #0
 80047f4:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 80047f6:	2308      	movs	r3, #8
 80047f8:	18fa      	adds	r2, r7, r3
 80047fa:	693b      	ldr	r3, [r7, #16]
 80047fc:	2100      	movs	r1, #0
 80047fe:	0018      	movs	r0, r3
 8004800:	f000 fee1 	bl	80055c6 <xQueueReceiveFromISR>
 8004804:	0003      	movs	r3, r0
 8004806:	2b01      	cmp	r3, #1
 8004808:	d003      	beq.n	8004812 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800480a:	2303      	movs	r3, #3
 800480c:	425b      	negs	r3, r3
 800480e:	617b      	str	r3, [r7, #20]
 8004810:	e01a      	b.n	8004848 <osSemaphoreAcquire+0x90>
      } else {
        portYIELD_FROM_ISR (yield);
 8004812:	68bb      	ldr	r3, [r7, #8]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d017      	beq.n	8004848 <osSemaphoreAcquire+0x90>
 8004818:	4b0e      	ldr	r3, [pc, #56]	; (8004854 <osSemaphoreAcquire+0x9c>)
 800481a:	2280      	movs	r2, #128	; 0x80
 800481c:	0552      	lsls	r2, r2, #21
 800481e:	601a      	str	r2, [r3, #0]
 8004820:	e012      	b.n	8004848 <osSemaphoreAcquire+0x90>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8004822:	683a      	ldr	r2, [r7, #0]
 8004824:	693b      	ldr	r3, [r7, #16]
 8004826:	0011      	movs	r1, r2
 8004828:	0018      	movs	r0, r3
 800482a:	f000 fdf2 	bl	8005412 <xQueueSemaphoreTake>
 800482e:	0003      	movs	r3, r0
 8004830:	2b01      	cmp	r3, #1
 8004832:	d009      	beq.n	8004848 <osSemaphoreAcquire+0x90>
      if (timeout != 0U) {
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d003      	beq.n	8004842 <osSemaphoreAcquire+0x8a>
        stat = osErrorTimeout;
 800483a:	2302      	movs	r3, #2
 800483c:	425b      	negs	r3, r3
 800483e:	617b      	str	r3, [r7, #20]
 8004840:	e002      	b.n	8004848 <osSemaphoreAcquire+0x90>
      } else {
        stat = osErrorResource;
 8004842:	2303      	movs	r3, #3
 8004844:	425b      	negs	r3, r3
 8004846:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8004848:	697b      	ldr	r3, [r7, #20]
}
 800484a:	0018      	movs	r0, r3
 800484c:	46bd      	mov	sp, r7
 800484e:	b006      	add	sp, #24
 8004850:	bd80      	pop	{r7, pc}
 8004852:	46c0      	nop			; (mov r8, r8)
 8004854:	e000ed04 	.word	0xe000ed04

08004858 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8004858:	b580      	push	{r7, lr}
 800485a:	b086      	sub	sp, #24
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8004864:	2300      	movs	r3, #0
 8004866:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8004868:	693b      	ldr	r3, [r7, #16]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d103      	bne.n	8004876 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800486e:	2304      	movs	r3, #4
 8004870:	425b      	negs	r3, r3
 8004872:	617b      	str	r3, [r7, #20]
 8004874:	e029      	b.n	80048ca <osSemaphoreRelease+0x72>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004876:	f3ef 8305 	mrs	r3, IPSR
 800487a:	60fb      	str	r3, [r7, #12]
  return(result);
 800487c:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800487e:	2b00      	cmp	r3, #0
 8004880:	d017      	beq.n	80048b2 <osSemaphoreRelease+0x5a>
    yield = pdFALSE;
 8004882:	2300      	movs	r3, #0
 8004884:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8004886:	2308      	movs	r3, #8
 8004888:	18fa      	adds	r2, r7, r3
 800488a:	693b      	ldr	r3, [r7, #16]
 800488c:	0011      	movs	r1, r2
 800488e:	0018      	movs	r0, r3
 8004890:	f000 fca5 	bl	80051de <xQueueGiveFromISR>
 8004894:	0003      	movs	r3, r0
 8004896:	2b01      	cmp	r3, #1
 8004898:	d003      	beq.n	80048a2 <osSemaphoreRelease+0x4a>
      stat = osErrorResource;
 800489a:	2303      	movs	r3, #3
 800489c:	425b      	negs	r3, r3
 800489e:	617b      	str	r3, [r7, #20]
 80048a0:	e013      	b.n	80048ca <osSemaphoreRelease+0x72>
    } else {
      portYIELD_FROM_ISR (yield);
 80048a2:	68bb      	ldr	r3, [r7, #8]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d010      	beq.n	80048ca <osSemaphoreRelease+0x72>
 80048a8:	4b0a      	ldr	r3, [pc, #40]	; (80048d4 <osSemaphoreRelease+0x7c>)
 80048aa:	2280      	movs	r2, #128	; 0x80
 80048ac:	0552      	lsls	r2, r2, #21
 80048ae:	601a      	str	r2, [r3, #0]
 80048b0:	e00b      	b.n	80048ca <osSemaphoreRelease+0x72>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80048b2:	6938      	ldr	r0, [r7, #16]
 80048b4:	2300      	movs	r3, #0
 80048b6:	2200      	movs	r2, #0
 80048b8:	2100      	movs	r1, #0
 80048ba:	f000 fb58 	bl	8004f6e <xQueueGenericSend>
 80048be:	0003      	movs	r3, r0
 80048c0:	2b01      	cmp	r3, #1
 80048c2:	d002      	beq.n	80048ca <osSemaphoreRelease+0x72>
      stat = osErrorResource;
 80048c4:	2303      	movs	r3, #3
 80048c6:	425b      	negs	r3, r3
 80048c8:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 80048ca:	697b      	ldr	r3, [r7, #20]
}
 80048cc:	0018      	movs	r0, r3
 80048ce:	46bd      	mov	sp, r7
 80048d0:	b006      	add	sp, #24
 80048d2:	bd80      	pop	{r7, pc}
 80048d4:	e000ed04 	.word	0xe000ed04

080048d8 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80048d8:	b590      	push	{r4, r7, lr}
 80048da:	b08b      	sub	sp, #44	; 0x2c
 80048dc:	af02      	add	r7, sp, #8
 80048de:	60f8      	str	r0, [r7, #12]
 80048e0:	60b9      	str	r1, [r7, #8]
 80048e2:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80048e4:	2300      	movs	r3, #0
 80048e6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80048e8:	f3ef 8305 	mrs	r3, IPSR
 80048ec:	613b      	str	r3, [r7, #16]
  return(result);
 80048ee:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d000      	beq.n	80048f6 <osMessageQueueNew+0x1e>
 80048f4:	e064      	b.n	80049c0 <osMessageQueueNew+0xe8>
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d100      	bne.n	80048fe <osMessageQueueNew+0x26>
 80048fc:	e060      	b.n	80049c0 <osMessageQueueNew+0xe8>
 80048fe:	68bb      	ldr	r3, [r7, #8]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d05d      	beq.n	80049c0 <osMessageQueueNew+0xe8>
    mem = -1;
 8004904:	2301      	movs	r3, #1
 8004906:	425b      	negs	r3, r3
 8004908:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d028      	beq.n	8004962 <osMessageQueueNew+0x8a>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	689b      	ldr	r3, [r3, #8]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d011      	beq.n	800493c <osMessageQueueNew+0x64>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	68db      	ldr	r3, [r3, #12]
 800491c:	2b4f      	cmp	r3, #79	; 0x4f
 800491e:	d90d      	bls.n	800493c <osMessageQueueNew+0x64>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004924:	2b00      	cmp	r3, #0
 8004926:	d009      	beq.n	800493c <osMessageQueueNew+0x64>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	695a      	ldr	r2, [r3, #20]
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	68b9      	ldr	r1, [r7, #8]
 8004930:	434b      	muls	r3, r1
 8004932:	429a      	cmp	r2, r3
 8004934:	d302      	bcc.n	800493c <osMessageQueueNew+0x64>
        mem = 1;
 8004936:	2301      	movs	r3, #1
 8004938:	61bb      	str	r3, [r7, #24]
 800493a:	e014      	b.n	8004966 <osMessageQueueNew+0x8e>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	689b      	ldr	r3, [r3, #8]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d110      	bne.n	8004966 <osMessageQueueNew+0x8e>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	68db      	ldr	r3, [r3, #12]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d10c      	bne.n	8004966 <osMessageQueueNew+0x8e>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8004950:	2b00      	cmp	r3, #0
 8004952:	d108      	bne.n	8004966 <osMessageQueueNew+0x8e>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	695b      	ldr	r3, [r3, #20]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d104      	bne.n	8004966 <osMessageQueueNew+0x8e>
          mem = 0;
 800495c:	2300      	movs	r3, #0
 800495e:	61bb      	str	r3, [r7, #24]
 8004960:	e001      	b.n	8004966 <osMessageQueueNew+0x8e>
        }
      }
    }
    else {
      mem = 0;
 8004962:	2300      	movs	r3, #0
 8004964:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004966:	69bb      	ldr	r3, [r7, #24]
 8004968:	2b01      	cmp	r3, #1
 800496a:	d10c      	bne.n	8004986 <osMessageQueueNew+0xae>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	691a      	ldr	r2, [r3, #16]
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	689b      	ldr	r3, [r3, #8]
 8004974:	68b9      	ldr	r1, [r7, #8]
 8004976:	68f8      	ldr	r0, [r7, #12]
 8004978:	2400      	movs	r4, #0
 800497a:	9400      	str	r4, [sp, #0]
 800497c:	f000 fa09 	bl	8004d92 <xQueueGenericCreateStatic>
 8004980:	0003      	movs	r3, r0
 8004982:	61fb      	str	r3, [r7, #28]
 8004984:	e00a      	b.n	800499c <osMessageQueueNew+0xc4>
      #endif
    }
    else {
      if (mem == 0) {
 8004986:	69bb      	ldr	r3, [r7, #24]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d107      	bne.n	800499c <osMessageQueueNew+0xc4>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800498c:	68b9      	ldr	r1, [r7, #8]
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	2200      	movs	r2, #0
 8004992:	0018      	movs	r0, r3
 8004994:	f000 fa49 	bl	8004e2a <xQueueGenericCreate>
 8004998:	0003      	movs	r3, r0
 800499a:	61fb      	str	r3, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800499c:	69fb      	ldr	r3, [r7, #28]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d00e      	beq.n	80049c0 <osMessageQueueNew+0xe8>
      if (attr != NULL) {
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d003      	beq.n	80049b0 <osMessageQueueNew+0xd8>
        name = attr->name;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	617b      	str	r3, [r7, #20]
 80049ae:	e001      	b.n	80049b4 <osMessageQueueNew+0xdc>
      } else {
        name = NULL;
 80049b0:	2300      	movs	r3, #0
 80049b2:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80049b4:	697a      	ldr	r2, [r7, #20]
 80049b6:	69fb      	ldr	r3, [r7, #28]
 80049b8:	0011      	movs	r1, r2
 80049ba:	0018      	movs	r0, r3
 80049bc:	f000 ffb6 	bl	800592c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80049c0:	69fb      	ldr	r3, [r7, #28]
}
 80049c2:	0018      	movs	r0, r3
 80049c4:	46bd      	mov	sp, r7
 80049c6:	b009      	add	sp, #36	; 0x24
 80049c8:	bd90      	pop	{r4, r7, pc}
	...

080049cc <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b088      	sub	sp, #32
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	60f8      	str	r0, [r7, #12]
 80049d4:	60b9      	str	r1, [r7, #8]
 80049d6:	603b      	str	r3, [r7, #0]
 80049d8:	1dfb      	adds	r3, r7, #7
 80049da:	701a      	strb	r2, [r3, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80049e0:	2300      	movs	r3, #0
 80049e2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80049e4:	f3ef 8305 	mrs	r3, IPSR
 80049e8:	617b      	str	r3, [r7, #20]
  return(result);
 80049ea:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d024      	beq.n	8004a3a <osMessageQueuePut+0x6e>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80049f0:	69bb      	ldr	r3, [r7, #24]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d005      	beq.n	8004a02 <osMessageQueuePut+0x36>
 80049f6:	68bb      	ldr	r3, [r7, #8]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d002      	beq.n	8004a02 <osMessageQueuePut+0x36>
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d003      	beq.n	8004a0a <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8004a02:	2304      	movs	r3, #4
 8004a04:	425b      	negs	r3, r3
 8004a06:	61fb      	str	r3, [r7, #28]
 8004a08:	e034      	b.n	8004a74 <osMessageQueuePut+0xa8>
    }
    else {
      yield = pdFALSE;
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8004a0e:	2310      	movs	r3, #16
 8004a10:	18fa      	adds	r2, r7, r3
 8004a12:	68b9      	ldr	r1, [r7, #8]
 8004a14:	69b8      	ldr	r0, [r7, #24]
 8004a16:	2300      	movs	r3, #0
 8004a18:	f000 fb6d 	bl	80050f6 <xQueueGenericSendFromISR>
 8004a1c:	0003      	movs	r3, r0
 8004a1e:	2b01      	cmp	r3, #1
 8004a20:	d003      	beq.n	8004a2a <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8004a22:	2303      	movs	r3, #3
 8004a24:	425b      	negs	r3, r3
 8004a26:	61fb      	str	r3, [r7, #28]
 8004a28:	e024      	b.n	8004a74 <osMessageQueuePut+0xa8>
      } else {
        portYIELD_FROM_ISR (yield);
 8004a2a:	693b      	ldr	r3, [r7, #16]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d021      	beq.n	8004a74 <osMessageQueuePut+0xa8>
 8004a30:	4b13      	ldr	r3, [pc, #76]	; (8004a80 <osMessageQueuePut+0xb4>)
 8004a32:	2280      	movs	r2, #128	; 0x80
 8004a34:	0552      	lsls	r2, r2, #21
 8004a36:	601a      	str	r2, [r3, #0]
 8004a38:	e01c      	b.n	8004a74 <osMessageQueuePut+0xa8>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8004a3a:	69bb      	ldr	r3, [r7, #24]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d002      	beq.n	8004a46 <osMessageQueuePut+0x7a>
 8004a40:	68bb      	ldr	r3, [r7, #8]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d103      	bne.n	8004a4e <osMessageQueuePut+0x82>
      stat = osErrorParameter;
 8004a46:	2304      	movs	r3, #4
 8004a48:	425b      	negs	r3, r3
 8004a4a:	61fb      	str	r3, [r7, #28]
 8004a4c:	e012      	b.n	8004a74 <osMessageQueuePut+0xa8>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8004a4e:	683a      	ldr	r2, [r7, #0]
 8004a50:	68b9      	ldr	r1, [r7, #8]
 8004a52:	69b8      	ldr	r0, [r7, #24]
 8004a54:	2300      	movs	r3, #0
 8004a56:	f000 fa8a 	bl	8004f6e <xQueueGenericSend>
 8004a5a:	0003      	movs	r3, r0
 8004a5c:	2b01      	cmp	r3, #1
 8004a5e:	d009      	beq.n	8004a74 <osMessageQueuePut+0xa8>
        if (timeout != 0U) {
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d003      	beq.n	8004a6e <osMessageQueuePut+0xa2>
          stat = osErrorTimeout;
 8004a66:	2302      	movs	r3, #2
 8004a68:	425b      	negs	r3, r3
 8004a6a:	61fb      	str	r3, [r7, #28]
 8004a6c:	e002      	b.n	8004a74 <osMessageQueuePut+0xa8>
        } else {
          stat = osErrorResource;
 8004a6e:	2303      	movs	r3, #3
 8004a70:	425b      	negs	r3, r3
 8004a72:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8004a74:	69fb      	ldr	r3, [r7, #28]
}
 8004a76:	0018      	movs	r0, r3
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	b008      	add	sp, #32
 8004a7c:	bd80      	pop	{r7, pc}
 8004a7e:	46c0      	nop			; (mov r8, r8)
 8004a80:	e000ed04 	.word	0xe000ed04

08004a84 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b088      	sub	sp, #32
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	60f8      	str	r0, [r7, #12]
 8004a8c:	60b9      	str	r1, [r7, #8]
 8004a8e:	607a      	str	r2, [r7, #4]
 8004a90:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8004a96:	2300      	movs	r3, #0
 8004a98:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004a9a:	f3ef 8305 	mrs	r3, IPSR
 8004a9e:	617b      	str	r3, [r7, #20]
  return(result);
 8004aa0:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d024      	beq.n	8004af0 <osMessageQueueGet+0x6c>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004aa6:	69bb      	ldr	r3, [r7, #24]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d005      	beq.n	8004ab8 <osMessageQueueGet+0x34>
 8004aac:	68bb      	ldr	r3, [r7, #8]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d002      	beq.n	8004ab8 <osMessageQueueGet+0x34>
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d003      	beq.n	8004ac0 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8004ab8:	2304      	movs	r3, #4
 8004aba:	425b      	negs	r3, r3
 8004abc:	61fb      	str	r3, [r7, #28]
 8004abe:	e034      	b.n	8004b2a <osMessageQueueGet+0xa6>
    }
    else {
      yield = pdFALSE;
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8004ac4:	2310      	movs	r3, #16
 8004ac6:	18fa      	adds	r2, r7, r3
 8004ac8:	68b9      	ldr	r1, [r7, #8]
 8004aca:	69bb      	ldr	r3, [r7, #24]
 8004acc:	0018      	movs	r0, r3
 8004ace:	f000 fd7a 	bl	80055c6 <xQueueReceiveFromISR>
 8004ad2:	0003      	movs	r3, r0
 8004ad4:	2b01      	cmp	r3, #1
 8004ad6:	d003      	beq.n	8004ae0 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8004ad8:	2303      	movs	r3, #3
 8004ada:	425b      	negs	r3, r3
 8004adc:	61fb      	str	r3, [r7, #28]
 8004ade:	e024      	b.n	8004b2a <osMessageQueueGet+0xa6>
      } else {
        portYIELD_FROM_ISR (yield);
 8004ae0:	693b      	ldr	r3, [r7, #16]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d021      	beq.n	8004b2a <osMessageQueueGet+0xa6>
 8004ae6:	4b13      	ldr	r3, [pc, #76]	; (8004b34 <osMessageQueueGet+0xb0>)
 8004ae8:	2280      	movs	r2, #128	; 0x80
 8004aea:	0552      	lsls	r2, r2, #21
 8004aec:	601a      	str	r2, [r3, #0]
 8004aee:	e01c      	b.n	8004b2a <osMessageQueueGet+0xa6>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8004af0:	69bb      	ldr	r3, [r7, #24]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d002      	beq.n	8004afc <osMessageQueueGet+0x78>
 8004af6:	68bb      	ldr	r3, [r7, #8]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d103      	bne.n	8004b04 <osMessageQueueGet+0x80>
      stat = osErrorParameter;
 8004afc:	2304      	movs	r3, #4
 8004afe:	425b      	negs	r3, r3
 8004b00:	61fb      	str	r3, [r7, #28]
 8004b02:	e012      	b.n	8004b2a <osMessageQueueGet+0xa6>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8004b04:	683a      	ldr	r2, [r7, #0]
 8004b06:	68b9      	ldr	r1, [r7, #8]
 8004b08:	69bb      	ldr	r3, [r7, #24]
 8004b0a:	0018      	movs	r0, r3
 8004b0c:	f000 fbcc 	bl	80052a8 <xQueueReceive>
 8004b10:	0003      	movs	r3, r0
 8004b12:	2b01      	cmp	r3, #1
 8004b14:	d009      	beq.n	8004b2a <osMessageQueueGet+0xa6>
        if (timeout != 0U) {
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d003      	beq.n	8004b24 <osMessageQueueGet+0xa0>
          stat = osErrorTimeout;
 8004b1c:	2302      	movs	r3, #2
 8004b1e:	425b      	negs	r3, r3
 8004b20:	61fb      	str	r3, [r7, #28]
 8004b22:	e002      	b.n	8004b2a <osMessageQueueGet+0xa6>
        } else {
          stat = osErrorResource;
 8004b24:	2303      	movs	r3, #3
 8004b26:	425b      	negs	r3, r3
 8004b28:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8004b2a:	69fb      	ldr	r3, [r7, #28]
}
 8004b2c:	0018      	movs	r0, r3
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	b008      	add	sp, #32
 8004b32:	bd80      	pop	{r7, pc}
 8004b34:	e000ed04 	.word	0xe000ed04

08004b38 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b084      	sub	sp, #16
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	60f8      	str	r0, [r7, #12]
 8004b40:	60b9      	str	r1, [r7, #8]
 8004b42:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	4a06      	ldr	r2, [pc, #24]	; (8004b60 <vApplicationGetIdleTaskMemory+0x28>)
 8004b48:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004b4a:	68bb      	ldr	r3, [r7, #8]
 8004b4c:	4a05      	ldr	r2, [pc, #20]	; (8004b64 <vApplicationGetIdleTaskMemory+0x2c>)
 8004b4e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2280      	movs	r2, #128	; 0x80
 8004b54:	601a      	str	r2, [r3, #0]
}
 8004b56:	46c0      	nop			; (mov r8, r8)
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	b004      	add	sp, #16
 8004b5c:	bd80      	pop	{r7, pc}
 8004b5e:	46c0      	nop			; (mov r8, r8)
 8004b60:	200006c8 	.word	0x200006c8
 8004b64:	20000784 	.word	0x20000784

08004b68 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b084      	sub	sp, #16
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	60f8      	str	r0, [r7, #12]
 8004b70:	60b9      	str	r1, [r7, #8]
 8004b72:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	4a06      	ldr	r2, [pc, #24]	; (8004b90 <vApplicationGetTimerTaskMemory+0x28>)
 8004b78:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004b7a:	68bb      	ldr	r3, [r7, #8]
 8004b7c:	4a05      	ldr	r2, [pc, #20]	; (8004b94 <vApplicationGetTimerTaskMemory+0x2c>)
 8004b7e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2280      	movs	r2, #128	; 0x80
 8004b84:	0052      	lsls	r2, r2, #1
 8004b86:	601a      	str	r2, [r3, #0]
}
 8004b88:	46c0      	nop			; (mov r8, r8)
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	b004      	add	sp, #16
 8004b8e:	bd80      	pop	{r7, pc}
 8004b90:	20000984 	.word	0x20000984
 8004b94:	20000a40 	.word	0x20000a40

08004b98 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b082      	sub	sp, #8
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	3308      	adds	r3, #8
 8004ba4:	001a      	movs	r2, r3
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2201      	movs	r2, #1
 8004bae:	4252      	negs	r2, r2
 8004bb0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	3308      	adds	r3, #8
 8004bb6:	001a      	movs	r2, r3
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	3308      	adds	r3, #8
 8004bc0:	001a      	movs	r2, r3
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2200      	movs	r2, #0
 8004bca:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004bcc:	46c0      	nop			; (mov r8, r8)
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	b002      	add	sp, #8
 8004bd2:	bd80      	pop	{r7, pc}

08004bd4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b082      	sub	sp, #8
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2200      	movs	r2, #0
 8004be0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004be2:	46c0      	nop			; (mov r8, r8)
 8004be4:	46bd      	mov	sp, r7
 8004be6:	b002      	add	sp, #8
 8004be8:	bd80      	pop	{r7, pc}

08004bea <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004bea:	b580      	push	{r7, lr}
 8004bec:	b084      	sub	sp, #16
 8004bee:	af00      	add	r7, sp, #0
 8004bf0:	6078      	str	r0, [r7, #4]
 8004bf2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	685b      	ldr	r3, [r3, #4]
 8004bf8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	68fa      	ldr	r2, [r7, #12]
 8004bfe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	689a      	ldr	r2, [r3, #8]
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	689b      	ldr	r3, [r3, #8]
 8004c0c:	683a      	ldr	r2, [r7, #0]
 8004c0e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	683a      	ldr	r2, [r7, #0]
 8004c14:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	687a      	ldr	r2, [r7, #4]
 8004c1a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	1c5a      	adds	r2, r3, #1
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	601a      	str	r2, [r3, #0]
}
 8004c26:	46c0      	nop			; (mov r8, r8)
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	b004      	add	sp, #16
 8004c2c:	bd80      	pop	{r7, pc}

08004c2e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004c2e:	b580      	push	{r7, lr}
 8004c30:	b084      	sub	sp, #16
 8004c32:	af00      	add	r7, sp, #0
 8004c34:	6078      	str	r0, [r7, #4]
 8004c36:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004c3e:	68bb      	ldr	r3, [r7, #8]
 8004c40:	3301      	adds	r3, #1
 8004c42:	d103      	bne.n	8004c4c <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	691b      	ldr	r3, [r3, #16]
 8004c48:	60fb      	str	r3, [r7, #12]
 8004c4a:	e00c      	b.n	8004c66 <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	3308      	adds	r3, #8
 8004c50:	60fb      	str	r3, [r7, #12]
 8004c52:	e002      	b.n	8004c5a <vListInsert+0x2c>
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	685b      	ldr	r3, [r3, #4]
 8004c58:	60fb      	str	r3, [r7, #12]
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	685b      	ldr	r3, [r3, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	68ba      	ldr	r2, [r7, #8]
 8004c62:	429a      	cmp	r2, r3
 8004c64:	d2f6      	bcs.n	8004c54 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	685a      	ldr	r2, [r3, #4]
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	685b      	ldr	r3, [r3, #4]
 8004c72:	683a      	ldr	r2, [r7, #0]
 8004c74:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	68fa      	ldr	r2, [r7, #12]
 8004c7a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	683a      	ldr	r2, [r7, #0]
 8004c80:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	687a      	ldr	r2, [r7, #4]
 8004c86:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	1c5a      	adds	r2, r3, #1
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	601a      	str	r2, [r3, #0]
}
 8004c92:	46c0      	nop			; (mov r8, r8)
 8004c94:	46bd      	mov	sp, r7
 8004c96:	b004      	add	sp, #16
 8004c98:	bd80      	pop	{r7, pc}

08004c9a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004c9a:	b580      	push	{r7, lr}
 8004c9c:	b084      	sub	sp, #16
 8004c9e:	af00      	add	r7, sp, #0
 8004ca0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	691b      	ldr	r3, [r3, #16]
 8004ca6:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	687a      	ldr	r2, [r7, #4]
 8004cae:	6892      	ldr	r2, [r2, #8]
 8004cb0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	689b      	ldr	r3, [r3, #8]
 8004cb6:	687a      	ldr	r2, [r7, #4]
 8004cb8:	6852      	ldr	r2, [r2, #4]
 8004cba:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	685b      	ldr	r3, [r3, #4]
 8004cc0:	687a      	ldr	r2, [r7, #4]
 8004cc2:	429a      	cmp	r2, r3
 8004cc4:	d103      	bne.n	8004cce <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	689a      	ldr	r2, [r3, #8]
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	1e5a      	subs	r2, r3, #1
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
}
 8004ce2:	0018      	movs	r0, r3
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	b004      	add	sp, #16
 8004ce8:	bd80      	pop	{r7, pc}

08004cea <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004cea:	b580      	push	{r7, lr}
 8004cec:	b084      	sub	sp, #16
 8004cee:	af00      	add	r7, sp, #0
 8004cf0:	6078      	str	r0, [r7, #4]
 8004cf2:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d101      	bne.n	8004d02 <xQueueGenericReset+0x18>
 8004cfe:	b672      	cpsid	i
 8004d00:	e7fe      	b.n	8004d00 <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
 8004d02:	f002 f97d 	bl	8007000 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681a      	ldr	r2, [r3, #0]
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d12:	434b      	muls	r3, r1
 8004d14:	18d2      	adds	r2, r2, r3
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681a      	ldr	r2, [r3, #0]
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681a      	ldr	r2, [r3, #0]
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d30:	1e59      	subs	r1, r3, #1
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d36:	434b      	muls	r3, r1
 8004d38:	18d2      	adds	r2, r2, r3
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	2244      	movs	r2, #68	; 0x44
 8004d42:	21ff      	movs	r1, #255	; 0xff
 8004d44:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	2245      	movs	r2, #69	; 0x45
 8004d4a:	21ff      	movs	r1, #255	; 0xff
 8004d4c:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d10d      	bne.n	8004d70 <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	691b      	ldr	r3, [r3, #16]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d013      	beq.n	8004d84 <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	3310      	adds	r3, #16
 8004d60:	0018      	movs	r0, r3
 8004d62:	f001 fa53 	bl	800620c <xTaskRemoveFromEventList>
 8004d66:	1e03      	subs	r3, r0, #0
 8004d68:	d00c      	beq.n	8004d84 <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004d6a:	f002 f939 	bl	8006fe0 <vPortYield>
 8004d6e:	e009      	b.n	8004d84 <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	3310      	adds	r3, #16
 8004d74:	0018      	movs	r0, r3
 8004d76:	f7ff ff0f 	bl	8004b98 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	3324      	adds	r3, #36	; 0x24
 8004d7e:	0018      	movs	r0, r3
 8004d80:	f7ff ff0a 	bl	8004b98 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004d84:	f002 f94e 	bl	8007024 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004d88:	2301      	movs	r3, #1
}
 8004d8a:	0018      	movs	r0, r3
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	b004      	add	sp, #16
 8004d90:	bd80      	pop	{r7, pc}

08004d92 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004d92:	b590      	push	{r4, r7, lr}
 8004d94:	b089      	sub	sp, #36	; 0x24
 8004d96:	af02      	add	r7, sp, #8
 8004d98:	60f8      	str	r0, [r7, #12]
 8004d9a:	60b9      	str	r1, [r7, #8]
 8004d9c:	607a      	str	r2, [r7, #4]
 8004d9e:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d101      	bne.n	8004daa <xQueueGenericCreateStatic+0x18>
 8004da6:	b672      	cpsid	i
 8004da8:	e7fe      	b.n	8004da8 <xQueueGenericCreateStatic+0x16>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d101      	bne.n	8004db4 <xQueueGenericCreateStatic+0x22>
 8004db0:	b672      	cpsid	i
 8004db2:	e7fe      	b.n	8004db2 <xQueueGenericCreateStatic+0x20>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d002      	beq.n	8004dc0 <xQueueGenericCreateStatic+0x2e>
 8004dba:	68bb      	ldr	r3, [r7, #8]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d001      	beq.n	8004dc4 <xQueueGenericCreateStatic+0x32>
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	e000      	b.n	8004dc6 <xQueueGenericCreateStatic+0x34>
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d101      	bne.n	8004dce <xQueueGenericCreateStatic+0x3c>
 8004dca:	b672      	cpsid	i
 8004dcc:	e7fe      	b.n	8004dcc <xQueueGenericCreateStatic+0x3a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d102      	bne.n	8004dda <xQueueGenericCreateStatic+0x48>
 8004dd4:	68bb      	ldr	r3, [r7, #8]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d101      	bne.n	8004dde <xQueueGenericCreateStatic+0x4c>
 8004dda:	2301      	movs	r3, #1
 8004ddc:	e000      	b.n	8004de0 <xQueueGenericCreateStatic+0x4e>
 8004dde:	2300      	movs	r3, #0
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d101      	bne.n	8004de8 <xQueueGenericCreateStatic+0x56>
 8004de4:	b672      	cpsid	i
 8004de6:	e7fe      	b.n	8004de6 <xQueueGenericCreateStatic+0x54>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004de8:	2350      	movs	r3, #80	; 0x50
 8004dea:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004dec:	693b      	ldr	r3, [r7, #16]
 8004dee:	2b50      	cmp	r3, #80	; 0x50
 8004df0:	d001      	beq.n	8004df6 <xQueueGenericCreateStatic+0x64>
 8004df2:	b672      	cpsid	i
 8004df4:	e7fe      	b.n	8004df4 <xQueueGenericCreateStatic+0x62>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004df6:	693b      	ldr	r3, [r7, #16]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 8004dfc:	697b      	ldr	r3, [r7, #20]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d00e      	beq.n	8004e20 <xQueueGenericCreateStatic+0x8e>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004e02:	697b      	ldr	r3, [r7, #20]
 8004e04:	2246      	movs	r2, #70	; 0x46
 8004e06:	2101      	movs	r1, #1
 8004e08:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004e0a:	2328      	movs	r3, #40	; 0x28
 8004e0c:	18fb      	adds	r3, r7, r3
 8004e0e:	781c      	ldrb	r4, [r3, #0]
 8004e10:	687a      	ldr	r2, [r7, #4]
 8004e12:	68b9      	ldr	r1, [r7, #8]
 8004e14:	68f8      	ldr	r0, [r7, #12]
 8004e16:	697b      	ldr	r3, [r7, #20]
 8004e18:	9300      	str	r3, [sp, #0]
 8004e1a:	0023      	movs	r3, r4
 8004e1c:	f000 f837 	bl	8004e8e <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004e20:	697b      	ldr	r3, [r7, #20]
	}
 8004e22:	0018      	movs	r0, r3
 8004e24:	46bd      	mov	sp, r7
 8004e26:	b007      	add	sp, #28
 8004e28:	bd90      	pop	{r4, r7, pc}

08004e2a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004e2a:	b590      	push	{r4, r7, lr}
 8004e2c:	b08b      	sub	sp, #44	; 0x2c
 8004e2e:	af02      	add	r7, sp, #8
 8004e30:	60f8      	str	r0, [r7, #12]
 8004e32:	60b9      	str	r1, [r7, #8]
 8004e34:	1dfb      	adds	r3, r7, #7
 8004e36:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d101      	bne.n	8004e42 <xQueueGenericCreate+0x18>
 8004e3e:	b672      	cpsid	i
 8004e40:	e7fe      	b.n	8004e40 <xQueueGenericCreate+0x16>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	68ba      	ldr	r2, [r7, #8]
 8004e46:	4353      	muls	r3, r2
 8004e48:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004e4a:	69fb      	ldr	r3, [r7, #28]
 8004e4c:	3350      	adds	r3, #80	; 0x50
 8004e4e:	0018      	movs	r0, r3
 8004e50:	f002 f96e 	bl	8007130 <pvPortMalloc>
 8004e54:	0003      	movs	r3, r0
 8004e56:	61bb      	str	r3, [r7, #24]

		if( pxNewQueue != NULL )
 8004e58:	69bb      	ldr	r3, [r7, #24]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d012      	beq.n	8004e84 <xQueueGenericCreate+0x5a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004e5e:	69bb      	ldr	r3, [r7, #24]
 8004e60:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004e62:	697b      	ldr	r3, [r7, #20]
 8004e64:	3350      	adds	r3, #80	; 0x50
 8004e66:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004e68:	69bb      	ldr	r3, [r7, #24]
 8004e6a:	2246      	movs	r2, #70	; 0x46
 8004e6c:	2100      	movs	r1, #0
 8004e6e:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004e70:	1dfb      	adds	r3, r7, #7
 8004e72:	781c      	ldrb	r4, [r3, #0]
 8004e74:	697a      	ldr	r2, [r7, #20]
 8004e76:	68b9      	ldr	r1, [r7, #8]
 8004e78:	68f8      	ldr	r0, [r7, #12]
 8004e7a:	69bb      	ldr	r3, [r7, #24]
 8004e7c:	9300      	str	r3, [sp, #0]
 8004e7e:	0023      	movs	r3, r4
 8004e80:	f000 f805 	bl	8004e8e <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004e84:	69bb      	ldr	r3, [r7, #24]
	}
 8004e86:	0018      	movs	r0, r3
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	b009      	add	sp, #36	; 0x24
 8004e8c:	bd90      	pop	{r4, r7, pc}

08004e8e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004e8e:	b580      	push	{r7, lr}
 8004e90:	b084      	sub	sp, #16
 8004e92:	af00      	add	r7, sp, #0
 8004e94:	60f8      	str	r0, [r7, #12]
 8004e96:	60b9      	str	r1, [r7, #8]
 8004e98:	607a      	str	r2, [r7, #4]
 8004e9a:	001a      	movs	r2, r3
 8004e9c:	1cfb      	adds	r3, r7, #3
 8004e9e:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004ea0:	68bb      	ldr	r3, [r7, #8]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d103      	bne.n	8004eae <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004ea6:	69bb      	ldr	r3, [r7, #24]
 8004ea8:	69ba      	ldr	r2, [r7, #24]
 8004eaa:	601a      	str	r2, [r3, #0]
 8004eac:	e002      	b.n	8004eb4 <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004eae:	69bb      	ldr	r3, [r7, #24]
 8004eb0:	687a      	ldr	r2, [r7, #4]
 8004eb2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004eb4:	69bb      	ldr	r3, [r7, #24]
 8004eb6:	68fa      	ldr	r2, [r7, #12]
 8004eb8:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004eba:	69bb      	ldr	r3, [r7, #24]
 8004ebc:	68ba      	ldr	r2, [r7, #8]
 8004ebe:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004ec0:	69bb      	ldr	r3, [r7, #24]
 8004ec2:	2101      	movs	r1, #1
 8004ec4:	0018      	movs	r0, r3
 8004ec6:	f7ff ff10 	bl	8004cea <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004eca:	69bb      	ldr	r3, [r7, #24]
 8004ecc:	1cfa      	adds	r2, r7, #3
 8004ece:	214c      	movs	r1, #76	; 0x4c
 8004ed0:	7812      	ldrb	r2, [r2, #0]
 8004ed2:	545a      	strb	r2, [r3, r1]
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004ed4:	46c0      	nop			; (mov r8, r8)
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	b004      	add	sp, #16
 8004eda:	bd80      	pop	{r7, pc}

08004edc <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b088      	sub	sp, #32
 8004ee0:	af02      	add	r7, sp, #8
 8004ee2:	60f8      	str	r0, [r7, #12]
 8004ee4:	60b9      	str	r1, [r7, #8]
 8004ee6:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d101      	bne.n	8004ef2 <xQueueCreateCountingSemaphoreStatic+0x16>
 8004eee:	b672      	cpsid	i
 8004ef0:	e7fe      	b.n	8004ef0 <xQueueCreateCountingSemaphoreStatic+0x14>
		configASSERT( uxInitialCount <= uxMaxCount );
 8004ef2:	68ba      	ldr	r2, [r7, #8]
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	429a      	cmp	r2, r3
 8004ef8:	d901      	bls.n	8004efe <xQueueCreateCountingSemaphoreStatic+0x22>
 8004efa:	b672      	cpsid	i
 8004efc:	e7fe      	b.n	8004efc <xQueueCreateCountingSemaphoreStatic+0x20>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	68f8      	ldr	r0, [r7, #12]
 8004f02:	2202      	movs	r2, #2
 8004f04:	9200      	str	r2, [sp, #0]
 8004f06:	2200      	movs	r2, #0
 8004f08:	2100      	movs	r1, #0
 8004f0a:	f7ff ff42 	bl	8004d92 <xQueueGenericCreateStatic>
 8004f0e:	0003      	movs	r3, r0
 8004f10:	617b      	str	r3, [r7, #20]

		if( xHandle != NULL )
 8004f12:	697b      	ldr	r3, [r7, #20]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d002      	beq.n	8004f1e <xQueueCreateCountingSemaphoreStatic+0x42>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8004f18:	697b      	ldr	r3, [r7, #20]
 8004f1a:	68ba      	ldr	r2, [r7, #8]
 8004f1c:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8004f1e:	697b      	ldr	r3, [r7, #20]
	}
 8004f20:	0018      	movs	r0, r3
 8004f22:	46bd      	mov	sp, r7
 8004f24:	b006      	add	sp, #24
 8004f26:	bd80      	pop	{r7, pc}

08004f28 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b084      	sub	sp, #16
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
 8004f30:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d101      	bne.n	8004f3c <xQueueCreateCountingSemaphore+0x14>
 8004f38:	b672      	cpsid	i
 8004f3a:	e7fe      	b.n	8004f3a <xQueueCreateCountingSemaphore+0x12>
		configASSERT( uxInitialCount <= uxMaxCount );
 8004f3c:	683a      	ldr	r2, [r7, #0]
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	429a      	cmp	r2, r3
 8004f42:	d901      	bls.n	8004f48 <xQueueCreateCountingSemaphore+0x20>
 8004f44:	b672      	cpsid	i
 8004f46:	e7fe      	b.n	8004f46 <xQueueCreateCountingSemaphore+0x1e>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2202      	movs	r2, #2
 8004f4c:	2100      	movs	r1, #0
 8004f4e:	0018      	movs	r0, r3
 8004f50:	f7ff ff6b 	bl	8004e2a <xQueueGenericCreate>
 8004f54:	0003      	movs	r3, r0
 8004f56:	60fb      	str	r3, [r7, #12]

		if( xHandle != NULL )
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d002      	beq.n	8004f64 <xQueueCreateCountingSemaphore+0x3c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	683a      	ldr	r2, [r7, #0]
 8004f62:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8004f64:	68fb      	ldr	r3, [r7, #12]
	}
 8004f66:	0018      	movs	r0, r3
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	b004      	add	sp, #16
 8004f6c:	bd80      	pop	{r7, pc}

08004f6e <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004f6e:	b580      	push	{r7, lr}
 8004f70:	b08a      	sub	sp, #40	; 0x28
 8004f72:	af00      	add	r7, sp, #0
 8004f74:	60f8      	str	r0, [r7, #12]
 8004f76:	60b9      	str	r1, [r7, #8]
 8004f78:	607a      	str	r2, [r7, #4]
 8004f7a:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 8004f84:	6a3b      	ldr	r3, [r7, #32]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d101      	bne.n	8004f8e <xQueueGenericSend+0x20>
 8004f8a:	b672      	cpsid	i
 8004f8c:	e7fe      	b.n	8004f8c <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004f8e:	68bb      	ldr	r3, [r7, #8]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d103      	bne.n	8004f9c <xQueueGenericSend+0x2e>
 8004f94:	6a3b      	ldr	r3, [r7, #32]
 8004f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d101      	bne.n	8004fa0 <xQueueGenericSend+0x32>
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	e000      	b.n	8004fa2 <xQueueGenericSend+0x34>
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d101      	bne.n	8004faa <xQueueGenericSend+0x3c>
 8004fa6:	b672      	cpsid	i
 8004fa8:	e7fe      	b.n	8004fa8 <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	2b02      	cmp	r3, #2
 8004fae:	d103      	bne.n	8004fb8 <xQueueGenericSend+0x4a>
 8004fb0:	6a3b      	ldr	r3, [r7, #32]
 8004fb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fb4:	2b01      	cmp	r3, #1
 8004fb6:	d101      	bne.n	8004fbc <xQueueGenericSend+0x4e>
 8004fb8:	2301      	movs	r3, #1
 8004fba:	e000      	b.n	8004fbe <xQueueGenericSend+0x50>
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d101      	bne.n	8004fc6 <xQueueGenericSend+0x58>
 8004fc2:	b672      	cpsid	i
 8004fc4:	e7fe      	b.n	8004fc4 <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004fc6:	f001 fab9 	bl	800653c <xTaskGetSchedulerState>
 8004fca:	1e03      	subs	r3, r0, #0
 8004fcc:	d102      	bne.n	8004fd4 <xQueueGenericSend+0x66>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d101      	bne.n	8004fd8 <xQueueGenericSend+0x6a>
 8004fd4:	2301      	movs	r3, #1
 8004fd6:	e000      	b.n	8004fda <xQueueGenericSend+0x6c>
 8004fd8:	2300      	movs	r3, #0
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d101      	bne.n	8004fe2 <xQueueGenericSend+0x74>
 8004fde:	b672      	cpsid	i
 8004fe0:	e7fe      	b.n	8004fe0 <xQueueGenericSend+0x72>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004fe2:	f002 f80d 	bl	8007000 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004fe6:	6a3b      	ldr	r3, [r7, #32]
 8004fe8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004fea:	6a3b      	ldr	r3, [r7, #32]
 8004fec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fee:	429a      	cmp	r2, r3
 8004ff0:	d302      	bcc.n	8004ff8 <xQueueGenericSend+0x8a>
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	2b02      	cmp	r3, #2
 8004ff6:	d11e      	bne.n	8005036 <xQueueGenericSend+0xc8>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004ff8:	683a      	ldr	r2, [r7, #0]
 8004ffa:	68b9      	ldr	r1, [r7, #8]
 8004ffc:	6a3b      	ldr	r3, [r7, #32]
 8004ffe:	0018      	movs	r0, r3
 8005000:	f000 fb76 	bl	80056f0 <prvCopyDataToQueue>
 8005004:	0003      	movs	r3, r0
 8005006:	61fb      	str	r3, [r7, #28]

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005008:	6a3b      	ldr	r3, [r7, #32]
 800500a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800500c:	2b00      	cmp	r3, #0
 800500e:	d009      	beq.n	8005024 <xQueueGenericSend+0xb6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005010:	6a3b      	ldr	r3, [r7, #32]
 8005012:	3324      	adds	r3, #36	; 0x24
 8005014:	0018      	movs	r0, r3
 8005016:	f001 f8f9 	bl	800620c <xTaskRemoveFromEventList>
 800501a:	1e03      	subs	r3, r0, #0
 800501c:	d007      	beq.n	800502e <xQueueGenericSend+0xc0>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800501e:	f001 ffdf 	bl	8006fe0 <vPortYield>
 8005022:	e004      	b.n	800502e <xQueueGenericSend+0xc0>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005024:	69fb      	ldr	r3, [r7, #28]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d001      	beq.n	800502e <xQueueGenericSend+0xc0>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800502a:	f001 ffd9 	bl	8006fe0 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800502e:	f001 fff9 	bl	8007024 <vPortExitCritical>
				return pdPASS;
 8005032:	2301      	movs	r3, #1
 8005034:	e05b      	b.n	80050ee <xQueueGenericSend+0x180>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d103      	bne.n	8005044 <xQueueGenericSend+0xd6>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800503c:	f001 fff2 	bl	8007024 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005040:	2300      	movs	r3, #0
 8005042:	e054      	b.n	80050ee <xQueueGenericSend+0x180>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005046:	2b00      	cmp	r3, #0
 8005048:	d106      	bne.n	8005058 <xQueueGenericSend+0xea>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800504a:	2314      	movs	r3, #20
 800504c:	18fb      	adds	r3, r7, r3
 800504e:	0018      	movs	r0, r3
 8005050:	f001 f938 	bl	80062c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005054:	2301      	movs	r3, #1
 8005056:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005058:	f001 ffe4 	bl	8007024 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800505c:	f000 fee2 	bl	8005e24 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005060:	f001 ffce 	bl	8007000 <vPortEnterCritical>
 8005064:	6a3b      	ldr	r3, [r7, #32]
 8005066:	2244      	movs	r2, #68	; 0x44
 8005068:	5c9b      	ldrb	r3, [r3, r2]
 800506a:	b25b      	sxtb	r3, r3
 800506c:	3301      	adds	r3, #1
 800506e:	d103      	bne.n	8005078 <xQueueGenericSend+0x10a>
 8005070:	6a3b      	ldr	r3, [r7, #32]
 8005072:	2244      	movs	r2, #68	; 0x44
 8005074:	2100      	movs	r1, #0
 8005076:	5499      	strb	r1, [r3, r2]
 8005078:	6a3b      	ldr	r3, [r7, #32]
 800507a:	2245      	movs	r2, #69	; 0x45
 800507c:	5c9b      	ldrb	r3, [r3, r2]
 800507e:	b25b      	sxtb	r3, r3
 8005080:	3301      	adds	r3, #1
 8005082:	d103      	bne.n	800508c <xQueueGenericSend+0x11e>
 8005084:	6a3b      	ldr	r3, [r7, #32]
 8005086:	2245      	movs	r2, #69	; 0x45
 8005088:	2100      	movs	r1, #0
 800508a:	5499      	strb	r1, [r3, r2]
 800508c:	f001 ffca 	bl	8007024 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005090:	1d3a      	adds	r2, r7, #4
 8005092:	2314      	movs	r3, #20
 8005094:	18fb      	adds	r3, r7, r3
 8005096:	0011      	movs	r1, r2
 8005098:	0018      	movs	r0, r3
 800509a:	f001 f927 	bl	80062ec <xTaskCheckForTimeOut>
 800509e:	1e03      	subs	r3, r0, #0
 80050a0:	d11e      	bne.n	80050e0 <xQueueGenericSend+0x172>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80050a2:	6a3b      	ldr	r3, [r7, #32]
 80050a4:	0018      	movs	r0, r3
 80050a6:	f000 fc28 	bl	80058fa <prvIsQueueFull>
 80050aa:	1e03      	subs	r3, r0, #0
 80050ac:	d011      	beq.n	80050d2 <xQueueGenericSend+0x164>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80050ae:	6a3b      	ldr	r3, [r7, #32]
 80050b0:	3310      	adds	r3, #16
 80050b2:	687a      	ldr	r2, [r7, #4]
 80050b4:	0011      	movs	r1, r2
 80050b6:	0018      	movs	r0, r3
 80050b8:	f001 f864 	bl	8006184 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80050bc:	6a3b      	ldr	r3, [r7, #32]
 80050be:	0018      	movs	r0, r3
 80050c0:	f000 fba7 	bl	8005812 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80050c4:	f000 feba 	bl	8005e3c <xTaskResumeAll>
 80050c8:	1e03      	subs	r3, r0, #0
 80050ca:	d18a      	bne.n	8004fe2 <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
 80050cc:	f001 ff88 	bl	8006fe0 <vPortYield>
 80050d0:	e787      	b.n	8004fe2 <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80050d2:	6a3b      	ldr	r3, [r7, #32]
 80050d4:	0018      	movs	r0, r3
 80050d6:	f000 fb9c 	bl	8005812 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80050da:	f000 feaf 	bl	8005e3c <xTaskResumeAll>
 80050de:	e780      	b.n	8004fe2 <xQueueGenericSend+0x74>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80050e0:	6a3b      	ldr	r3, [r7, #32]
 80050e2:	0018      	movs	r0, r3
 80050e4:	f000 fb95 	bl	8005812 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80050e8:	f000 fea8 	bl	8005e3c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80050ec:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80050ee:	0018      	movs	r0, r3
 80050f0:	46bd      	mov	sp, r7
 80050f2:	b00a      	add	sp, #40	; 0x28
 80050f4:	bd80      	pop	{r7, pc}

080050f6 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80050f6:	b590      	push	{r4, r7, lr}
 80050f8:	b08b      	sub	sp, #44	; 0x2c
 80050fa:	af00      	add	r7, sp, #0
 80050fc:	60f8      	str	r0, [r7, #12]
 80050fe:	60b9      	str	r1, [r7, #8]
 8005100:	607a      	str	r2, [r7, #4]
 8005102:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 8005108:	6a3b      	ldr	r3, [r7, #32]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d101      	bne.n	8005112 <xQueueGenericSendFromISR+0x1c>
 800510e:	b672      	cpsid	i
 8005110:	e7fe      	b.n	8005110 <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005112:	68bb      	ldr	r3, [r7, #8]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d103      	bne.n	8005120 <xQueueGenericSendFromISR+0x2a>
 8005118:	6a3b      	ldr	r3, [r7, #32]
 800511a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800511c:	2b00      	cmp	r3, #0
 800511e:	d101      	bne.n	8005124 <xQueueGenericSendFromISR+0x2e>
 8005120:	2301      	movs	r3, #1
 8005122:	e000      	b.n	8005126 <xQueueGenericSendFromISR+0x30>
 8005124:	2300      	movs	r3, #0
 8005126:	2b00      	cmp	r3, #0
 8005128:	d101      	bne.n	800512e <xQueueGenericSendFromISR+0x38>
 800512a:	b672      	cpsid	i
 800512c:	e7fe      	b.n	800512c <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	2b02      	cmp	r3, #2
 8005132:	d103      	bne.n	800513c <xQueueGenericSendFromISR+0x46>
 8005134:	6a3b      	ldr	r3, [r7, #32]
 8005136:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005138:	2b01      	cmp	r3, #1
 800513a:	d101      	bne.n	8005140 <xQueueGenericSendFromISR+0x4a>
 800513c:	2301      	movs	r3, #1
 800513e:	e000      	b.n	8005142 <xQueueGenericSendFromISR+0x4c>
 8005140:	2300      	movs	r3, #0
 8005142:	2b00      	cmp	r3, #0
 8005144:	d101      	bne.n	800514a <xQueueGenericSendFromISR+0x54>
 8005146:	b672      	cpsid	i
 8005148:	e7fe      	b.n	8005148 <xQueueGenericSendFromISR+0x52>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800514a:	f001 ff83 	bl	8007054 <ulSetInterruptMaskFromISR>
 800514e:	0003      	movs	r3, r0
 8005150:	61fb      	str	r3, [r7, #28]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005152:	6a3b      	ldr	r3, [r7, #32]
 8005154:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005156:	6a3b      	ldr	r3, [r7, #32]
 8005158:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800515a:	429a      	cmp	r2, r3
 800515c:	d302      	bcc.n	8005164 <xQueueGenericSendFromISR+0x6e>
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	2b02      	cmp	r3, #2
 8005162:	d131      	bne.n	80051c8 <xQueueGenericSendFromISR+0xd2>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005164:	241b      	movs	r4, #27
 8005166:	193b      	adds	r3, r7, r4
 8005168:	6a3a      	ldr	r2, [r7, #32]
 800516a:	2145      	movs	r1, #69	; 0x45
 800516c:	5c52      	ldrb	r2, [r2, r1]
 800516e:	701a      	strb	r2, [r3, #0]
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005170:	6a3b      	ldr	r3, [r7, #32]
 8005172:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005174:	617b      	str	r3, [r7, #20]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005176:	683a      	ldr	r2, [r7, #0]
 8005178:	68b9      	ldr	r1, [r7, #8]
 800517a:	6a3b      	ldr	r3, [r7, #32]
 800517c:	0018      	movs	r0, r3
 800517e:	f000 fab7 	bl	80056f0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005182:	193b      	adds	r3, r7, r4
 8005184:	781b      	ldrb	r3, [r3, #0]
 8005186:	b25b      	sxtb	r3, r3
 8005188:	3301      	adds	r3, #1
 800518a:	d111      	bne.n	80051b0 <xQueueGenericSendFromISR+0xba>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800518c:	6a3b      	ldr	r3, [r7, #32]
 800518e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005190:	2b00      	cmp	r3, #0
 8005192:	d016      	beq.n	80051c2 <xQueueGenericSendFromISR+0xcc>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005194:	6a3b      	ldr	r3, [r7, #32]
 8005196:	3324      	adds	r3, #36	; 0x24
 8005198:	0018      	movs	r0, r3
 800519a:	f001 f837 	bl	800620c <xTaskRemoveFromEventList>
 800519e:	1e03      	subs	r3, r0, #0
 80051a0:	d00f      	beq.n	80051c2 <xQueueGenericSendFromISR+0xcc>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d00c      	beq.n	80051c2 <xQueueGenericSendFromISR+0xcc>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2201      	movs	r2, #1
 80051ac:	601a      	str	r2, [r3, #0]
 80051ae:	e008      	b.n	80051c2 <xQueueGenericSendFromISR+0xcc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80051b0:	231b      	movs	r3, #27
 80051b2:	18fb      	adds	r3, r7, r3
 80051b4:	781b      	ldrb	r3, [r3, #0]
 80051b6:	3301      	adds	r3, #1
 80051b8:	b2db      	uxtb	r3, r3
 80051ba:	b259      	sxtb	r1, r3
 80051bc:	6a3b      	ldr	r3, [r7, #32]
 80051be:	2245      	movs	r2, #69	; 0x45
 80051c0:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 80051c2:	2301      	movs	r3, #1
 80051c4:	627b      	str	r3, [r7, #36]	; 0x24
		{
 80051c6:	e001      	b.n	80051cc <xQueueGenericSendFromISR+0xd6>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80051c8:	2300      	movs	r3, #0
 80051ca:	627b      	str	r3, [r7, #36]	; 0x24
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 80051cc:	69fb      	ldr	r3, [r7, #28]
 80051ce:	0018      	movs	r0, r3
 80051d0:	f001 ff46 	bl	8007060 <vClearInterruptMaskFromISR>

	return xReturn;
 80051d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80051d6:	0018      	movs	r0, r3
 80051d8:	46bd      	mov	sp, r7
 80051da:	b00b      	add	sp, #44	; 0x2c
 80051dc:	bd90      	pop	{r4, r7, pc}

080051de <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80051de:	b580      	push	{r7, lr}
 80051e0:	b088      	sub	sp, #32
 80051e2:	af00      	add	r7, sp, #0
 80051e4:	6078      	str	r0, [r7, #4]
 80051e6:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	61bb      	str	r3, [r7, #24]
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80051ec:	69bb      	ldr	r3, [r7, #24]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d101      	bne.n	80051f6 <xQueueGiveFromISR+0x18>
 80051f2:	b672      	cpsid	i
 80051f4:	e7fe      	b.n	80051f4 <xQueueGiveFromISR+0x16>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80051f6:	69bb      	ldr	r3, [r7, #24]
 80051f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d001      	beq.n	8005202 <xQueueGiveFromISR+0x24>
 80051fe:	b672      	cpsid	i
 8005200:	e7fe      	b.n	8005200 <xQueueGiveFromISR+0x22>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8005202:	69bb      	ldr	r3, [r7, #24]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d103      	bne.n	8005212 <xQueueGiveFromISR+0x34>
 800520a:	69bb      	ldr	r3, [r7, #24]
 800520c:	689b      	ldr	r3, [r3, #8]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d101      	bne.n	8005216 <xQueueGiveFromISR+0x38>
 8005212:	2301      	movs	r3, #1
 8005214:	e000      	b.n	8005218 <xQueueGiveFromISR+0x3a>
 8005216:	2300      	movs	r3, #0
 8005218:	2b00      	cmp	r3, #0
 800521a:	d101      	bne.n	8005220 <xQueueGiveFromISR+0x42>
 800521c:	b672      	cpsid	i
 800521e:	e7fe      	b.n	800521e <xQueueGiveFromISR+0x40>
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005220:	f001 ff18 	bl	8007054 <ulSetInterruptMaskFromISR>
 8005224:	0003      	movs	r3, r0
 8005226:	617b      	str	r3, [r7, #20]
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005228:	69bb      	ldr	r3, [r7, #24]
 800522a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800522c:	613b      	str	r3, [r7, #16]

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800522e:	69bb      	ldr	r3, [r7, #24]
 8005230:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005232:	693a      	ldr	r2, [r7, #16]
 8005234:	429a      	cmp	r2, r3
 8005236:	d22c      	bcs.n	8005292 <xQueueGiveFromISR+0xb4>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005238:	200f      	movs	r0, #15
 800523a:	183b      	adds	r3, r7, r0
 800523c:	69ba      	ldr	r2, [r7, #24]
 800523e:	2145      	movs	r1, #69	; 0x45
 8005240:	5c52      	ldrb	r2, [r2, r1]
 8005242:	701a      	strb	r2, [r3, #0]
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005244:	693b      	ldr	r3, [r7, #16]
 8005246:	1c5a      	adds	r2, r3, #1
 8005248:	69bb      	ldr	r3, [r7, #24]
 800524a:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800524c:	183b      	adds	r3, r7, r0
 800524e:	781b      	ldrb	r3, [r3, #0]
 8005250:	b25b      	sxtb	r3, r3
 8005252:	3301      	adds	r3, #1
 8005254:	d111      	bne.n	800527a <xQueueGiveFromISR+0x9c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005256:	69bb      	ldr	r3, [r7, #24]
 8005258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800525a:	2b00      	cmp	r3, #0
 800525c:	d016      	beq.n	800528c <xQueueGiveFromISR+0xae>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800525e:	69bb      	ldr	r3, [r7, #24]
 8005260:	3324      	adds	r3, #36	; 0x24
 8005262:	0018      	movs	r0, r3
 8005264:	f000 ffd2 	bl	800620c <xTaskRemoveFromEventList>
 8005268:	1e03      	subs	r3, r0, #0
 800526a:	d00f      	beq.n	800528c <xQueueGiveFromISR+0xae>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d00c      	beq.n	800528c <xQueueGiveFromISR+0xae>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	2201      	movs	r2, #1
 8005276:	601a      	str	r2, [r3, #0]
 8005278:	e008      	b.n	800528c <xQueueGiveFromISR+0xae>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800527a:	230f      	movs	r3, #15
 800527c:	18fb      	adds	r3, r7, r3
 800527e:	781b      	ldrb	r3, [r3, #0]
 8005280:	3301      	adds	r3, #1
 8005282:	b2db      	uxtb	r3, r3
 8005284:	b259      	sxtb	r1, r3
 8005286:	69bb      	ldr	r3, [r7, #24]
 8005288:	2245      	movs	r2, #69	; 0x45
 800528a:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 800528c:	2301      	movs	r3, #1
 800528e:	61fb      	str	r3, [r7, #28]
 8005290:	e001      	b.n	8005296 <xQueueGiveFromISR+0xb8>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005292:	2300      	movs	r3, #0
 8005294:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8005296:	697b      	ldr	r3, [r7, #20]
 8005298:	0018      	movs	r0, r3
 800529a:	f001 fee1 	bl	8007060 <vClearInterruptMaskFromISR>

	return xReturn;
 800529e:	69fb      	ldr	r3, [r7, #28]
}
 80052a0:	0018      	movs	r0, r3
 80052a2:	46bd      	mov	sp, r7
 80052a4:	b008      	add	sp, #32
 80052a6:	bd80      	pop	{r7, pc}

080052a8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b08a      	sub	sp, #40	; 0x28
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	60f8      	str	r0, [r7, #12]
 80052b0:	60b9      	str	r1, [r7, #8]
 80052b2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80052b4:	2300      	movs	r3, #0
 80052b6:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80052bc:	6a3b      	ldr	r3, [r7, #32]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d101      	bne.n	80052c6 <xQueueReceive+0x1e>
 80052c2:	b672      	cpsid	i
 80052c4:	e7fe      	b.n	80052c4 <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80052c6:	68bb      	ldr	r3, [r7, #8]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d103      	bne.n	80052d4 <xQueueReceive+0x2c>
 80052cc:	6a3b      	ldr	r3, [r7, #32]
 80052ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d101      	bne.n	80052d8 <xQueueReceive+0x30>
 80052d4:	2301      	movs	r3, #1
 80052d6:	e000      	b.n	80052da <xQueueReceive+0x32>
 80052d8:	2300      	movs	r3, #0
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d101      	bne.n	80052e2 <xQueueReceive+0x3a>
 80052de:	b672      	cpsid	i
 80052e0:	e7fe      	b.n	80052e0 <xQueueReceive+0x38>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80052e2:	f001 f92b 	bl	800653c <xTaskGetSchedulerState>
 80052e6:	1e03      	subs	r3, r0, #0
 80052e8:	d102      	bne.n	80052f0 <xQueueReceive+0x48>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d101      	bne.n	80052f4 <xQueueReceive+0x4c>
 80052f0:	2301      	movs	r3, #1
 80052f2:	e000      	b.n	80052f6 <xQueueReceive+0x4e>
 80052f4:	2300      	movs	r3, #0
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d101      	bne.n	80052fe <xQueueReceive+0x56>
 80052fa:	b672      	cpsid	i
 80052fc:	e7fe      	b.n	80052fc <xQueueReceive+0x54>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80052fe:	f001 fe7f 	bl	8007000 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005302:	6a3b      	ldr	r3, [r7, #32]
 8005304:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005306:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005308:	69fb      	ldr	r3, [r7, #28]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d01a      	beq.n	8005344 <xQueueReceive+0x9c>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800530e:	68ba      	ldr	r2, [r7, #8]
 8005310:	6a3b      	ldr	r3, [r7, #32]
 8005312:	0011      	movs	r1, r2
 8005314:	0018      	movs	r0, r3
 8005316:	f000 fa56 	bl	80057c6 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800531a:	69fb      	ldr	r3, [r7, #28]
 800531c:	1e5a      	subs	r2, r3, #1
 800531e:	6a3b      	ldr	r3, [r7, #32]
 8005320:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005322:	6a3b      	ldr	r3, [r7, #32]
 8005324:	691b      	ldr	r3, [r3, #16]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d008      	beq.n	800533c <xQueueReceive+0x94>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800532a:	6a3b      	ldr	r3, [r7, #32]
 800532c:	3310      	adds	r3, #16
 800532e:	0018      	movs	r0, r3
 8005330:	f000 ff6c 	bl	800620c <xTaskRemoveFromEventList>
 8005334:	1e03      	subs	r3, r0, #0
 8005336:	d001      	beq.n	800533c <xQueueReceive+0x94>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005338:	f001 fe52 	bl	8006fe0 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800533c:	f001 fe72 	bl	8007024 <vPortExitCritical>
				return pdPASS;
 8005340:	2301      	movs	r3, #1
 8005342:	e062      	b.n	800540a <xQueueReceive+0x162>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d103      	bne.n	8005352 <xQueueReceive+0xaa>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800534a:	f001 fe6b 	bl	8007024 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800534e:	2300      	movs	r3, #0
 8005350:	e05b      	b.n	800540a <xQueueReceive+0x162>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005354:	2b00      	cmp	r3, #0
 8005356:	d106      	bne.n	8005366 <xQueueReceive+0xbe>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005358:	2314      	movs	r3, #20
 800535a:	18fb      	adds	r3, r7, r3
 800535c:	0018      	movs	r0, r3
 800535e:	f000 ffb1 	bl	80062c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005362:	2301      	movs	r3, #1
 8005364:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005366:	f001 fe5d 	bl	8007024 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800536a:	f000 fd5b 	bl	8005e24 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800536e:	f001 fe47 	bl	8007000 <vPortEnterCritical>
 8005372:	6a3b      	ldr	r3, [r7, #32]
 8005374:	2244      	movs	r2, #68	; 0x44
 8005376:	5c9b      	ldrb	r3, [r3, r2]
 8005378:	b25b      	sxtb	r3, r3
 800537a:	3301      	adds	r3, #1
 800537c:	d103      	bne.n	8005386 <xQueueReceive+0xde>
 800537e:	6a3b      	ldr	r3, [r7, #32]
 8005380:	2244      	movs	r2, #68	; 0x44
 8005382:	2100      	movs	r1, #0
 8005384:	5499      	strb	r1, [r3, r2]
 8005386:	6a3b      	ldr	r3, [r7, #32]
 8005388:	2245      	movs	r2, #69	; 0x45
 800538a:	5c9b      	ldrb	r3, [r3, r2]
 800538c:	b25b      	sxtb	r3, r3
 800538e:	3301      	adds	r3, #1
 8005390:	d103      	bne.n	800539a <xQueueReceive+0xf2>
 8005392:	6a3b      	ldr	r3, [r7, #32]
 8005394:	2245      	movs	r2, #69	; 0x45
 8005396:	2100      	movs	r1, #0
 8005398:	5499      	strb	r1, [r3, r2]
 800539a:	f001 fe43 	bl	8007024 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800539e:	1d3a      	adds	r2, r7, #4
 80053a0:	2314      	movs	r3, #20
 80053a2:	18fb      	adds	r3, r7, r3
 80053a4:	0011      	movs	r1, r2
 80053a6:	0018      	movs	r0, r3
 80053a8:	f000 ffa0 	bl	80062ec <xTaskCheckForTimeOut>
 80053ac:	1e03      	subs	r3, r0, #0
 80053ae:	d11e      	bne.n	80053ee <xQueueReceive+0x146>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80053b0:	6a3b      	ldr	r3, [r7, #32]
 80053b2:	0018      	movs	r0, r3
 80053b4:	f000 fa8b 	bl	80058ce <prvIsQueueEmpty>
 80053b8:	1e03      	subs	r3, r0, #0
 80053ba:	d011      	beq.n	80053e0 <xQueueReceive+0x138>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80053bc:	6a3b      	ldr	r3, [r7, #32]
 80053be:	3324      	adds	r3, #36	; 0x24
 80053c0:	687a      	ldr	r2, [r7, #4]
 80053c2:	0011      	movs	r1, r2
 80053c4:	0018      	movs	r0, r3
 80053c6:	f000 fedd 	bl	8006184 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80053ca:	6a3b      	ldr	r3, [r7, #32]
 80053cc:	0018      	movs	r0, r3
 80053ce:	f000 fa20 	bl	8005812 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80053d2:	f000 fd33 	bl	8005e3c <xTaskResumeAll>
 80053d6:	1e03      	subs	r3, r0, #0
 80053d8:	d191      	bne.n	80052fe <xQueueReceive+0x56>
				{
					portYIELD_WITHIN_API();
 80053da:	f001 fe01 	bl	8006fe0 <vPortYield>
 80053de:	e78e      	b.n	80052fe <xQueueReceive+0x56>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80053e0:	6a3b      	ldr	r3, [r7, #32]
 80053e2:	0018      	movs	r0, r3
 80053e4:	f000 fa15 	bl	8005812 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80053e8:	f000 fd28 	bl	8005e3c <xTaskResumeAll>
 80053ec:	e787      	b.n	80052fe <xQueueReceive+0x56>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80053ee:	6a3b      	ldr	r3, [r7, #32]
 80053f0:	0018      	movs	r0, r3
 80053f2:	f000 fa0e 	bl	8005812 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80053f6:	f000 fd21 	bl	8005e3c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80053fa:	6a3b      	ldr	r3, [r7, #32]
 80053fc:	0018      	movs	r0, r3
 80053fe:	f000 fa66 	bl	80058ce <prvIsQueueEmpty>
 8005402:	1e03      	subs	r3, r0, #0
 8005404:	d100      	bne.n	8005408 <xQueueReceive+0x160>
 8005406:	e77a      	b.n	80052fe <xQueueReceive+0x56>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005408:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800540a:	0018      	movs	r0, r3
 800540c:	46bd      	mov	sp, r7
 800540e:	b00a      	add	sp, #40	; 0x28
 8005410:	bd80      	pop	{r7, pc}

08005412 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8005412:	b580      	push	{r7, lr}
 8005414:	b08a      	sub	sp, #40	; 0x28
 8005416:	af00      	add	r7, sp, #0
 8005418:	6078      	str	r0, [r7, #4]
 800541a:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800541c:	2300      	movs	r3, #0
 800541e:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	61fb      	str	r3, [r7, #28]

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8005424:	2300      	movs	r3, #0
 8005426:	623b      	str	r3, [r7, #32]
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005428:	69fb      	ldr	r3, [r7, #28]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d101      	bne.n	8005432 <xQueueSemaphoreTake+0x20>
 800542e:	b672      	cpsid	i
 8005430:	e7fe      	b.n	8005430 <xQueueSemaphoreTake+0x1e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005432:	69fb      	ldr	r3, [r7, #28]
 8005434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005436:	2b00      	cmp	r3, #0
 8005438:	d001      	beq.n	800543e <xQueueSemaphoreTake+0x2c>
 800543a:	b672      	cpsid	i
 800543c:	e7fe      	b.n	800543c <xQueueSemaphoreTake+0x2a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800543e:	f001 f87d 	bl	800653c <xTaskGetSchedulerState>
 8005442:	1e03      	subs	r3, r0, #0
 8005444:	d102      	bne.n	800544c <xQueueSemaphoreTake+0x3a>
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d101      	bne.n	8005450 <xQueueSemaphoreTake+0x3e>
 800544c:	2301      	movs	r3, #1
 800544e:	e000      	b.n	8005452 <xQueueSemaphoreTake+0x40>
 8005450:	2300      	movs	r3, #0
 8005452:	2b00      	cmp	r3, #0
 8005454:	d101      	bne.n	800545a <xQueueSemaphoreTake+0x48>
 8005456:	b672      	cpsid	i
 8005458:	e7fe      	b.n	8005458 <xQueueSemaphoreTake+0x46>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800545a:	f001 fdd1 	bl	8007000 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800545e:	69fb      	ldr	r3, [r7, #28]
 8005460:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005462:	61bb      	str	r3, [r7, #24]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005464:	69bb      	ldr	r3, [r7, #24]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d01d      	beq.n	80054a6 <xQueueSemaphoreTake+0x94>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800546a:	69bb      	ldr	r3, [r7, #24]
 800546c:	1e5a      	subs	r2, r3, #1
 800546e:	69fb      	ldr	r3, [r7, #28]
 8005470:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005472:	69fb      	ldr	r3, [r7, #28]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d104      	bne.n	8005484 <xQueueSemaphoreTake+0x72>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800547a:	f001 f9af 	bl	80067dc <pvTaskIncrementMutexHeldCount>
 800547e:	0002      	movs	r2, r0
 8005480:	69fb      	ldr	r3, [r7, #28]
 8005482:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005484:	69fb      	ldr	r3, [r7, #28]
 8005486:	691b      	ldr	r3, [r3, #16]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d008      	beq.n	800549e <xQueueSemaphoreTake+0x8c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800548c:	69fb      	ldr	r3, [r7, #28]
 800548e:	3310      	adds	r3, #16
 8005490:	0018      	movs	r0, r3
 8005492:	f000 febb 	bl	800620c <xTaskRemoveFromEventList>
 8005496:	1e03      	subs	r3, r0, #0
 8005498:	d001      	beq.n	800549e <xQueueSemaphoreTake+0x8c>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800549a:	f001 fda1 	bl	8006fe0 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800549e:	f001 fdc1 	bl	8007024 <vPortExitCritical>
				return pdPASS;
 80054a2:	2301      	movs	r3, #1
 80054a4:	e08b      	b.n	80055be <xQueueSemaphoreTake+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d108      	bne.n	80054be <xQueueSemaphoreTake+0xac>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80054ac:	6a3b      	ldr	r3, [r7, #32]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d001      	beq.n	80054b6 <xQueueSemaphoreTake+0xa4>
 80054b2:	b672      	cpsid	i
 80054b4:	e7fe      	b.n	80054b4 <xQueueSemaphoreTake+0xa2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80054b6:	f001 fdb5 	bl	8007024 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80054ba:	2300      	movs	r3, #0
 80054bc:	e07f      	b.n	80055be <xQueueSemaphoreTake+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 80054be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d106      	bne.n	80054d2 <xQueueSemaphoreTake+0xc0>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80054c4:	230c      	movs	r3, #12
 80054c6:	18fb      	adds	r3, r7, r3
 80054c8:	0018      	movs	r0, r3
 80054ca:	f000 fefb 	bl	80062c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80054ce:	2301      	movs	r3, #1
 80054d0:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80054d2:	f001 fda7 	bl	8007024 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80054d6:	f000 fca5 	bl	8005e24 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80054da:	f001 fd91 	bl	8007000 <vPortEnterCritical>
 80054de:	69fb      	ldr	r3, [r7, #28]
 80054e0:	2244      	movs	r2, #68	; 0x44
 80054e2:	5c9b      	ldrb	r3, [r3, r2]
 80054e4:	b25b      	sxtb	r3, r3
 80054e6:	3301      	adds	r3, #1
 80054e8:	d103      	bne.n	80054f2 <xQueueSemaphoreTake+0xe0>
 80054ea:	69fb      	ldr	r3, [r7, #28]
 80054ec:	2244      	movs	r2, #68	; 0x44
 80054ee:	2100      	movs	r1, #0
 80054f0:	5499      	strb	r1, [r3, r2]
 80054f2:	69fb      	ldr	r3, [r7, #28]
 80054f4:	2245      	movs	r2, #69	; 0x45
 80054f6:	5c9b      	ldrb	r3, [r3, r2]
 80054f8:	b25b      	sxtb	r3, r3
 80054fa:	3301      	adds	r3, #1
 80054fc:	d103      	bne.n	8005506 <xQueueSemaphoreTake+0xf4>
 80054fe:	69fb      	ldr	r3, [r7, #28]
 8005500:	2245      	movs	r2, #69	; 0x45
 8005502:	2100      	movs	r1, #0
 8005504:	5499      	strb	r1, [r3, r2]
 8005506:	f001 fd8d 	bl	8007024 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800550a:	003a      	movs	r2, r7
 800550c:	230c      	movs	r3, #12
 800550e:	18fb      	adds	r3, r7, r3
 8005510:	0011      	movs	r1, r2
 8005512:	0018      	movs	r0, r3
 8005514:	f000 feea 	bl	80062ec <xTaskCheckForTimeOut>
 8005518:	1e03      	subs	r3, r0, #0
 800551a:	d12e      	bne.n	800557a <xQueueSemaphoreTake+0x168>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800551c:	69fb      	ldr	r3, [r7, #28]
 800551e:	0018      	movs	r0, r3
 8005520:	f000 f9d5 	bl	80058ce <prvIsQueueEmpty>
 8005524:	1e03      	subs	r3, r0, #0
 8005526:	d021      	beq.n	800556c <xQueueSemaphoreTake+0x15a>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005528:	69fb      	ldr	r3, [r7, #28]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d10a      	bne.n	8005546 <xQueueSemaphoreTake+0x134>
					{
						taskENTER_CRITICAL();
 8005530:	f001 fd66 	bl	8007000 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005534:	69fb      	ldr	r3, [r7, #28]
 8005536:	689b      	ldr	r3, [r3, #8]
 8005538:	0018      	movs	r0, r3
 800553a:	f001 f81b 	bl	8006574 <xTaskPriorityInherit>
 800553e:	0003      	movs	r3, r0
 8005540:	623b      	str	r3, [r7, #32]
						}
						taskEXIT_CRITICAL();
 8005542:	f001 fd6f 	bl	8007024 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005546:	69fb      	ldr	r3, [r7, #28]
 8005548:	3324      	adds	r3, #36	; 0x24
 800554a:	683a      	ldr	r2, [r7, #0]
 800554c:	0011      	movs	r1, r2
 800554e:	0018      	movs	r0, r3
 8005550:	f000 fe18 	bl	8006184 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005554:	69fb      	ldr	r3, [r7, #28]
 8005556:	0018      	movs	r0, r3
 8005558:	f000 f95b 	bl	8005812 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800555c:	f000 fc6e 	bl	8005e3c <xTaskResumeAll>
 8005560:	1e03      	subs	r3, r0, #0
 8005562:	d000      	beq.n	8005566 <xQueueSemaphoreTake+0x154>
 8005564:	e779      	b.n	800545a <xQueueSemaphoreTake+0x48>
				{
					portYIELD_WITHIN_API();
 8005566:	f001 fd3b 	bl	8006fe0 <vPortYield>
 800556a:	e776      	b.n	800545a <xQueueSemaphoreTake+0x48>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800556c:	69fb      	ldr	r3, [r7, #28]
 800556e:	0018      	movs	r0, r3
 8005570:	f000 f94f 	bl	8005812 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005574:	f000 fc62 	bl	8005e3c <xTaskResumeAll>
 8005578:	e76f      	b.n	800545a <xQueueSemaphoreTake+0x48>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800557a:	69fb      	ldr	r3, [r7, #28]
 800557c:	0018      	movs	r0, r3
 800557e:	f000 f948 	bl	8005812 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005582:	f000 fc5b 	bl	8005e3c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005586:	69fb      	ldr	r3, [r7, #28]
 8005588:	0018      	movs	r0, r3
 800558a:	f000 f9a0 	bl	80058ce <prvIsQueueEmpty>
 800558e:	1e03      	subs	r3, r0, #0
 8005590:	d100      	bne.n	8005594 <xQueueSemaphoreTake+0x182>
 8005592:	e762      	b.n	800545a <xQueueSemaphoreTake+0x48>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8005594:	6a3b      	ldr	r3, [r7, #32]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d010      	beq.n	80055bc <xQueueSemaphoreTake+0x1aa>
					{
						taskENTER_CRITICAL();
 800559a:	f001 fd31 	bl	8007000 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800559e:	69fb      	ldr	r3, [r7, #28]
 80055a0:	0018      	movs	r0, r3
 80055a2:	f000 f88f 	bl	80056c4 <prvGetDisinheritPriorityAfterTimeout>
 80055a6:	0003      	movs	r3, r0
 80055a8:	617b      	str	r3, [r7, #20]
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80055aa:	69fb      	ldr	r3, [r7, #28]
 80055ac:	689b      	ldr	r3, [r3, #8]
 80055ae:	697a      	ldr	r2, [r7, #20]
 80055b0:	0011      	movs	r1, r2
 80055b2:	0018      	movs	r0, r3
 80055b4:	f001 f8a2 	bl	80066fc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80055b8:	f001 fd34 	bl	8007024 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80055bc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80055be:	0018      	movs	r0, r3
 80055c0:	46bd      	mov	sp, r7
 80055c2:	b00a      	add	sp, #40	; 0x28
 80055c4:	bd80      	pop	{r7, pc}

080055c6 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80055c6:	b590      	push	{r4, r7, lr}
 80055c8:	b08b      	sub	sp, #44	; 0x2c
 80055ca:	af00      	add	r7, sp, #0
 80055cc:	60f8      	str	r0, [r7, #12]
 80055ce:	60b9      	str	r1, [r7, #8]
 80055d0:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 80055d6:	6a3b      	ldr	r3, [r7, #32]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d101      	bne.n	80055e0 <xQueueReceiveFromISR+0x1a>
 80055dc:	b672      	cpsid	i
 80055de:	e7fe      	b.n	80055de <xQueueReceiveFromISR+0x18>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d103      	bne.n	80055ee <xQueueReceiveFromISR+0x28>
 80055e6:	6a3b      	ldr	r3, [r7, #32]
 80055e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d101      	bne.n	80055f2 <xQueueReceiveFromISR+0x2c>
 80055ee:	2301      	movs	r3, #1
 80055f0:	e000      	b.n	80055f4 <xQueueReceiveFromISR+0x2e>
 80055f2:	2300      	movs	r3, #0
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d101      	bne.n	80055fc <xQueueReceiveFromISR+0x36>
 80055f8:	b672      	cpsid	i
 80055fa:	e7fe      	b.n	80055fa <xQueueReceiveFromISR+0x34>
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80055fc:	f001 fd2a 	bl	8007054 <ulSetInterruptMaskFromISR>
 8005600:	0003      	movs	r3, r0
 8005602:	61fb      	str	r3, [r7, #28]
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005604:	6a3b      	ldr	r3, [r7, #32]
 8005606:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005608:	61bb      	str	r3, [r7, #24]

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800560a:	69bb      	ldr	r3, [r7, #24]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d032      	beq.n	8005676 <xQueueReceiveFromISR+0xb0>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8005610:	2417      	movs	r4, #23
 8005612:	193b      	adds	r3, r7, r4
 8005614:	6a3a      	ldr	r2, [r7, #32]
 8005616:	2144      	movs	r1, #68	; 0x44
 8005618:	5c52      	ldrb	r2, [r2, r1]
 800561a:	701a      	strb	r2, [r3, #0]

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800561c:	68ba      	ldr	r2, [r7, #8]
 800561e:	6a3b      	ldr	r3, [r7, #32]
 8005620:	0011      	movs	r1, r2
 8005622:	0018      	movs	r0, r3
 8005624:	f000 f8cf 	bl	80057c6 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005628:	69bb      	ldr	r3, [r7, #24]
 800562a:	1e5a      	subs	r2, r3, #1
 800562c:	6a3b      	ldr	r3, [r7, #32]
 800562e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8005630:	193b      	adds	r3, r7, r4
 8005632:	781b      	ldrb	r3, [r3, #0]
 8005634:	b25b      	sxtb	r3, r3
 8005636:	3301      	adds	r3, #1
 8005638:	d111      	bne.n	800565e <xQueueReceiveFromISR+0x98>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800563a:	6a3b      	ldr	r3, [r7, #32]
 800563c:	691b      	ldr	r3, [r3, #16]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d016      	beq.n	8005670 <xQueueReceiveFromISR+0xaa>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005642:	6a3b      	ldr	r3, [r7, #32]
 8005644:	3310      	adds	r3, #16
 8005646:	0018      	movs	r0, r3
 8005648:	f000 fde0 	bl	800620c <xTaskRemoveFromEventList>
 800564c:	1e03      	subs	r3, r0, #0
 800564e:	d00f      	beq.n	8005670 <xQueueReceiveFromISR+0xaa>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d00c      	beq.n	8005670 <xQueueReceiveFromISR+0xaa>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2201      	movs	r2, #1
 800565a:	601a      	str	r2, [r3, #0]
 800565c:	e008      	b.n	8005670 <xQueueReceiveFromISR+0xaa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800565e:	2317      	movs	r3, #23
 8005660:	18fb      	adds	r3, r7, r3
 8005662:	781b      	ldrb	r3, [r3, #0]
 8005664:	3301      	adds	r3, #1
 8005666:	b2db      	uxtb	r3, r3
 8005668:	b259      	sxtb	r1, r3
 800566a:	6a3b      	ldr	r3, [r7, #32]
 800566c:	2244      	movs	r2, #68	; 0x44
 800566e:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 8005670:	2301      	movs	r3, #1
 8005672:	627b      	str	r3, [r7, #36]	; 0x24
 8005674:	e001      	b.n	800567a <xQueueReceiveFromISR+0xb4>
		}
		else
		{
			xReturn = pdFAIL;
 8005676:	2300      	movs	r3, #0
 8005678:	627b      	str	r3, [r7, #36]	; 0x24
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800567a:	69fb      	ldr	r3, [r7, #28]
 800567c:	0018      	movs	r0, r3
 800567e:	f001 fcef 	bl	8007060 <vClearInterruptMaskFromISR>

	return xReturn;
 8005682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005684:	0018      	movs	r0, r3
 8005686:	46bd      	mov	sp, r7
 8005688:	b00b      	add	sp, #44	; 0x2c
 800568a:	bd90      	pop	{r4, r7, pc}

0800568c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b084      	sub	sp, #16
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d101      	bne.n	80056a2 <vQueueDelete+0x16>
 800569e:	b672      	cpsid	i
 80056a0:	e7fe      	b.n	80056a0 <vQueueDelete+0x14>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	0018      	movs	r0, r3
 80056a6:	f000 f969 	bl	800597c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	2246      	movs	r2, #70	; 0x46
 80056ae:	5c9b      	ldrb	r3, [r3, r2]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d103      	bne.n	80056bc <vQueueDelete+0x30>
		{
			vPortFree( pxQueue );
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	0018      	movs	r0, r3
 80056b8:	f001 fde6 	bl	8007288 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80056bc:	46c0      	nop			; (mov r8, r8)
 80056be:	46bd      	mov	sp, r7
 80056c0:	b004      	add	sp, #16
 80056c2:	bd80      	pop	{r7, pc}

080056c4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b084      	sub	sp, #16
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d006      	beq.n	80056e2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	2238      	movs	r2, #56	; 0x38
 80056dc:	1ad3      	subs	r3, r2, r3
 80056de:	60fb      	str	r3, [r7, #12]
 80056e0:	e001      	b.n	80056e6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80056e2:	2300      	movs	r3, #0
 80056e4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80056e6:	68fb      	ldr	r3, [r7, #12]
	}
 80056e8:	0018      	movs	r0, r3
 80056ea:	46bd      	mov	sp, r7
 80056ec:	b004      	add	sp, #16
 80056ee:	bd80      	pop	{r7, pc}

080056f0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b086      	sub	sp, #24
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	60f8      	str	r0, [r7, #12]
 80056f8:	60b9      	str	r1, [r7, #8]
 80056fa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80056fc:	2300      	movs	r3, #0
 80056fe:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005704:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800570a:	2b00      	cmp	r3, #0
 800570c:	d10e      	bne.n	800572c <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d14e      	bne.n	80057b4 <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	689b      	ldr	r3, [r3, #8]
 800571a:	0018      	movs	r0, r3
 800571c:	f000 ff92 	bl	8006644 <xTaskPriorityDisinherit>
 8005720:	0003      	movs	r3, r0
 8005722:	617b      	str	r3, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	2200      	movs	r2, #0
 8005728:	609a      	str	r2, [r3, #8]
 800572a:	e043      	b.n	80057b4 <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d119      	bne.n	8005766 <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	6858      	ldr	r0, [r3, #4]
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800573a:	68bb      	ldr	r3, [r7, #8]
 800573c:	0019      	movs	r1, r3
 800573e:	f001 fecf 	bl	80074e0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	685a      	ldr	r2, [r3, #4]
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800574a:	18d2      	adds	r2, r2, r3
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	685a      	ldr	r2, [r3, #4]
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	689b      	ldr	r3, [r3, #8]
 8005758:	429a      	cmp	r2, r3
 800575a:	d32b      	bcc.n	80057b4 <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681a      	ldr	r2, [r3, #0]
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	605a      	str	r2, [r3, #4]
 8005764:	e026      	b.n	80057b4 <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	68d8      	ldr	r0, [r3, #12]
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800576e:	68bb      	ldr	r3, [r7, #8]
 8005770:	0019      	movs	r1, r3
 8005772:	f001 feb5 	bl	80074e0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	68da      	ldr	r2, [r3, #12]
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800577e:	425b      	negs	r3, r3
 8005780:	18d2      	adds	r2, r2, r3
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	68da      	ldr	r2, [r3, #12]
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	429a      	cmp	r2, r3
 8005790:	d207      	bcs.n	80057a2 <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	689a      	ldr	r2, [r3, #8]
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800579a:	425b      	negs	r3, r3
 800579c:	18d2      	adds	r2, r2, r3
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2b02      	cmp	r3, #2
 80057a6:	d105      	bne.n	80057b4 <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80057a8:	693b      	ldr	r3, [r7, #16]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d002      	beq.n	80057b4 <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80057ae:	693b      	ldr	r3, [r7, #16]
 80057b0:	3b01      	subs	r3, #1
 80057b2:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80057b4:	693b      	ldr	r3, [r7, #16]
 80057b6:	1c5a      	adds	r2, r3, #1
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80057bc:	697b      	ldr	r3, [r7, #20]
}
 80057be:	0018      	movs	r0, r3
 80057c0:	46bd      	mov	sp, r7
 80057c2:	b006      	add	sp, #24
 80057c4:	bd80      	pop	{r7, pc}

080057c6 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80057c6:	b580      	push	{r7, lr}
 80057c8:	b082      	sub	sp, #8
 80057ca:	af00      	add	r7, sp, #0
 80057cc:	6078      	str	r0, [r7, #4]
 80057ce:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d018      	beq.n	800580a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	68da      	ldr	r2, [r3, #12]
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057e0:	18d2      	adds	r2, r2, r3
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	68da      	ldr	r2, [r3, #12]
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	689b      	ldr	r3, [r3, #8]
 80057ee:	429a      	cmp	r2, r3
 80057f0:	d303      	bcc.n	80057fa <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681a      	ldr	r2, [r3, #0]
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	68d9      	ldr	r1, [r3, #12]
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	0018      	movs	r0, r3
 8005806:	f001 fe6b 	bl	80074e0 <memcpy>
	}
}
 800580a:	46c0      	nop			; (mov r8, r8)
 800580c:	46bd      	mov	sp, r7
 800580e:	b002      	add	sp, #8
 8005810:	bd80      	pop	{r7, pc}

08005812 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005812:	b580      	push	{r7, lr}
 8005814:	b084      	sub	sp, #16
 8005816:	af00      	add	r7, sp, #0
 8005818:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800581a:	f001 fbf1 	bl	8007000 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800581e:	230f      	movs	r3, #15
 8005820:	18fb      	adds	r3, r7, r3
 8005822:	687a      	ldr	r2, [r7, #4]
 8005824:	2145      	movs	r1, #69	; 0x45
 8005826:	5c52      	ldrb	r2, [r2, r1]
 8005828:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800582a:	e013      	b.n	8005854 <prvUnlockQueue+0x42>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005830:	2b00      	cmp	r3, #0
 8005832:	d016      	beq.n	8005862 <prvUnlockQueue+0x50>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	3324      	adds	r3, #36	; 0x24
 8005838:	0018      	movs	r0, r3
 800583a:	f000 fce7 	bl	800620c <xTaskRemoveFromEventList>
 800583e:	1e03      	subs	r3, r0, #0
 8005840:	d001      	beq.n	8005846 <prvUnlockQueue+0x34>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005842:	f000 fda3 	bl	800638c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005846:	210f      	movs	r1, #15
 8005848:	187b      	adds	r3, r7, r1
 800584a:	781b      	ldrb	r3, [r3, #0]
 800584c:	3b01      	subs	r3, #1
 800584e:	b2da      	uxtb	r2, r3
 8005850:	187b      	adds	r3, r7, r1
 8005852:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005854:	230f      	movs	r3, #15
 8005856:	18fb      	adds	r3, r7, r3
 8005858:	781b      	ldrb	r3, [r3, #0]
 800585a:	b25b      	sxtb	r3, r3
 800585c:	2b00      	cmp	r3, #0
 800585e:	dce5      	bgt.n	800582c <prvUnlockQueue+0x1a>
 8005860:	e000      	b.n	8005864 <prvUnlockQueue+0x52>
					break;
 8005862:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2245      	movs	r2, #69	; 0x45
 8005868:	21ff      	movs	r1, #255	; 0xff
 800586a:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 800586c:	f001 fbda 	bl	8007024 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005870:	f001 fbc6 	bl	8007000 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005874:	230e      	movs	r3, #14
 8005876:	18fb      	adds	r3, r7, r3
 8005878:	687a      	ldr	r2, [r7, #4]
 800587a:	2144      	movs	r1, #68	; 0x44
 800587c:	5c52      	ldrb	r2, [r2, r1]
 800587e:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005880:	e013      	b.n	80058aa <prvUnlockQueue+0x98>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	691b      	ldr	r3, [r3, #16]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d016      	beq.n	80058b8 <prvUnlockQueue+0xa6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	3310      	adds	r3, #16
 800588e:	0018      	movs	r0, r3
 8005890:	f000 fcbc 	bl	800620c <xTaskRemoveFromEventList>
 8005894:	1e03      	subs	r3, r0, #0
 8005896:	d001      	beq.n	800589c <prvUnlockQueue+0x8a>
				{
					vTaskMissedYield();
 8005898:	f000 fd78 	bl	800638c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800589c:	210e      	movs	r1, #14
 800589e:	187b      	adds	r3, r7, r1
 80058a0:	781b      	ldrb	r3, [r3, #0]
 80058a2:	3b01      	subs	r3, #1
 80058a4:	b2da      	uxtb	r2, r3
 80058a6:	187b      	adds	r3, r7, r1
 80058a8:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80058aa:	230e      	movs	r3, #14
 80058ac:	18fb      	adds	r3, r7, r3
 80058ae:	781b      	ldrb	r3, [r3, #0]
 80058b0:	b25b      	sxtb	r3, r3
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	dce5      	bgt.n	8005882 <prvUnlockQueue+0x70>
 80058b6:	e000      	b.n	80058ba <prvUnlockQueue+0xa8>
			}
			else
			{
				break;
 80058b8:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2244      	movs	r2, #68	; 0x44
 80058be:	21ff      	movs	r1, #255	; 0xff
 80058c0:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 80058c2:	f001 fbaf 	bl	8007024 <vPortExitCritical>
}
 80058c6:	46c0      	nop			; (mov r8, r8)
 80058c8:	46bd      	mov	sp, r7
 80058ca:	b004      	add	sp, #16
 80058cc:	bd80      	pop	{r7, pc}

080058ce <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80058ce:	b580      	push	{r7, lr}
 80058d0:	b084      	sub	sp, #16
 80058d2:	af00      	add	r7, sp, #0
 80058d4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80058d6:	f001 fb93 	bl	8007000 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d102      	bne.n	80058e8 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80058e2:	2301      	movs	r3, #1
 80058e4:	60fb      	str	r3, [r7, #12]
 80058e6:	e001      	b.n	80058ec <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80058e8:	2300      	movs	r3, #0
 80058ea:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80058ec:	f001 fb9a 	bl	8007024 <vPortExitCritical>

	return xReturn;
 80058f0:	68fb      	ldr	r3, [r7, #12]
}
 80058f2:	0018      	movs	r0, r3
 80058f4:	46bd      	mov	sp, r7
 80058f6:	b004      	add	sp, #16
 80058f8:	bd80      	pop	{r7, pc}

080058fa <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80058fa:	b580      	push	{r7, lr}
 80058fc:	b084      	sub	sp, #16
 80058fe:	af00      	add	r7, sp, #0
 8005900:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005902:	f001 fb7d 	bl	8007000 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800590e:	429a      	cmp	r2, r3
 8005910:	d102      	bne.n	8005918 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005912:	2301      	movs	r3, #1
 8005914:	60fb      	str	r3, [r7, #12]
 8005916:	e001      	b.n	800591c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005918:	2300      	movs	r3, #0
 800591a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800591c:	f001 fb82 	bl	8007024 <vPortExitCritical>

	return xReturn;
 8005920:	68fb      	ldr	r3, [r7, #12]
}
 8005922:	0018      	movs	r0, r3
 8005924:	46bd      	mov	sp, r7
 8005926:	b004      	add	sp, #16
 8005928:	bd80      	pop	{r7, pc}
	...

0800592c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800592c:	b580      	push	{r7, lr}
 800592e:	b084      	sub	sp, #16
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
 8005934:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005936:	2300      	movs	r3, #0
 8005938:	60fb      	str	r3, [r7, #12]
 800593a:	e015      	b.n	8005968 <vQueueAddToRegistry+0x3c>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800593c:	4b0e      	ldr	r3, [pc, #56]	; (8005978 <vQueueAddToRegistry+0x4c>)
 800593e:	68fa      	ldr	r2, [r7, #12]
 8005940:	00d2      	lsls	r2, r2, #3
 8005942:	58d3      	ldr	r3, [r2, r3]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d10c      	bne.n	8005962 <vQueueAddToRegistry+0x36>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005948:	4b0b      	ldr	r3, [pc, #44]	; (8005978 <vQueueAddToRegistry+0x4c>)
 800594a:	68fa      	ldr	r2, [r7, #12]
 800594c:	00d2      	lsls	r2, r2, #3
 800594e:	6839      	ldr	r1, [r7, #0]
 8005950:	50d1      	str	r1, [r2, r3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005952:	4a09      	ldr	r2, [pc, #36]	; (8005978 <vQueueAddToRegistry+0x4c>)
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	00db      	lsls	r3, r3, #3
 8005958:	18d3      	adds	r3, r2, r3
 800595a:	3304      	adds	r3, #4
 800595c:	687a      	ldr	r2, [r7, #4]
 800595e:	601a      	str	r2, [r3, #0]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005960:	e006      	b.n	8005970 <vQueueAddToRegistry+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	3301      	adds	r3, #1
 8005966:	60fb      	str	r3, [r7, #12]
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	2b07      	cmp	r3, #7
 800596c:	d9e6      	bls.n	800593c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800596e:	46c0      	nop			; (mov r8, r8)
 8005970:	46c0      	nop			; (mov r8, r8)
 8005972:	46bd      	mov	sp, r7
 8005974:	b004      	add	sp, #16
 8005976:	bd80      	pop	{r7, pc}
 8005978:	20000e40 	.word	0x20000e40

0800597c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800597c:	b580      	push	{r7, lr}
 800597e:	b084      	sub	sp, #16
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005984:	2300      	movs	r3, #0
 8005986:	60fb      	str	r3, [r7, #12]
 8005988:	e018      	b.n	80059bc <vQueueUnregisterQueue+0x40>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800598a:	4a10      	ldr	r2, [pc, #64]	; (80059cc <vQueueUnregisterQueue+0x50>)
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	00db      	lsls	r3, r3, #3
 8005990:	18d3      	adds	r3, r2, r3
 8005992:	3304      	adds	r3, #4
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	687a      	ldr	r2, [r7, #4]
 8005998:	429a      	cmp	r2, r3
 800599a:	d10c      	bne.n	80059b6 <vQueueUnregisterQueue+0x3a>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800599c:	4b0b      	ldr	r3, [pc, #44]	; (80059cc <vQueueUnregisterQueue+0x50>)
 800599e:	68fa      	ldr	r2, [r7, #12]
 80059a0:	00d2      	lsls	r2, r2, #3
 80059a2:	2100      	movs	r1, #0
 80059a4:	50d1      	str	r1, [r2, r3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80059a6:	4a09      	ldr	r2, [pc, #36]	; (80059cc <vQueueUnregisterQueue+0x50>)
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	00db      	lsls	r3, r3, #3
 80059ac:	18d3      	adds	r3, r2, r3
 80059ae:	3304      	adds	r3, #4
 80059b0:	2200      	movs	r2, #0
 80059b2:	601a      	str	r2, [r3, #0]
				break;
 80059b4:	e006      	b.n	80059c4 <vQueueUnregisterQueue+0x48>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	3301      	adds	r3, #1
 80059ba:	60fb      	str	r3, [r7, #12]
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	2b07      	cmp	r3, #7
 80059c0:	d9e3      	bls.n	800598a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80059c2:	46c0      	nop			; (mov r8, r8)
 80059c4:	46c0      	nop			; (mov r8, r8)
 80059c6:	46bd      	mov	sp, r7
 80059c8:	b004      	add	sp, #16
 80059ca:	bd80      	pop	{r7, pc}
 80059cc:	20000e40 	.word	0x20000e40

080059d0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b086      	sub	sp, #24
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	60f8      	str	r0, [r7, #12]
 80059d8:	60b9      	str	r1, [r7, #8]
 80059da:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80059e0:	f001 fb0e 	bl	8007000 <vPortEnterCritical>
 80059e4:	697b      	ldr	r3, [r7, #20]
 80059e6:	2244      	movs	r2, #68	; 0x44
 80059e8:	5c9b      	ldrb	r3, [r3, r2]
 80059ea:	b25b      	sxtb	r3, r3
 80059ec:	3301      	adds	r3, #1
 80059ee:	d103      	bne.n	80059f8 <vQueueWaitForMessageRestricted+0x28>
 80059f0:	697b      	ldr	r3, [r7, #20]
 80059f2:	2244      	movs	r2, #68	; 0x44
 80059f4:	2100      	movs	r1, #0
 80059f6:	5499      	strb	r1, [r3, r2]
 80059f8:	697b      	ldr	r3, [r7, #20]
 80059fa:	2245      	movs	r2, #69	; 0x45
 80059fc:	5c9b      	ldrb	r3, [r3, r2]
 80059fe:	b25b      	sxtb	r3, r3
 8005a00:	3301      	adds	r3, #1
 8005a02:	d103      	bne.n	8005a0c <vQueueWaitForMessageRestricted+0x3c>
 8005a04:	697b      	ldr	r3, [r7, #20]
 8005a06:	2245      	movs	r2, #69	; 0x45
 8005a08:	2100      	movs	r1, #0
 8005a0a:	5499      	strb	r1, [r3, r2]
 8005a0c:	f001 fb0a 	bl	8007024 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005a10:	697b      	ldr	r3, [r7, #20]
 8005a12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d106      	bne.n	8005a26 <vQueueWaitForMessageRestricted+0x56>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005a18:	697b      	ldr	r3, [r7, #20]
 8005a1a:	3324      	adds	r3, #36	; 0x24
 8005a1c:	687a      	ldr	r2, [r7, #4]
 8005a1e:	68b9      	ldr	r1, [r7, #8]
 8005a20:	0018      	movs	r0, r3
 8005a22:	f000 fbcd 	bl	80061c0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005a26:	697b      	ldr	r3, [r7, #20]
 8005a28:	0018      	movs	r0, r3
 8005a2a:	f7ff fef2 	bl	8005812 <prvUnlockQueue>
	}
 8005a2e:	46c0      	nop			; (mov r8, r8)
 8005a30:	46bd      	mov	sp, r7
 8005a32:	b006      	add	sp, #24
 8005a34:	bd80      	pop	{r7, pc}

08005a36 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005a36:	b590      	push	{r4, r7, lr}
 8005a38:	b08d      	sub	sp, #52	; 0x34
 8005a3a:	af04      	add	r7, sp, #16
 8005a3c:	60f8      	str	r0, [r7, #12]
 8005a3e:	60b9      	str	r1, [r7, #8]
 8005a40:	607a      	str	r2, [r7, #4]
 8005a42:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005a44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d101      	bne.n	8005a4e <xTaskCreateStatic+0x18>
 8005a4a:	b672      	cpsid	i
 8005a4c:	e7fe      	b.n	8005a4c <xTaskCreateStatic+0x16>
		configASSERT( pxTaskBuffer != NULL );
 8005a4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d101      	bne.n	8005a58 <xTaskCreateStatic+0x22>
 8005a54:	b672      	cpsid	i
 8005a56:	e7fe      	b.n	8005a56 <xTaskCreateStatic+0x20>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005a58:	23bc      	movs	r3, #188	; 0xbc
 8005a5a:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005a5c:	697b      	ldr	r3, [r7, #20]
 8005a5e:	2bbc      	cmp	r3, #188	; 0xbc
 8005a60:	d001      	beq.n	8005a66 <xTaskCreateStatic+0x30>
 8005a62:	b672      	cpsid	i
 8005a64:	e7fe      	b.n	8005a64 <xTaskCreateStatic+0x2e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005a66:	697b      	ldr	r3, [r7, #20]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005a68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d020      	beq.n	8005ab0 <xTaskCreateStatic+0x7a>
 8005a6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d01d      	beq.n	8005ab0 <xTaskCreateStatic+0x7a>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005a74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a76:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005a78:	69fb      	ldr	r3, [r7, #28]
 8005a7a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005a7c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005a7e:	69fb      	ldr	r3, [r7, #28]
 8005a80:	22b9      	movs	r2, #185	; 0xb9
 8005a82:	2102      	movs	r1, #2
 8005a84:	5499      	strb	r1, [r3, r2]
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005a86:	683c      	ldr	r4, [r7, #0]
 8005a88:	687a      	ldr	r2, [r7, #4]
 8005a8a:	68b9      	ldr	r1, [r7, #8]
 8005a8c:	68f8      	ldr	r0, [r7, #12]
 8005a8e:	2300      	movs	r3, #0
 8005a90:	9303      	str	r3, [sp, #12]
 8005a92:	69fb      	ldr	r3, [r7, #28]
 8005a94:	9302      	str	r3, [sp, #8]
 8005a96:	2318      	movs	r3, #24
 8005a98:	18fb      	adds	r3, r7, r3
 8005a9a:	9301      	str	r3, [sp, #4]
 8005a9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a9e:	9300      	str	r3, [sp, #0]
 8005aa0:	0023      	movs	r3, r4
 8005aa2:	f000 f859 	bl	8005b58 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005aa6:	69fb      	ldr	r3, [r7, #28]
 8005aa8:	0018      	movs	r0, r3
 8005aaa:	f000 f8f5 	bl	8005c98 <prvAddNewTaskToReadyList>
 8005aae:	e001      	b.n	8005ab4 <xTaskCreateStatic+0x7e>
		}
		else
		{
			xReturn = NULL;
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005ab4:	69bb      	ldr	r3, [r7, #24]
	}
 8005ab6:	0018      	movs	r0, r3
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	b009      	add	sp, #36	; 0x24
 8005abc:	bd90      	pop	{r4, r7, pc}

08005abe <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005abe:	b590      	push	{r4, r7, lr}
 8005ac0:	b08d      	sub	sp, #52	; 0x34
 8005ac2:	af04      	add	r7, sp, #16
 8005ac4:	60f8      	str	r0, [r7, #12]
 8005ac6:	60b9      	str	r1, [r7, #8]
 8005ac8:	603b      	str	r3, [r7, #0]
 8005aca:	1dbb      	adds	r3, r7, #6
 8005acc:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005ace:	1dbb      	adds	r3, r7, #6
 8005ad0:	881b      	ldrh	r3, [r3, #0]
 8005ad2:	009b      	lsls	r3, r3, #2
 8005ad4:	0018      	movs	r0, r3
 8005ad6:	f001 fb2b 	bl	8007130 <pvPortMalloc>
 8005ada:	0003      	movs	r3, r0
 8005adc:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 8005ade:	697b      	ldr	r3, [r7, #20]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d010      	beq.n	8005b06 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005ae4:	20bc      	movs	r0, #188	; 0xbc
 8005ae6:	f001 fb23 	bl	8007130 <pvPortMalloc>
 8005aea:	0003      	movs	r3, r0
 8005aec:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 8005aee:	69fb      	ldr	r3, [r7, #28]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d003      	beq.n	8005afc <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005af4:	69fb      	ldr	r3, [r7, #28]
 8005af6:	697a      	ldr	r2, [r7, #20]
 8005af8:	631a      	str	r2, [r3, #48]	; 0x30
 8005afa:	e006      	b.n	8005b0a <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005afc:	697b      	ldr	r3, [r7, #20]
 8005afe:	0018      	movs	r0, r3
 8005b00:	f001 fbc2 	bl	8007288 <vPortFree>
 8005b04:	e001      	b.n	8005b0a <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005b06:	2300      	movs	r3, #0
 8005b08:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005b0a:	69fb      	ldr	r3, [r7, #28]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d01a      	beq.n	8005b46 <xTaskCreate+0x88>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005b10:	69fb      	ldr	r3, [r7, #28]
 8005b12:	22b9      	movs	r2, #185	; 0xb9
 8005b14:	2100      	movs	r1, #0
 8005b16:	5499      	strb	r1, [r3, r2]
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005b18:	1dbb      	adds	r3, r7, #6
 8005b1a:	881a      	ldrh	r2, [r3, #0]
 8005b1c:	683c      	ldr	r4, [r7, #0]
 8005b1e:	68b9      	ldr	r1, [r7, #8]
 8005b20:	68f8      	ldr	r0, [r7, #12]
 8005b22:	2300      	movs	r3, #0
 8005b24:	9303      	str	r3, [sp, #12]
 8005b26:	69fb      	ldr	r3, [r7, #28]
 8005b28:	9302      	str	r3, [sp, #8]
 8005b2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b2c:	9301      	str	r3, [sp, #4]
 8005b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b30:	9300      	str	r3, [sp, #0]
 8005b32:	0023      	movs	r3, r4
 8005b34:	f000 f810 	bl	8005b58 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005b38:	69fb      	ldr	r3, [r7, #28]
 8005b3a:	0018      	movs	r0, r3
 8005b3c:	f000 f8ac 	bl	8005c98 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005b40:	2301      	movs	r3, #1
 8005b42:	61bb      	str	r3, [r7, #24]
 8005b44:	e002      	b.n	8005b4c <xTaskCreate+0x8e>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005b46:	2301      	movs	r3, #1
 8005b48:	425b      	negs	r3, r3
 8005b4a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005b4c:	69bb      	ldr	r3, [r7, #24]
	}
 8005b4e:	0018      	movs	r0, r3
 8005b50:	46bd      	mov	sp, r7
 8005b52:	b009      	add	sp, #36	; 0x24
 8005b54:	bd90      	pop	{r4, r7, pc}
	...

08005b58 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b086      	sub	sp, #24
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	60f8      	str	r0, [r7, #12]
 8005b60:	60b9      	str	r1, [r7, #8]
 8005b62:	607a      	str	r2, [r7, #4]
 8005b64:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005b66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b68:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	009b      	lsls	r3, r3, #2
 8005b6e:	001a      	movs	r2, r3
 8005b70:	21a5      	movs	r1, #165	; 0xa5
 8005b72:	f001 fcbe 	bl	80074f2 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005b76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	4942      	ldr	r1, [pc, #264]	; (8005c88 <prvInitialiseNewTask+0x130>)
 8005b7e:	468c      	mov	ip, r1
 8005b80:	4463      	add	r3, ip
 8005b82:	009b      	lsls	r3, r3, #2
 8005b84:	18d3      	adds	r3, r2, r3
 8005b86:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005b88:	693b      	ldr	r3, [r7, #16]
 8005b8a:	2207      	movs	r2, #7
 8005b8c:	4393      	bics	r3, r2
 8005b8e:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005b90:	693b      	ldr	r3, [r7, #16]
 8005b92:	2207      	movs	r2, #7
 8005b94:	4013      	ands	r3, r2
 8005b96:	d001      	beq.n	8005b9c <prvInitialiseNewTask+0x44>
 8005b98:	b672      	cpsid	i
 8005b9a:	e7fe      	b.n	8005b9a <prvInitialiseNewTask+0x42>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005b9c:	68bb      	ldr	r3, [r7, #8]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d020      	beq.n	8005be4 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	617b      	str	r3, [r7, #20]
 8005ba6:	e013      	b.n	8005bd0 <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005ba8:	68ba      	ldr	r2, [r7, #8]
 8005baa:	697b      	ldr	r3, [r7, #20]
 8005bac:	18d3      	adds	r3, r2, r3
 8005bae:	7818      	ldrb	r0, [r3, #0]
 8005bb0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005bb2:	2134      	movs	r1, #52	; 0x34
 8005bb4:	697b      	ldr	r3, [r7, #20]
 8005bb6:	18d3      	adds	r3, r2, r3
 8005bb8:	185b      	adds	r3, r3, r1
 8005bba:	1c02      	adds	r2, r0, #0
 8005bbc:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005bbe:	68ba      	ldr	r2, [r7, #8]
 8005bc0:	697b      	ldr	r3, [r7, #20]
 8005bc2:	18d3      	adds	r3, r2, r3
 8005bc4:	781b      	ldrb	r3, [r3, #0]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d006      	beq.n	8005bd8 <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005bca:	697b      	ldr	r3, [r7, #20]
 8005bcc:	3301      	adds	r3, #1
 8005bce:	617b      	str	r3, [r7, #20]
 8005bd0:	697b      	ldr	r3, [r7, #20]
 8005bd2:	2b0f      	cmp	r3, #15
 8005bd4:	d9e8      	bls.n	8005ba8 <prvInitialiseNewTask+0x50>
 8005bd6:	e000      	b.n	8005bda <prvInitialiseNewTask+0x82>
			{
				break;
 8005bd8:	46c0      	nop			; (mov r8, r8)
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005bda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bdc:	2243      	movs	r2, #67	; 0x43
 8005bde:	2100      	movs	r1, #0
 8005be0:	5499      	strb	r1, [r3, r2]
 8005be2:	e003      	b.n	8005bec <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005be4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005be6:	2234      	movs	r2, #52	; 0x34
 8005be8:	2100      	movs	r1, #0
 8005bea:	5499      	strb	r1, [r3, r2]
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005bec:	6a3b      	ldr	r3, [r7, #32]
 8005bee:	2b37      	cmp	r3, #55	; 0x37
 8005bf0:	d901      	bls.n	8005bf6 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005bf2:	2337      	movs	r3, #55	; 0x37
 8005bf4:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005bf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bf8:	6a3a      	ldr	r2, [r7, #32]
 8005bfa:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005bfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bfe:	6a3a      	ldr	r2, [r7, #32]
 8005c00:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005c02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c04:	2200      	movs	r2, #0
 8005c06:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005c08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c0a:	3304      	adds	r3, #4
 8005c0c:	0018      	movs	r0, r3
 8005c0e:	f7fe ffe1 	bl	8004bd4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005c12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c14:	3318      	adds	r3, #24
 8005c16:	0018      	movs	r0, r3
 8005c18:	f7fe ffdc 	bl	8004bd4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005c1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c1e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005c20:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005c22:	6a3b      	ldr	r3, [r7, #32]
 8005c24:	2238      	movs	r2, #56	; 0x38
 8005c26:	1ad2      	subs	r2, r2, r3
 8005c28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c2a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005c2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c2e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005c30:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005c32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c34:	22b4      	movs	r2, #180	; 0xb4
 8005c36:	2100      	movs	r1, #0
 8005c38:	5099      	str	r1, [r3, r2]
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005c3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c3c:	22b8      	movs	r2, #184	; 0xb8
 8005c3e:	2100      	movs	r1, #0
 8005c40:	5499      	strb	r1, [r3, r2]
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005c42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c44:	3354      	adds	r3, #84	; 0x54
 8005c46:	2260      	movs	r2, #96	; 0x60
 8005c48:	2100      	movs	r1, #0
 8005c4a:	0018      	movs	r0, r3
 8005c4c:	f001 fc51 	bl	80074f2 <memset>
 8005c50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c52:	4a0e      	ldr	r2, [pc, #56]	; (8005c8c <prvInitialiseNewTask+0x134>)
 8005c54:	659a      	str	r2, [r3, #88]	; 0x58
 8005c56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c58:	4a0d      	ldr	r2, [pc, #52]	; (8005c90 <prvInitialiseNewTask+0x138>)
 8005c5a:	65da      	str	r2, [r3, #92]	; 0x5c
 8005c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c5e:	4a0d      	ldr	r2, [pc, #52]	; (8005c94 <prvInitialiseNewTask+0x13c>)
 8005c60:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005c62:	683a      	ldr	r2, [r7, #0]
 8005c64:	68f9      	ldr	r1, [r7, #12]
 8005c66:	693b      	ldr	r3, [r7, #16]
 8005c68:	0018      	movs	r0, r3
 8005c6a:	f001 f92f 	bl	8006ecc <pxPortInitialiseStack>
 8005c6e:	0002      	movs	r2, r0
 8005c70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c72:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d002      	beq.n	8005c80 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005c7e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005c80:	46c0      	nop			; (mov r8, r8)
 8005c82:	46bd      	mov	sp, r7
 8005c84:	b006      	add	sp, #24
 8005c86:	bd80      	pop	{r7, pc}
 8005c88:	3fffffff 	.word	0x3fffffff
 8005c8c:	08007810 	.word	0x08007810
 8005c90:	08007830 	.word	0x08007830
 8005c94:	080077f0 	.word	0x080077f0

08005c98 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b082      	sub	sp, #8
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005ca0:	f001 f9ae 	bl	8007000 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005ca4:	4b2a      	ldr	r3, [pc, #168]	; (8005d50 <prvAddNewTaskToReadyList+0xb8>)
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	1c5a      	adds	r2, r3, #1
 8005caa:	4b29      	ldr	r3, [pc, #164]	; (8005d50 <prvAddNewTaskToReadyList+0xb8>)
 8005cac:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8005cae:	4b29      	ldr	r3, [pc, #164]	; (8005d54 <prvAddNewTaskToReadyList+0xbc>)
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d109      	bne.n	8005cca <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005cb6:	4b27      	ldr	r3, [pc, #156]	; (8005d54 <prvAddNewTaskToReadyList+0xbc>)
 8005cb8:	687a      	ldr	r2, [r7, #4]
 8005cba:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005cbc:	4b24      	ldr	r3, [pc, #144]	; (8005d50 <prvAddNewTaskToReadyList+0xb8>)
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	2b01      	cmp	r3, #1
 8005cc2:	d110      	bne.n	8005ce6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005cc4:	f000 fb7c 	bl	80063c0 <prvInitialiseTaskLists>
 8005cc8:	e00d      	b.n	8005ce6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005cca:	4b23      	ldr	r3, [pc, #140]	; (8005d58 <prvAddNewTaskToReadyList+0xc0>)
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d109      	bne.n	8005ce6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005cd2:	4b20      	ldr	r3, [pc, #128]	; (8005d54 <prvAddNewTaskToReadyList+0xbc>)
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cdc:	429a      	cmp	r2, r3
 8005cde:	d802      	bhi.n	8005ce6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005ce0:	4b1c      	ldr	r3, [pc, #112]	; (8005d54 <prvAddNewTaskToReadyList+0xbc>)
 8005ce2:	687a      	ldr	r2, [r7, #4]
 8005ce4:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005ce6:	4b1d      	ldr	r3, [pc, #116]	; (8005d5c <prvAddNewTaskToReadyList+0xc4>)
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	1c5a      	adds	r2, r3, #1
 8005cec:	4b1b      	ldr	r3, [pc, #108]	; (8005d5c <prvAddNewTaskToReadyList+0xc4>)
 8005cee:	601a      	str	r2, [r3, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005cf0:	4b1a      	ldr	r3, [pc, #104]	; (8005d5c <prvAddNewTaskToReadyList+0xc4>)
 8005cf2:	681a      	ldr	r2, [r3, #0]
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cfc:	4b18      	ldr	r3, [pc, #96]	; (8005d60 <prvAddNewTaskToReadyList+0xc8>)
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	429a      	cmp	r2, r3
 8005d02:	d903      	bls.n	8005d0c <prvAddNewTaskToReadyList+0x74>
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d08:	4b15      	ldr	r3, [pc, #84]	; (8005d60 <prvAddNewTaskToReadyList+0xc8>)
 8005d0a:	601a      	str	r2, [r3, #0]
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d10:	0013      	movs	r3, r2
 8005d12:	009b      	lsls	r3, r3, #2
 8005d14:	189b      	adds	r3, r3, r2
 8005d16:	009b      	lsls	r3, r3, #2
 8005d18:	4a12      	ldr	r2, [pc, #72]	; (8005d64 <prvAddNewTaskToReadyList+0xcc>)
 8005d1a:	189a      	adds	r2, r3, r2
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	3304      	adds	r3, #4
 8005d20:	0019      	movs	r1, r3
 8005d22:	0010      	movs	r0, r2
 8005d24:	f7fe ff61 	bl	8004bea <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005d28:	f001 f97c 	bl	8007024 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005d2c:	4b0a      	ldr	r3, [pc, #40]	; (8005d58 <prvAddNewTaskToReadyList+0xc0>)
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d008      	beq.n	8005d46 <prvAddNewTaskToReadyList+0xae>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005d34:	4b07      	ldr	r3, [pc, #28]	; (8005d54 <prvAddNewTaskToReadyList+0xbc>)
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d3e:	429a      	cmp	r2, r3
 8005d40:	d201      	bcs.n	8005d46 <prvAddNewTaskToReadyList+0xae>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005d42:	f001 f94d 	bl	8006fe0 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005d46:	46c0      	nop			; (mov r8, r8)
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	b002      	add	sp, #8
 8005d4c:	bd80      	pop	{r7, pc}
 8005d4e:	46c0      	nop			; (mov r8, r8)
 8005d50:	20001354 	.word	0x20001354
 8005d54:	20000e80 	.word	0x20000e80
 8005d58:	20001360 	.word	0x20001360
 8005d5c:	20001370 	.word	0x20001370
 8005d60:	2000135c 	.word	0x2000135c
 8005d64:	20000e84 	.word	0x20000e84

08005d68 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005d68:	b590      	push	{r4, r7, lr}
 8005d6a:	b089      	sub	sp, #36	; 0x24
 8005d6c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005d6e:	2300      	movs	r3, #0
 8005d70:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005d72:	2300      	movs	r3, #0
 8005d74:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005d76:	003a      	movs	r2, r7
 8005d78:	1d39      	adds	r1, r7, #4
 8005d7a:	2308      	movs	r3, #8
 8005d7c:	18fb      	adds	r3, r7, r3
 8005d7e:	0018      	movs	r0, r3
 8005d80:	f7fe feda 	bl	8004b38 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005d84:	683c      	ldr	r4, [r7, #0]
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	68ba      	ldr	r2, [r7, #8]
 8005d8a:	491e      	ldr	r1, [pc, #120]	; (8005e04 <vTaskStartScheduler+0x9c>)
 8005d8c:	481e      	ldr	r0, [pc, #120]	; (8005e08 <vTaskStartScheduler+0xa0>)
 8005d8e:	9202      	str	r2, [sp, #8]
 8005d90:	9301      	str	r3, [sp, #4]
 8005d92:	2300      	movs	r3, #0
 8005d94:	9300      	str	r3, [sp, #0]
 8005d96:	2300      	movs	r3, #0
 8005d98:	0022      	movs	r2, r4
 8005d9a:	f7ff fe4c 	bl	8005a36 <xTaskCreateStatic>
 8005d9e:	0002      	movs	r2, r0
 8005da0:	4b1a      	ldr	r3, [pc, #104]	; (8005e0c <vTaskStartScheduler+0xa4>)
 8005da2:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005da4:	4b19      	ldr	r3, [pc, #100]	; (8005e0c <vTaskStartScheduler+0xa4>)
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d002      	beq.n	8005db2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005dac:	2301      	movs	r3, #1
 8005dae:	60fb      	str	r3, [r7, #12]
 8005db0:	e001      	b.n	8005db6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005db2:	2300      	movs	r3, #0
 8005db4:	60fb      	str	r3, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	2b01      	cmp	r3, #1
 8005dba:	d103      	bne.n	8005dc4 <vTaskStartScheduler+0x5c>
		{
			xReturn = xTimerCreateTimerTask();
 8005dbc:	f000 fd74 	bl	80068a8 <xTimerCreateTimerTask>
 8005dc0:	0003      	movs	r3, r0
 8005dc2:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	2b01      	cmp	r3, #1
 8005dc8:	d113      	bne.n	8005df2 <vTaskStartScheduler+0x8a>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 8005dca:	b672      	cpsid	i
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005dcc:	4b10      	ldr	r3, [pc, #64]	; (8005e10 <vTaskStartScheduler+0xa8>)
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	3354      	adds	r3, #84	; 0x54
 8005dd2:	001a      	movs	r2, r3
 8005dd4:	4b0f      	ldr	r3, [pc, #60]	; (8005e14 <vTaskStartScheduler+0xac>)
 8005dd6:	601a      	str	r2, [r3, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005dd8:	4b0f      	ldr	r3, [pc, #60]	; (8005e18 <vTaskStartScheduler+0xb0>)
 8005dda:	2201      	movs	r2, #1
 8005ddc:	4252      	negs	r2, r2
 8005dde:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005de0:	4b0e      	ldr	r3, [pc, #56]	; (8005e1c <vTaskStartScheduler+0xb4>)
 8005de2:	2201      	movs	r2, #1
 8005de4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005de6:	4b0e      	ldr	r3, [pc, #56]	; (8005e20 <vTaskStartScheduler+0xb8>)
 8005de8:	2200      	movs	r2, #0
 8005dea:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005dec:	f001 f8d4 	bl	8006f98 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005df0:	e004      	b.n	8005dfc <vTaskStartScheduler+0x94>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	3301      	adds	r3, #1
 8005df6:	d101      	bne.n	8005dfc <vTaskStartScheduler+0x94>
 8005df8:	b672      	cpsid	i
 8005dfa:	e7fe      	b.n	8005dfa <vTaskStartScheduler+0x92>
}
 8005dfc:	46c0      	nop			; (mov r8, r8)
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	b005      	add	sp, #20
 8005e02:	bd90      	pop	{r4, r7, pc}
 8005e04:	080076dc 	.word	0x080076dc
 8005e08:	080063a1 	.word	0x080063a1
 8005e0c:	20001378 	.word	0x20001378
 8005e10:	20000e80 	.word	0x20000e80
 8005e14:	20000010 	.word	0x20000010
 8005e18:	20001374 	.word	0x20001374
 8005e1c:	20001360 	.word	0x20001360
 8005e20:	20001358 	.word	0x20001358

08005e24 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005e28:	4b03      	ldr	r3, [pc, #12]	; (8005e38 <vTaskSuspendAll+0x14>)
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	1c5a      	adds	r2, r3, #1
 8005e2e:	4b02      	ldr	r3, [pc, #8]	; (8005e38 <vTaskSuspendAll+0x14>)
 8005e30:	601a      	str	r2, [r3, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005e32:	46c0      	nop			; (mov r8, r8)
 8005e34:	46bd      	mov	sp, r7
 8005e36:	bd80      	pop	{r7, pc}
 8005e38:	2000137c 	.word	0x2000137c

08005e3c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b084      	sub	sp, #16
 8005e40:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005e42:	2300      	movs	r3, #0
 8005e44:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005e46:	2300      	movs	r3, #0
 8005e48:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005e4a:	4b3a      	ldr	r3, [pc, #232]	; (8005f34 <xTaskResumeAll+0xf8>)
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d101      	bne.n	8005e56 <xTaskResumeAll+0x1a>
 8005e52:	b672      	cpsid	i
 8005e54:	e7fe      	b.n	8005e54 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005e56:	f001 f8d3 	bl	8007000 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005e5a:	4b36      	ldr	r3, [pc, #216]	; (8005f34 <xTaskResumeAll+0xf8>)
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	1e5a      	subs	r2, r3, #1
 8005e60:	4b34      	ldr	r3, [pc, #208]	; (8005f34 <xTaskResumeAll+0xf8>)
 8005e62:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005e64:	4b33      	ldr	r3, [pc, #204]	; (8005f34 <xTaskResumeAll+0xf8>)
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d15b      	bne.n	8005f24 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005e6c:	4b32      	ldr	r3, [pc, #200]	; (8005f38 <xTaskResumeAll+0xfc>)
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d057      	beq.n	8005f24 <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005e74:	e02f      	b.n	8005ed6 <xTaskResumeAll+0x9a>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e76:	4b31      	ldr	r3, [pc, #196]	; (8005f3c <xTaskResumeAll+0x100>)
 8005e78:	68db      	ldr	r3, [r3, #12]
 8005e7a:	68db      	ldr	r3, [r3, #12]
 8005e7c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	3318      	adds	r3, #24
 8005e82:	0018      	movs	r0, r3
 8005e84:	f7fe ff09 	bl	8004c9a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	3304      	adds	r3, #4
 8005e8c:	0018      	movs	r0, r3
 8005e8e:	f7fe ff04 	bl	8004c9a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e96:	4b2a      	ldr	r3, [pc, #168]	; (8005f40 <xTaskResumeAll+0x104>)
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	429a      	cmp	r2, r3
 8005e9c:	d903      	bls.n	8005ea6 <xTaskResumeAll+0x6a>
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ea2:	4b27      	ldr	r3, [pc, #156]	; (8005f40 <xTaskResumeAll+0x104>)
 8005ea4:	601a      	str	r2, [r3, #0]
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005eaa:	0013      	movs	r3, r2
 8005eac:	009b      	lsls	r3, r3, #2
 8005eae:	189b      	adds	r3, r3, r2
 8005eb0:	009b      	lsls	r3, r3, #2
 8005eb2:	4a24      	ldr	r2, [pc, #144]	; (8005f44 <xTaskResumeAll+0x108>)
 8005eb4:	189a      	adds	r2, r3, r2
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	3304      	adds	r3, #4
 8005eba:	0019      	movs	r1, r3
 8005ebc:	0010      	movs	r0, r2
 8005ebe:	f7fe fe94 	bl	8004bea <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ec6:	4b20      	ldr	r3, [pc, #128]	; (8005f48 <xTaskResumeAll+0x10c>)
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ecc:	429a      	cmp	r2, r3
 8005ece:	d302      	bcc.n	8005ed6 <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 8005ed0:	4b1e      	ldr	r3, [pc, #120]	; (8005f4c <xTaskResumeAll+0x110>)
 8005ed2:	2201      	movs	r2, #1
 8005ed4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005ed6:	4b19      	ldr	r3, [pc, #100]	; (8005f3c <xTaskResumeAll+0x100>)
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d1cb      	bne.n	8005e76 <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d001      	beq.n	8005ee8 <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005ee4:	f000 fb0c 	bl	8006500 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005ee8:	4b19      	ldr	r3, [pc, #100]	; (8005f50 <xTaskResumeAll+0x114>)
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d00f      	beq.n	8005f14 <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005ef4:	f000 f83c 	bl	8005f70 <xTaskIncrementTick>
 8005ef8:	1e03      	subs	r3, r0, #0
 8005efa:	d002      	beq.n	8005f02 <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 8005efc:	4b13      	ldr	r3, [pc, #76]	; (8005f4c <xTaskResumeAll+0x110>)
 8005efe:	2201      	movs	r2, #1
 8005f00:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	3b01      	subs	r3, #1
 8005f06:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d1f2      	bne.n	8005ef4 <xTaskResumeAll+0xb8>

						xPendedTicks = 0;
 8005f0e:	4b10      	ldr	r3, [pc, #64]	; (8005f50 <xTaskResumeAll+0x114>)
 8005f10:	2200      	movs	r2, #0
 8005f12:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005f14:	4b0d      	ldr	r3, [pc, #52]	; (8005f4c <xTaskResumeAll+0x110>)
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d003      	beq.n	8005f24 <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005f1c:	2301      	movs	r3, #1
 8005f1e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005f20:	f001 f85e 	bl	8006fe0 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005f24:	f001 f87e 	bl	8007024 <vPortExitCritical>

	return xAlreadyYielded;
 8005f28:	68bb      	ldr	r3, [r7, #8]
}
 8005f2a:	0018      	movs	r0, r3
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	b004      	add	sp, #16
 8005f30:	bd80      	pop	{r7, pc}
 8005f32:	46c0      	nop			; (mov r8, r8)
 8005f34:	2000137c 	.word	0x2000137c
 8005f38:	20001354 	.word	0x20001354
 8005f3c:	20001314 	.word	0x20001314
 8005f40:	2000135c 	.word	0x2000135c
 8005f44:	20000e84 	.word	0x20000e84
 8005f48:	20000e80 	.word	0x20000e80
 8005f4c:	20001368 	.word	0x20001368
 8005f50:	20001364 	.word	0x20001364

08005f54 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b082      	sub	sp, #8
 8005f58:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005f5a:	4b04      	ldr	r3, [pc, #16]	; (8005f6c <xTaskGetTickCount+0x18>)
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005f60:	687b      	ldr	r3, [r7, #4]
}
 8005f62:	0018      	movs	r0, r3
 8005f64:	46bd      	mov	sp, r7
 8005f66:	b002      	add	sp, #8
 8005f68:	bd80      	pop	{r7, pc}
 8005f6a:	46c0      	nop			; (mov r8, r8)
 8005f6c:	20001358 	.word	0x20001358

08005f70 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b086      	sub	sp, #24
 8005f74:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005f76:	2300      	movs	r3, #0
 8005f78:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005f7a:	4b4a      	ldr	r3, [pc, #296]	; (80060a4 <xTaskIncrementTick+0x134>)
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d000      	beq.n	8005f84 <xTaskIncrementTick+0x14>
 8005f82:	e084      	b.n	800608e <xTaskIncrementTick+0x11e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005f84:	4b48      	ldr	r3, [pc, #288]	; (80060a8 <xTaskIncrementTick+0x138>)
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	3301      	adds	r3, #1
 8005f8a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005f8c:	4b46      	ldr	r3, [pc, #280]	; (80060a8 <xTaskIncrementTick+0x138>)
 8005f8e:	693a      	ldr	r2, [r7, #16]
 8005f90:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005f92:	693b      	ldr	r3, [r7, #16]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d117      	bne.n	8005fc8 <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 8005f98:	4b44      	ldr	r3, [pc, #272]	; (80060ac <xTaskIncrementTick+0x13c>)
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d001      	beq.n	8005fa6 <xTaskIncrementTick+0x36>
 8005fa2:	b672      	cpsid	i
 8005fa4:	e7fe      	b.n	8005fa4 <xTaskIncrementTick+0x34>
 8005fa6:	4b41      	ldr	r3, [pc, #260]	; (80060ac <xTaskIncrementTick+0x13c>)
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	60fb      	str	r3, [r7, #12]
 8005fac:	4b40      	ldr	r3, [pc, #256]	; (80060b0 <xTaskIncrementTick+0x140>)
 8005fae:	681a      	ldr	r2, [r3, #0]
 8005fb0:	4b3e      	ldr	r3, [pc, #248]	; (80060ac <xTaskIncrementTick+0x13c>)
 8005fb2:	601a      	str	r2, [r3, #0]
 8005fb4:	4b3e      	ldr	r3, [pc, #248]	; (80060b0 <xTaskIncrementTick+0x140>)
 8005fb6:	68fa      	ldr	r2, [r7, #12]
 8005fb8:	601a      	str	r2, [r3, #0]
 8005fba:	4b3e      	ldr	r3, [pc, #248]	; (80060b4 <xTaskIncrementTick+0x144>)
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	1c5a      	adds	r2, r3, #1
 8005fc0:	4b3c      	ldr	r3, [pc, #240]	; (80060b4 <xTaskIncrementTick+0x144>)
 8005fc2:	601a      	str	r2, [r3, #0]
 8005fc4:	f000 fa9c 	bl	8006500 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005fc8:	4b3b      	ldr	r3, [pc, #236]	; (80060b8 <xTaskIncrementTick+0x148>)
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	693a      	ldr	r2, [r7, #16]
 8005fce:	429a      	cmp	r2, r3
 8005fd0:	d349      	bcc.n	8006066 <xTaskIncrementTick+0xf6>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005fd2:	4b36      	ldr	r3, [pc, #216]	; (80060ac <xTaskIncrementTick+0x13c>)
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d104      	bne.n	8005fe6 <xTaskIncrementTick+0x76>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005fdc:	4b36      	ldr	r3, [pc, #216]	; (80060b8 <xTaskIncrementTick+0x148>)
 8005fde:	2201      	movs	r2, #1
 8005fe0:	4252      	negs	r2, r2
 8005fe2:	601a      	str	r2, [r3, #0]
					break;
 8005fe4:	e03f      	b.n	8006066 <xTaskIncrementTick+0xf6>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005fe6:	4b31      	ldr	r3, [pc, #196]	; (80060ac <xTaskIncrementTick+0x13c>)
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	68db      	ldr	r3, [r3, #12]
 8005fec:	68db      	ldr	r3, [r3, #12]
 8005fee:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005ff0:	68bb      	ldr	r3, [r7, #8]
 8005ff2:	685b      	ldr	r3, [r3, #4]
 8005ff4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005ff6:	693a      	ldr	r2, [r7, #16]
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	429a      	cmp	r2, r3
 8005ffc:	d203      	bcs.n	8006006 <xTaskIncrementTick+0x96>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005ffe:	4b2e      	ldr	r3, [pc, #184]	; (80060b8 <xTaskIncrementTick+0x148>)
 8006000:	687a      	ldr	r2, [r7, #4]
 8006002:	601a      	str	r2, [r3, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006004:	e02f      	b.n	8006066 <xTaskIncrementTick+0xf6>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006006:	68bb      	ldr	r3, [r7, #8]
 8006008:	3304      	adds	r3, #4
 800600a:	0018      	movs	r0, r3
 800600c:	f7fe fe45 	bl	8004c9a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006010:	68bb      	ldr	r3, [r7, #8]
 8006012:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006014:	2b00      	cmp	r3, #0
 8006016:	d004      	beq.n	8006022 <xTaskIncrementTick+0xb2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006018:	68bb      	ldr	r3, [r7, #8]
 800601a:	3318      	adds	r3, #24
 800601c:	0018      	movs	r0, r3
 800601e:	f7fe fe3c 	bl	8004c9a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006022:	68bb      	ldr	r3, [r7, #8]
 8006024:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006026:	4b25      	ldr	r3, [pc, #148]	; (80060bc <xTaskIncrementTick+0x14c>)
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	429a      	cmp	r2, r3
 800602c:	d903      	bls.n	8006036 <xTaskIncrementTick+0xc6>
 800602e:	68bb      	ldr	r3, [r7, #8]
 8006030:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006032:	4b22      	ldr	r3, [pc, #136]	; (80060bc <xTaskIncrementTick+0x14c>)
 8006034:	601a      	str	r2, [r3, #0]
 8006036:	68bb      	ldr	r3, [r7, #8]
 8006038:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800603a:	0013      	movs	r3, r2
 800603c:	009b      	lsls	r3, r3, #2
 800603e:	189b      	adds	r3, r3, r2
 8006040:	009b      	lsls	r3, r3, #2
 8006042:	4a1f      	ldr	r2, [pc, #124]	; (80060c0 <xTaskIncrementTick+0x150>)
 8006044:	189a      	adds	r2, r3, r2
 8006046:	68bb      	ldr	r3, [r7, #8]
 8006048:	3304      	adds	r3, #4
 800604a:	0019      	movs	r1, r3
 800604c:	0010      	movs	r0, r2
 800604e:	f7fe fdcc 	bl	8004bea <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006052:	68bb      	ldr	r3, [r7, #8]
 8006054:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006056:	4b1b      	ldr	r3, [pc, #108]	; (80060c4 <xTaskIncrementTick+0x154>)
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800605c:	429a      	cmp	r2, r3
 800605e:	d3b8      	bcc.n	8005fd2 <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 8006060:	2301      	movs	r3, #1
 8006062:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006064:	e7b5      	b.n	8005fd2 <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006066:	4b17      	ldr	r3, [pc, #92]	; (80060c4 <xTaskIncrementTick+0x154>)
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800606c:	4914      	ldr	r1, [pc, #80]	; (80060c0 <xTaskIncrementTick+0x150>)
 800606e:	0013      	movs	r3, r2
 8006070:	009b      	lsls	r3, r3, #2
 8006072:	189b      	adds	r3, r3, r2
 8006074:	009b      	lsls	r3, r3, #2
 8006076:	585b      	ldr	r3, [r3, r1]
 8006078:	2b01      	cmp	r3, #1
 800607a:	d901      	bls.n	8006080 <xTaskIncrementTick+0x110>
			{
				xSwitchRequired = pdTRUE;
 800607c:	2301      	movs	r3, #1
 800607e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006080:	4b11      	ldr	r3, [pc, #68]	; (80060c8 <xTaskIncrementTick+0x158>)
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d007      	beq.n	8006098 <xTaskIncrementTick+0x128>
			{
				xSwitchRequired = pdTRUE;
 8006088:	2301      	movs	r3, #1
 800608a:	617b      	str	r3, [r7, #20]
 800608c:	e004      	b.n	8006098 <xTaskIncrementTick+0x128>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800608e:	4b0f      	ldr	r3, [pc, #60]	; (80060cc <xTaskIncrementTick+0x15c>)
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	1c5a      	adds	r2, r3, #1
 8006094:	4b0d      	ldr	r3, [pc, #52]	; (80060cc <xTaskIncrementTick+0x15c>)
 8006096:	601a      	str	r2, [r3, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006098:	697b      	ldr	r3, [r7, #20]
}
 800609a:	0018      	movs	r0, r3
 800609c:	46bd      	mov	sp, r7
 800609e:	b006      	add	sp, #24
 80060a0:	bd80      	pop	{r7, pc}
 80060a2:	46c0      	nop			; (mov r8, r8)
 80060a4:	2000137c 	.word	0x2000137c
 80060a8:	20001358 	.word	0x20001358
 80060ac:	2000130c 	.word	0x2000130c
 80060b0:	20001310 	.word	0x20001310
 80060b4:	2000136c 	.word	0x2000136c
 80060b8:	20001374 	.word	0x20001374
 80060bc:	2000135c 	.word	0x2000135c
 80060c0:	20000e84 	.word	0x20000e84
 80060c4:	20000e80 	.word	0x20000e80
 80060c8:	20001368 	.word	0x20001368
 80060cc:	20001364 	.word	0x20001364

080060d0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b082      	sub	sp, #8
 80060d4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80060d6:	4b25      	ldr	r3, [pc, #148]	; (800616c <vTaskSwitchContext+0x9c>)
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d003      	beq.n	80060e6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80060de:	4b24      	ldr	r3, [pc, #144]	; (8006170 <vTaskSwitchContext+0xa0>)
 80060e0:	2201      	movs	r2, #1
 80060e2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80060e4:	e03d      	b.n	8006162 <vTaskSwitchContext+0x92>
		xYieldPending = pdFALSE;
 80060e6:	4b22      	ldr	r3, [pc, #136]	; (8006170 <vTaskSwitchContext+0xa0>)
 80060e8:	2200      	movs	r2, #0
 80060ea:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80060ec:	4b21      	ldr	r3, [pc, #132]	; (8006174 <vTaskSwitchContext+0xa4>)
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	607b      	str	r3, [r7, #4]
 80060f2:	e007      	b.n	8006104 <vTaskSwitchContext+0x34>
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d101      	bne.n	80060fe <vTaskSwitchContext+0x2e>
 80060fa:	b672      	cpsid	i
 80060fc:	e7fe      	b.n	80060fc <vTaskSwitchContext+0x2c>
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	3b01      	subs	r3, #1
 8006102:	607b      	str	r3, [r7, #4]
 8006104:	491c      	ldr	r1, [pc, #112]	; (8006178 <vTaskSwitchContext+0xa8>)
 8006106:	687a      	ldr	r2, [r7, #4]
 8006108:	0013      	movs	r3, r2
 800610a:	009b      	lsls	r3, r3, #2
 800610c:	189b      	adds	r3, r3, r2
 800610e:	009b      	lsls	r3, r3, #2
 8006110:	585b      	ldr	r3, [r3, r1]
 8006112:	2b00      	cmp	r3, #0
 8006114:	d0ee      	beq.n	80060f4 <vTaskSwitchContext+0x24>
 8006116:	687a      	ldr	r2, [r7, #4]
 8006118:	0013      	movs	r3, r2
 800611a:	009b      	lsls	r3, r3, #2
 800611c:	189b      	adds	r3, r3, r2
 800611e:	009b      	lsls	r3, r3, #2
 8006120:	4a15      	ldr	r2, [pc, #84]	; (8006178 <vTaskSwitchContext+0xa8>)
 8006122:	189b      	adds	r3, r3, r2
 8006124:	603b      	str	r3, [r7, #0]
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	685b      	ldr	r3, [r3, #4]
 800612a:	685a      	ldr	r2, [r3, #4]
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	605a      	str	r2, [r3, #4]
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	685a      	ldr	r2, [r3, #4]
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	3308      	adds	r3, #8
 8006138:	429a      	cmp	r2, r3
 800613a:	d104      	bne.n	8006146 <vTaskSwitchContext+0x76>
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	685b      	ldr	r3, [r3, #4]
 8006140:	685a      	ldr	r2, [r3, #4]
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	605a      	str	r2, [r3, #4]
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	685b      	ldr	r3, [r3, #4]
 800614a:	68da      	ldr	r2, [r3, #12]
 800614c:	4b0b      	ldr	r3, [pc, #44]	; (800617c <vTaskSwitchContext+0xac>)
 800614e:	601a      	str	r2, [r3, #0]
 8006150:	4b08      	ldr	r3, [pc, #32]	; (8006174 <vTaskSwitchContext+0xa4>)
 8006152:	687a      	ldr	r2, [r7, #4]
 8006154:	601a      	str	r2, [r3, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006156:	4b09      	ldr	r3, [pc, #36]	; (800617c <vTaskSwitchContext+0xac>)
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	3354      	adds	r3, #84	; 0x54
 800615c:	001a      	movs	r2, r3
 800615e:	4b08      	ldr	r3, [pc, #32]	; (8006180 <vTaskSwitchContext+0xb0>)
 8006160:	601a      	str	r2, [r3, #0]
}
 8006162:	46c0      	nop			; (mov r8, r8)
 8006164:	46bd      	mov	sp, r7
 8006166:	b002      	add	sp, #8
 8006168:	bd80      	pop	{r7, pc}
 800616a:	46c0      	nop			; (mov r8, r8)
 800616c:	2000137c 	.word	0x2000137c
 8006170:	20001368 	.word	0x20001368
 8006174:	2000135c 	.word	0x2000135c
 8006178:	20000e84 	.word	0x20000e84
 800617c:	20000e80 	.word	0x20000e80
 8006180:	20000010 	.word	0x20000010

08006184 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006184:	b580      	push	{r7, lr}
 8006186:	b082      	sub	sp, #8
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
 800618c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d101      	bne.n	8006198 <vTaskPlaceOnEventList+0x14>
 8006194:	b672      	cpsid	i
 8006196:	e7fe      	b.n	8006196 <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006198:	4b08      	ldr	r3, [pc, #32]	; (80061bc <vTaskPlaceOnEventList+0x38>)
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	3318      	adds	r3, #24
 800619e:	001a      	movs	r2, r3
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	0011      	movs	r1, r2
 80061a4:	0018      	movs	r0, r3
 80061a6:	f7fe fd42 	bl	8004c2e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	2101      	movs	r1, #1
 80061ae:	0018      	movs	r0, r3
 80061b0:	f000 fb26 	bl	8006800 <prvAddCurrentTaskToDelayedList>
}
 80061b4:	46c0      	nop			; (mov r8, r8)
 80061b6:	46bd      	mov	sp, r7
 80061b8:	b002      	add	sp, #8
 80061ba:	bd80      	pop	{r7, pc}
 80061bc:	20000e80 	.word	0x20000e80

080061c0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b084      	sub	sp, #16
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	60f8      	str	r0, [r7, #12]
 80061c8:	60b9      	str	r1, [r7, #8]
 80061ca:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d101      	bne.n	80061d6 <vTaskPlaceOnEventListRestricted+0x16>
 80061d2:	b672      	cpsid	i
 80061d4:	e7fe      	b.n	80061d4 <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80061d6:	4b0c      	ldr	r3, [pc, #48]	; (8006208 <vTaskPlaceOnEventListRestricted+0x48>)
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	3318      	adds	r3, #24
 80061dc:	001a      	movs	r2, r3
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	0011      	movs	r1, r2
 80061e2:	0018      	movs	r0, r3
 80061e4:	f7fe fd01 	bl	8004bea <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d002      	beq.n	80061f4 <vTaskPlaceOnEventListRestricted+0x34>
		{
			xTicksToWait = portMAX_DELAY;
 80061ee:	2301      	movs	r3, #1
 80061f0:	425b      	negs	r3, r3
 80061f2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80061f4:	687a      	ldr	r2, [r7, #4]
 80061f6:	68bb      	ldr	r3, [r7, #8]
 80061f8:	0011      	movs	r1, r2
 80061fa:	0018      	movs	r0, r3
 80061fc:	f000 fb00 	bl	8006800 <prvAddCurrentTaskToDelayedList>
	}
 8006200:	46c0      	nop			; (mov r8, r8)
 8006202:	46bd      	mov	sp, r7
 8006204:	b004      	add	sp, #16
 8006206:	bd80      	pop	{r7, pc}
 8006208:	20000e80 	.word	0x20000e80

0800620c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800620c:	b580      	push	{r7, lr}
 800620e:	b084      	sub	sp, #16
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	68db      	ldr	r3, [r3, #12]
 8006218:	68db      	ldr	r3, [r3, #12]
 800621a:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 800621c:	68bb      	ldr	r3, [r7, #8]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d101      	bne.n	8006226 <xTaskRemoveFromEventList+0x1a>
 8006222:	b672      	cpsid	i
 8006224:	e7fe      	b.n	8006224 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006226:	68bb      	ldr	r3, [r7, #8]
 8006228:	3318      	adds	r3, #24
 800622a:	0018      	movs	r0, r3
 800622c:	f7fe fd35 	bl	8004c9a <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006230:	4b1e      	ldr	r3, [pc, #120]	; (80062ac <xTaskRemoveFromEventList+0xa0>)
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d11d      	bne.n	8006274 <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006238:	68bb      	ldr	r3, [r7, #8]
 800623a:	3304      	adds	r3, #4
 800623c:	0018      	movs	r0, r3
 800623e:	f7fe fd2c 	bl	8004c9a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006242:	68bb      	ldr	r3, [r7, #8]
 8006244:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006246:	4b1a      	ldr	r3, [pc, #104]	; (80062b0 <xTaskRemoveFromEventList+0xa4>)
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	429a      	cmp	r2, r3
 800624c:	d903      	bls.n	8006256 <xTaskRemoveFromEventList+0x4a>
 800624e:	68bb      	ldr	r3, [r7, #8]
 8006250:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006252:	4b17      	ldr	r3, [pc, #92]	; (80062b0 <xTaskRemoveFromEventList+0xa4>)
 8006254:	601a      	str	r2, [r3, #0]
 8006256:	68bb      	ldr	r3, [r7, #8]
 8006258:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800625a:	0013      	movs	r3, r2
 800625c:	009b      	lsls	r3, r3, #2
 800625e:	189b      	adds	r3, r3, r2
 8006260:	009b      	lsls	r3, r3, #2
 8006262:	4a14      	ldr	r2, [pc, #80]	; (80062b4 <xTaskRemoveFromEventList+0xa8>)
 8006264:	189a      	adds	r2, r3, r2
 8006266:	68bb      	ldr	r3, [r7, #8]
 8006268:	3304      	adds	r3, #4
 800626a:	0019      	movs	r1, r3
 800626c:	0010      	movs	r0, r2
 800626e:	f7fe fcbc 	bl	8004bea <vListInsertEnd>
 8006272:	e007      	b.n	8006284 <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006274:	68bb      	ldr	r3, [r7, #8]
 8006276:	3318      	adds	r3, #24
 8006278:	001a      	movs	r2, r3
 800627a:	4b0f      	ldr	r3, [pc, #60]	; (80062b8 <xTaskRemoveFromEventList+0xac>)
 800627c:	0011      	movs	r1, r2
 800627e:	0018      	movs	r0, r3
 8006280:	f7fe fcb3 	bl	8004bea <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006284:	68bb      	ldr	r3, [r7, #8]
 8006286:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006288:	4b0c      	ldr	r3, [pc, #48]	; (80062bc <xTaskRemoveFromEventList+0xb0>)
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800628e:	429a      	cmp	r2, r3
 8006290:	d905      	bls.n	800629e <xTaskRemoveFromEventList+0x92>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006292:	2301      	movs	r3, #1
 8006294:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006296:	4b0a      	ldr	r3, [pc, #40]	; (80062c0 <xTaskRemoveFromEventList+0xb4>)
 8006298:	2201      	movs	r2, #1
 800629a:	601a      	str	r2, [r3, #0]
 800629c:	e001      	b.n	80062a2 <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		xReturn = pdFALSE;
 800629e:	2300      	movs	r3, #0
 80062a0:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 80062a2:	68fb      	ldr	r3, [r7, #12]
}
 80062a4:	0018      	movs	r0, r3
 80062a6:	46bd      	mov	sp, r7
 80062a8:	b004      	add	sp, #16
 80062aa:	bd80      	pop	{r7, pc}
 80062ac:	2000137c 	.word	0x2000137c
 80062b0:	2000135c 	.word	0x2000135c
 80062b4:	20000e84 	.word	0x20000e84
 80062b8:	20001314 	.word	0x20001314
 80062bc:	20000e80 	.word	0x20000e80
 80062c0:	20001368 	.word	0x20001368

080062c4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b082      	sub	sp, #8
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80062cc:	4b05      	ldr	r3, [pc, #20]	; (80062e4 <vTaskInternalSetTimeOutState+0x20>)
 80062ce:	681a      	ldr	r2, [r3, #0]
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80062d4:	4b04      	ldr	r3, [pc, #16]	; (80062e8 <vTaskInternalSetTimeOutState+0x24>)
 80062d6:	681a      	ldr	r2, [r3, #0]
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	605a      	str	r2, [r3, #4]
}
 80062dc:	46c0      	nop			; (mov r8, r8)
 80062de:	46bd      	mov	sp, r7
 80062e0:	b002      	add	sp, #8
 80062e2:	bd80      	pop	{r7, pc}
 80062e4:	2000136c 	.word	0x2000136c
 80062e8:	20001358 	.word	0x20001358

080062ec <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b086      	sub	sp, #24
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
 80062f4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d101      	bne.n	8006300 <xTaskCheckForTimeOut+0x14>
 80062fc:	b672      	cpsid	i
 80062fe:	e7fe      	b.n	80062fe <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 8006300:	683b      	ldr	r3, [r7, #0]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d101      	bne.n	800630a <xTaskCheckForTimeOut+0x1e>
 8006306:	b672      	cpsid	i
 8006308:	e7fe      	b.n	8006308 <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
 800630a:	f000 fe79 	bl	8007000 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800630e:	4b1d      	ldr	r3, [pc, #116]	; (8006384 <xTaskCheckForTimeOut+0x98>)
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	685b      	ldr	r3, [r3, #4]
 8006318:	693a      	ldr	r2, [r7, #16]
 800631a:	1ad3      	subs	r3, r2, r3
 800631c:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	3301      	adds	r3, #1
 8006324:	d102      	bne.n	800632c <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006326:	2300      	movs	r3, #0
 8006328:	617b      	str	r3, [r7, #20]
 800632a:	e024      	b.n	8006376 <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681a      	ldr	r2, [r3, #0]
 8006330:	4b15      	ldr	r3, [pc, #84]	; (8006388 <xTaskCheckForTimeOut+0x9c>)
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	429a      	cmp	r2, r3
 8006336:	d007      	beq.n	8006348 <xTaskCheckForTimeOut+0x5c>
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	685b      	ldr	r3, [r3, #4]
 800633c:	693a      	ldr	r2, [r7, #16]
 800633e:	429a      	cmp	r2, r3
 8006340:	d302      	bcc.n	8006348 <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006342:	2301      	movs	r3, #1
 8006344:	617b      	str	r3, [r7, #20]
 8006346:	e016      	b.n	8006376 <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	68fa      	ldr	r2, [r7, #12]
 800634e:	429a      	cmp	r2, r3
 8006350:	d20c      	bcs.n	800636c <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	681a      	ldr	r2, [r3, #0]
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	1ad2      	subs	r2, r2, r3
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	0018      	movs	r0, r3
 8006362:	f7ff ffaf 	bl	80062c4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006366:	2300      	movs	r3, #0
 8006368:	617b      	str	r3, [r7, #20]
 800636a:	e004      	b.n	8006376 <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	2200      	movs	r2, #0
 8006370:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006372:	2301      	movs	r3, #1
 8006374:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 8006376:	f000 fe55 	bl	8007024 <vPortExitCritical>

	return xReturn;
 800637a:	697b      	ldr	r3, [r7, #20]
}
 800637c:	0018      	movs	r0, r3
 800637e:	46bd      	mov	sp, r7
 8006380:	b006      	add	sp, #24
 8006382:	bd80      	pop	{r7, pc}
 8006384:	20001358 	.word	0x20001358
 8006388:	2000136c 	.word	0x2000136c

0800638c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800638c:	b580      	push	{r7, lr}
 800638e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006390:	4b02      	ldr	r3, [pc, #8]	; (800639c <vTaskMissedYield+0x10>)
 8006392:	2201      	movs	r2, #1
 8006394:	601a      	str	r2, [r3, #0]
}
 8006396:	46c0      	nop			; (mov r8, r8)
 8006398:	46bd      	mov	sp, r7
 800639a:	bd80      	pop	{r7, pc}
 800639c:	20001368 	.word	0x20001368

080063a0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b082      	sub	sp, #8
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80063a8:	f000 f84e 	bl	8006448 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80063ac:	4b03      	ldr	r3, [pc, #12]	; (80063bc <prvIdleTask+0x1c>)
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	2b01      	cmp	r3, #1
 80063b2:	d9f9      	bls.n	80063a8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80063b4:	f000 fe14 	bl	8006fe0 <vPortYield>
		prvCheckTasksWaitingTermination();
 80063b8:	e7f6      	b.n	80063a8 <prvIdleTask+0x8>
 80063ba:	46c0      	nop			; (mov r8, r8)
 80063bc:	20000e84 	.word	0x20000e84

080063c0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b082      	sub	sp, #8
 80063c4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80063c6:	2300      	movs	r3, #0
 80063c8:	607b      	str	r3, [r7, #4]
 80063ca:	e00c      	b.n	80063e6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80063cc:	687a      	ldr	r2, [r7, #4]
 80063ce:	0013      	movs	r3, r2
 80063d0:	009b      	lsls	r3, r3, #2
 80063d2:	189b      	adds	r3, r3, r2
 80063d4:	009b      	lsls	r3, r3, #2
 80063d6:	4a14      	ldr	r2, [pc, #80]	; (8006428 <prvInitialiseTaskLists+0x68>)
 80063d8:	189b      	adds	r3, r3, r2
 80063da:	0018      	movs	r0, r3
 80063dc:	f7fe fbdc 	bl	8004b98 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	3301      	adds	r3, #1
 80063e4:	607b      	str	r3, [r7, #4]
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	2b37      	cmp	r3, #55	; 0x37
 80063ea:	d9ef      	bls.n	80063cc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80063ec:	4b0f      	ldr	r3, [pc, #60]	; (800642c <prvInitialiseTaskLists+0x6c>)
 80063ee:	0018      	movs	r0, r3
 80063f0:	f7fe fbd2 	bl	8004b98 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80063f4:	4b0e      	ldr	r3, [pc, #56]	; (8006430 <prvInitialiseTaskLists+0x70>)
 80063f6:	0018      	movs	r0, r3
 80063f8:	f7fe fbce 	bl	8004b98 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80063fc:	4b0d      	ldr	r3, [pc, #52]	; (8006434 <prvInitialiseTaskLists+0x74>)
 80063fe:	0018      	movs	r0, r3
 8006400:	f7fe fbca 	bl	8004b98 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006404:	4b0c      	ldr	r3, [pc, #48]	; (8006438 <prvInitialiseTaskLists+0x78>)
 8006406:	0018      	movs	r0, r3
 8006408:	f7fe fbc6 	bl	8004b98 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800640c:	4b0b      	ldr	r3, [pc, #44]	; (800643c <prvInitialiseTaskLists+0x7c>)
 800640e:	0018      	movs	r0, r3
 8006410:	f7fe fbc2 	bl	8004b98 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006414:	4b0a      	ldr	r3, [pc, #40]	; (8006440 <prvInitialiseTaskLists+0x80>)
 8006416:	4a05      	ldr	r2, [pc, #20]	; (800642c <prvInitialiseTaskLists+0x6c>)
 8006418:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800641a:	4b0a      	ldr	r3, [pc, #40]	; (8006444 <prvInitialiseTaskLists+0x84>)
 800641c:	4a04      	ldr	r2, [pc, #16]	; (8006430 <prvInitialiseTaskLists+0x70>)
 800641e:	601a      	str	r2, [r3, #0]
}
 8006420:	46c0      	nop			; (mov r8, r8)
 8006422:	46bd      	mov	sp, r7
 8006424:	b002      	add	sp, #8
 8006426:	bd80      	pop	{r7, pc}
 8006428:	20000e84 	.word	0x20000e84
 800642c:	200012e4 	.word	0x200012e4
 8006430:	200012f8 	.word	0x200012f8
 8006434:	20001314 	.word	0x20001314
 8006438:	20001328 	.word	0x20001328
 800643c:	20001340 	.word	0x20001340
 8006440:	2000130c 	.word	0x2000130c
 8006444:	20001310 	.word	0x20001310

08006448 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006448:	b580      	push	{r7, lr}
 800644a:	b082      	sub	sp, #8
 800644c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800644e:	e01a      	b.n	8006486 <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 8006450:	f000 fdd6 	bl	8007000 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006454:	4b10      	ldr	r3, [pc, #64]	; (8006498 <prvCheckTasksWaitingTermination+0x50>)
 8006456:	68db      	ldr	r3, [r3, #12]
 8006458:	68db      	ldr	r3, [r3, #12]
 800645a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	3304      	adds	r3, #4
 8006460:	0018      	movs	r0, r3
 8006462:	f7fe fc1a 	bl	8004c9a <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006466:	4b0d      	ldr	r3, [pc, #52]	; (800649c <prvCheckTasksWaitingTermination+0x54>)
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	1e5a      	subs	r2, r3, #1
 800646c:	4b0b      	ldr	r3, [pc, #44]	; (800649c <prvCheckTasksWaitingTermination+0x54>)
 800646e:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006470:	4b0b      	ldr	r3, [pc, #44]	; (80064a0 <prvCheckTasksWaitingTermination+0x58>)
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	1e5a      	subs	r2, r3, #1
 8006476:	4b0a      	ldr	r3, [pc, #40]	; (80064a0 <prvCheckTasksWaitingTermination+0x58>)
 8006478:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 800647a:	f000 fdd3 	bl	8007024 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	0018      	movs	r0, r3
 8006482:	f000 f80f 	bl	80064a4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006486:	4b06      	ldr	r3, [pc, #24]	; (80064a0 <prvCheckTasksWaitingTermination+0x58>)
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d1e0      	bne.n	8006450 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800648e:	46c0      	nop			; (mov r8, r8)
 8006490:	46c0      	nop			; (mov r8, r8)
 8006492:	46bd      	mov	sp, r7
 8006494:	b002      	add	sp, #8
 8006496:	bd80      	pop	{r7, pc}
 8006498:	20001328 	.word	0x20001328
 800649c:	20001354 	.word	0x20001354
 80064a0:	2000133c 	.word	0x2000133c

080064a4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80064a4:	b580      	push	{r7, lr}
 80064a6:	b082      	sub	sp, #8
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	3354      	adds	r3, #84	; 0x54
 80064b0:	0018      	movs	r0, r3
 80064b2:	f001 f833 	bl	800751c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	22b9      	movs	r2, #185	; 0xb9
 80064ba:	5c9b      	ldrb	r3, [r3, r2]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d109      	bne.n	80064d4 <prvDeleteTCB+0x30>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064c4:	0018      	movs	r0, r3
 80064c6:	f000 fedf 	bl	8007288 <vPortFree>
				vPortFree( pxTCB );
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	0018      	movs	r0, r3
 80064ce:	f000 fedb 	bl	8007288 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80064d2:	e010      	b.n	80064f6 <prvDeleteTCB+0x52>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	22b9      	movs	r2, #185	; 0xb9
 80064d8:	5c9b      	ldrb	r3, [r3, r2]
 80064da:	2b01      	cmp	r3, #1
 80064dc:	d104      	bne.n	80064e8 <prvDeleteTCB+0x44>
				vPortFree( pxTCB );
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	0018      	movs	r0, r3
 80064e2:	f000 fed1 	bl	8007288 <vPortFree>
	}
 80064e6:	e006      	b.n	80064f6 <prvDeleteTCB+0x52>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	22b9      	movs	r2, #185	; 0xb9
 80064ec:	5c9b      	ldrb	r3, [r3, r2]
 80064ee:	2b02      	cmp	r3, #2
 80064f0:	d001      	beq.n	80064f6 <prvDeleteTCB+0x52>
 80064f2:	b672      	cpsid	i
 80064f4:	e7fe      	b.n	80064f4 <prvDeleteTCB+0x50>
	}
 80064f6:	46c0      	nop			; (mov r8, r8)
 80064f8:	46bd      	mov	sp, r7
 80064fa:	b002      	add	sp, #8
 80064fc:	bd80      	pop	{r7, pc}
	...

08006500 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006500:	b580      	push	{r7, lr}
 8006502:	b082      	sub	sp, #8
 8006504:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006506:	4b0b      	ldr	r3, [pc, #44]	; (8006534 <prvResetNextTaskUnblockTime+0x34>)
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d104      	bne.n	800651a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006510:	4b09      	ldr	r3, [pc, #36]	; (8006538 <prvResetNextTaskUnblockTime+0x38>)
 8006512:	2201      	movs	r2, #1
 8006514:	4252      	negs	r2, r2
 8006516:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006518:	e008      	b.n	800652c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800651a:	4b06      	ldr	r3, [pc, #24]	; (8006534 <prvResetNextTaskUnblockTime+0x34>)
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	68db      	ldr	r3, [r3, #12]
 8006520:	68db      	ldr	r3, [r3, #12]
 8006522:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	685a      	ldr	r2, [r3, #4]
 8006528:	4b03      	ldr	r3, [pc, #12]	; (8006538 <prvResetNextTaskUnblockTime+0x38>)
 800652a:	601a      	str	r2, [r3, #0]
}
 800652c:	46c0      	nop			; (mov r8, r8)
 800652e:	46bd      	mov	sp, r7
 8006530:	b002      	add	sp, #8
 8006532:	bd80      	pop	{r7, pc}
 8006534:	2000130c 	.word	0x2000130c
 8006538:	20001374 	.word	0x20001374

0800653c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800653c:	b580      	push	{r7, lr}
 800653e:	b082      	sub	sp, #8
 8006540:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006542:	4b0a      	ldr	r3, [pc, #40]	; (800656c <xTaskGetSchedulerState+0x30>)
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	2b00      	cmp	r3, #0
 8006548:	d102      	bne.n	8006550 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800654a:	2301      	movs	r3, #1
 800654c:	607b      	str	r3, [r7, #4]
 800654e:	e008      	b.n	8006562 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006550:	4b07      	ldr	r3, [pc, #28]	; (8006570 <xTaskGetSchedulerState+0x34>)
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	2b00      	cmp	r3, #0
 8006556:	d102      	bne.n	800655e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006558:	2302      	movs	r3, #2
 800655a:	607b      	str	r3, [r7, #4]
 800655c:	e001      	b.n	8006562 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800655e:	2300      	movs	r3, #0
 8006560:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006562:	687b      	ldr	r3, [r7, #4]
	}
 8006564:	0018      	movs	r0, r3
 8006566:	46bd      	mov	sp, r7
 8006568:	b002      	add	sp, #8
 800656a:	bd80      	pop	{r7, pc}
 800656c:	20001360 	.word	0x20001360
 8006570:	2000137c 	.word	0x2000137c

08006574 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8006574:	b580      	push	{r7, lr}
 8006576:	b084      	sub	sp, #16
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8006580:	2300      	movs	r3, #0
 8006582:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d051      	beq.n	800662e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800658a:	68bb      	ldr	r3, [r7, #8]
 800658c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800658e:	4b2a      	ldr	r3, [pc, #168]	; (8006638 <xTaskPriorityInherit+0xc4>)
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006594:	429a      	cmp	r2, r3
 8006596:	d241      	bcs.n	800661c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006598:	68bb      	ldr	r3, [r7, #8]
 800659a:	699b      	ldr	r3, [r3, #24]
 800659c:	2b00      	cmp	r3, #0
 800659e:	db06      	blt.n	80065ae <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80065a0:	4b25      	ldr	r3, [pc, #148]	; (8006638 <xTaskPriorityInherit+0xc4>)
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065a6:	2238      	movs	r2, #56	; 0x38
 80065a8:	1ad2      	subs	r2, r2, r3
 80065aa:	68bb      	ldr	r3, [r7, #8]
 80065ac:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80065ae:	68bb      	ldr	r3, [r7, #8]
 80065b0:	6959      	ldr	r1, [r3, #20]
 80065b2:	68bb      	ldr	r3, [r7, #8]
 80065b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065b6:	0013      	movs	r3, r2
 80065b8:	009b      	lsls	r3, r3, #2
 80065ba:	189b      	adds	r3, r3, r2
 80065bc:	009b      	lsls	r3, r3, #2
 80065be:	4a1f      	ldr	r2, [pc, #124]	; (800663c <xTaskPriorityInherit+0xc8>)
 80065c0:	189b      	adds	r3, r3, r2
 80065c2:	4299      	cmp	r1, r3
 80065c4:	d122      	bne.n	800660c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80065c6:	68bb      	ldr	r3, [r7, #8]
 80065c8:	3304      	adds	r3, #4
 80065ca:	0018      	movs	r0, r3
 80065cc:	f7fe fb65 	bl	8004c9a <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80065d0:	4b19      	ldr	r3, [pc, #100]	; (8006638 <xTaskPriorityInherit+0xc4>)
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065d6:	68bb      	ldr	r3, [r7, #8]
 80065d8:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80065da:	68bb      	ldr	r3, [r7, #8]
 80065dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065de:	4b18      	ldr	r3, [pc, #96]	; (8006640 <xTaskPriorityInherit+0xcc>)
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	429a      	cmp	r2, r3
 80065e4:	d903      	bls.n	80065ee <xTaskPriorityInherit+0x7a>
 80065e6:	68bb      	ldr	r3, [r7, #8]
 80065e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065ea:	4b15      	ldr	r3, [pc, #84]	; (8006640 <xTaskPriorityInherit+0xcc>)
 80065ec:	601a      	str	r2, [r3, #0]
 80065ee:	68bb      	ldr	r3, [r7, #8]
 80065f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065f2:	0013      	movs	r3, r2
 80065f4:	009b      	lsls	r3, r3, #2
 80065f6:	189b      	adds	r3, r3, r2
 80065f8:	009b      	lsls	r3, r3, #2
 80065fa:	4a10      	ldr	r2, [pc, #64]	; (800663c <xTaskPriorityInherit+0xc8>)
 80065fc:	189a      	adds	r2, r3, r2
 80065fe:	68bb      	ldr	r3, [r7, #8]
 8006600:	3304      	adds	r3, #4
 8006602:	0019      	movs	r1, r3
 8006604:	0010      	movs	r0, r2
 8006606:	f7fe faf0 	bl	8004bea <vListInsertEnd>
 800660a:	e004      	b.n	8006616 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800660c:	4b0a      	ldr	r3, [pc, #40]	; (8006638 <xTaskPriorityInherit+0xc4>)
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006612:	68bb      	ldr	r3, [r7, #8]
 8006614:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8006616:	2301      	movs	r3, #1
 8006618:	60fb      	str	r3, [r7, #12]
 800661a:	e008      	b.n	800662e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800661c:	68bb      	ldr	r3, [r7, #8]
 800661e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006620:	4b05      	ldr	r3, [pc, #20]	; (8006638 <xTaskPriorityInherit+0xc4>)
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006626:	429a      	cmp	r2, r3
 8006628:	d201      	bcs.n	800662e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800662a:	2301      	movs	r3, #1
 800662c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800662e:	68fb      	ldr	r3, [r7, #12]
	}
 8006630:	0018      	movs	r0, r3
 8006632:	46bd      	mov	sp, r7
 8006634:	b004      	add	sp, #16
 8006636:	bd80      	pop	{r7, pc}
 8006638:	20000e80 	.word	0x20000e80
 800663c:	20000e84 	.word	0x20000e84
 8006640:	2000135c 	.word	0x2000135c

08006644 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006644:	b580      	push	{r7, lr}
 8006646:	b084      	sub	sp, #16
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8006650:	2300      	movs	r3, #0
 8006652:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d044      	beq.n	80066e4 <xTaskPriorityDisinherit+0xa0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800665a:	4b25      	ldr	r3, [pc, #148]	; (80066f0 <xTaskPriorityDisinherit+0xac>)
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	68ba      	ldr	r2, [r7, #8]
 8006660:	429a      	cmp	r2, r3
 8006662:	d001      	beq.n	8006668 <xTaskPriorityDisinherit+0x24>
 8006664:	b672      	cpsid	i
 8006666:	e7fe      	b.n	8006666 <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 8006668:	68bb      	ldr	r3, [r7, #8]
 800666a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800666c:	2b00      	cmp	r3, #0
 800666e:	d101      	bne.n	8006674 <xTaskPriorityDisinherit+0x30>
 8006670:	b672      	cpsid	i
 8006672:	e7fe      	b.n	8006672 <xTaskPriorityDisinherit+0x2e>
			( pxTCB->uxMutexesHeld )--;
 8006674:	68bb      	ldr	r3, [r7, #8]
 8006676:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006678:	1e5a      	subs	r2, r3, #1
 800667a:	68bb      	ldr	r3, [r7, #8]
 800667c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800667e:	68bb      	ldr	r3, [r7, #8]
 8006680:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006682:	68bb      	ldr	r3, [r7, #8]
 8006684:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006686:	429a      	cmp	r2, r3
 8006688:	d02c      	beq.n	80066e4 <xTaskPriorityDisinherit+0xa0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800668a:	68bb      	ldr	r3, [r7, #8]
 800668c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800668e:	2b00      	cmp	r3, #0
 8006690:	d128      	bne.n	80066e4 <xTaskPriorityDisinherit+0xa0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006692:	68bb      	ldr	r3, [r7, #8]
 8006694:	3304      	adds	r3, #4
 8006696:	0018      	movs	r0, r3
 8006698:	f7fe faff 	bl	8004c9a <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800669c:	68bb      	ldr	r3, [r7, #8]
 800669e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80066a0:	68bb      	ldr	r3, [r7, #8]
 80066a2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80066a4:	68bb      	ldr	r3, [r7, #8]
 80066a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066a8:	2238      	movs	r2, #56	; 0x38
 80066aa:	1ad2      	subs	r2, r2, r3
 80066ac:	68bb      	ldr	r3, [r7, #8]
 80066ae:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80066b0:	68bb      	ldr	r3, [r7, #8]
 80066b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066b4:	4b0f      	ldr	r3, [pc, #60]	; (80066f4 <xTaskPriorityDisinherit+0xb0>)
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	429a      	cmp	r2, r3
 80066ba:	d903      	bls.n	80066c4 <xTaskPriorityDisinherit+0x80>
 80066bc:	68bb      	ldr	r3, [r7, #8]
 80066be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066c0:	4b0c      	ldr	r3, [pc, #48]	; (80066f4 <xTaskPriorityDisinherit+0xb0>)
 80066c2:	601a      	str	r2, [r3, #0]
 80066c4:	68bb      	ldr	r3, [r7, #8]
 80066c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066c8:	0013      	movs	r3, r2
 80066ca:	009b      	lsls	r3, r3, #2
 80066cc:	189b      	adds	r3, r3, r2
 80066ce:	009b      	lsls	r3, r3, #2
 80066d0:	4a09      	ldr	r2, [pc, #36]	; (80066f8 <xTaskPriorityDisinherit+0xb4>)
 80066d2:	189a      	adds	r2, r3, r2
 80066d4:	68bb      	ldr	r3, [r7, #8]
 80066d6:	3304      	adds	r3, #4
 80066d8:	0019      	movs	r1, r3
 80066da:	0010      	movs	r0, r2
 80066dc:	f7fe fa85 	bl	8004bea <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80066e0:	2301      	movs	r3, #1
 80066e2:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80066e4:	68fb      	ldr	r3, [r7, #12]
	}
 80066e6:	0018      	movs	r0, r3
 80066e8:	46bd      	mov	sp, r7
 80066ea:	b004      	add	sp, #16
 80066ec:	bd80      	pop	{r7, pc}
 80066ee:	46c0      	nop			; (mov r8, r8)
 80066f0:	20000e80 	.word	0x20000e80
 80066f4:	2000135c 	.word	0x2000135c
 80066f8:	20000e84 	.word	0x20000e84

080066fc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80066fc:	b580      	push	{r7, lr}
 80066fe:	b086      	sub	sp, #24
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
 8006704:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	613b      	str	r3, [r7, #16]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800670a:	2301      	movs	r3, #1
 800670c:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d058      	beq.n	80067c6 <vTaskPriorityDisinheritAfterTimeout+0xca>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8006714:	693b      	ldr	r3, [r7, #16]
 8006716:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006718:	2b00      	cmp	r3, #0
 800671a:	d101      	bne.n	8006720 <vTaskPriorityDisinheritAfterTimeout+0x24>
 800671c:	b672      	cpsid	i
 800671e:	e7fe      	b.n	800671e <vTaskPriorityDisinheritAfterTimeout+0x22>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8006720:	693b      	ldr	r3, [r7, #16]
 8006722:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006724:	683a      	ldr	r2, [r7, #0]
 8006726:	429a      	cmp	r2, r3
 8006728:	d902      	bls.n	8006730 <vTaskPriorityDisinheritAfterTimeout+0x34>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	617b      	str	r3, [r7, #20]
 800672e:	e002      	b.n	8006736 <vTaskPriorityDisinheritAfterTimeout+0x3a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8006730:	693b      	ldr	r3, [r7, #16]
 8006732:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006734:	617b      	str	r3, [r7, #20]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8006736:	693b      	ldr	r3, [r7, #16]
 8006738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800673a:	697a      	ldr	r2, [r7, #20]
 800673c:	429a      	cmp	r2, r3
 800673e:	d042      	beq.n	80067c6 <vTaskPriorityDisinheritAfterTimeout+0xca>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8006740:	693b      	ldr	r3, [r7, #16]
 8006742:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006744:	68fa      	ldr	r2, [r7, #12]
 8006746:	429a      	cmp	r2, r3
 8006748:	d13d      	bne.n	80067c6 <vTaskPriorityDisinheritAfterTimeout+0xca>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800674a:	4b21      	ldr	r3, [pc, #132]	; (80067d0 <vTaskPriorityDisinheritAfterTimeout+0xd4>)
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	693a      	ldr	r2, [r7, #16]
 8006750:	429a      	cmp	r2, r3
 8006752:	d101      	bne.n	8006758 <vTaskPriorityDisinheritAfterTimeout+0x5c>
 8006754:	b672      	cpsid	i
 8006756:	e7fe      	b.n	8006756 <vTaskPriorityDisinheritAfterTimeout+0x5a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8006758:	693b      	ldr	r3, [r7, #16]
 800675a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800675c:	60bb      	str	r3, [r7, #8]
					pxTCB->uxPriority = uxPriorityToUse;
 800675e:	693b      	ldr	r3, [r7, #16]
 8006760:	697a      	ldr	r2, [r7, #20]
 8006762:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006764:	693b      	ldr	r3, [r7, #16]
 8006766:	699b      	ldr	r3, [r3, #24]
 8006768:	2b00      	cmp	r3, #0
 800676a:	db04      	blt.n	8006776 <vTaskPriorityDisinheritAfterTimeout+0x7a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800676c:	697b      	ldr	r3, [r7, #20]
 800676e:	2238      	movs	r2, #56	; 0x38
 8006770:	1ad2      	subs	r2, r2, r3
 8006772:	693b      	ldr	r3, [r7, #16]
 8006774:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006776:	693b      	ldr	r3, [r7, #16]
 8006778:	6959      	ldr	r1, [r3, #20]
 800677a:	68ba      	ldr	r2, [r7, #8]
 800677c:	0013      	movs	r3, r2
 800677e:	009b      	lsls	r3, r3, #2
 8006780:	189b      	adds	r3, r3, r2
 8006782:	009b      	lsls	r3, r3, #2
 8006784:	4a13      	ldr	r2, [pc, #76]	; (80067d4 <vTaskPriorityDisinheritAfterTimeout+0xd8>)
 8006786:	189b      	adds	r3, r3, r2
 8006788:	4299      	cmp	r1, r3
 800678a:	d11c      	bne.n	80067c6 <vTaskPriorityDisinheritAfterTimeout+0xca>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800678c:	693b      	ldr	r3, [r7, #16]
 800678e:	3304      	adds	r3, #4
 8006790:	0018      	movs	r0, r3
 8006792:	f7fe fa82 	bl	8004c9a <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8006796:	693b      	ldr	r3, [r7, #16]
 8006798:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800679a:	4b0f      	ldr	r3, [pc, #60]	; (80067d8 <vTaskPriorityDisinheritAfterTimeout+0xdc>)
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	429a      	cmp	r2, r3
 80067a0:	d903      	bls.n	80067aa <vTaskPriorityDisinheritAfterTimeout+0xae>
 80067a2:	693b      	ldr	r3, [r7, #16]
 80067a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067a6:	4b0c      	ldr	r3, [pc, #48]	; (80067d8 <vTaskPriorityDisinheritAfterTimeout+0xdc>)
 80067a8:	601a      	str	r2, [r3, #0]
 80067aa:	693b      	ldr	r3, [r7, #16]
 80067ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067ae:	0013      	movs	r3, r2
 80067b0:	009b      	lsls	r3, r3, #2
 80067b2:	189b      	adds	r3, r3, r2
 80067b4:	009b      	lsls	r3, r3, #2
 80067b6:	4a07      	ldr	r2, [pc, #28]	; (80067d4 <vTaskPriorityDisinheritAfterTimeout+0xd8>)
 80067b8:	189a      	adds	r2, r3, r2
 80067ba:	693b      	ldr	r3, [r7, #16]
 80067bc:	3304      	adds	r3, #4
 80067be:	0019      	movs	r1, r3
 80067c0:	0010      	movs	r0, r2
 80067c2:	f7fe fa12 	bl	8004bea <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80067c6:	46c0      	nop			; (mov r8, r8)
 80067c8:	46bd      	mov	sp, r7
 80067ca:	b006      	add	sp, #24
 80067cc:	bd80      	pop	{r7, pc}
 80067ce:	46c0      	nop			; (mov r8, r8)
 80067d0:	20000e80 	.word	0x20000e80
 80067d4:	20000e84 	.word	0x20000e84
 80067d8:	2000135c 	.word	0x2000135c

080067dc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80067dc:	b580      	push	{r7, lr}
 80067de:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80067e0:	4b06      	ldr	r3, [pc, #24]	; (80067fc <pvTaskIncrementMutexHeldCount+0x20>)
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d004      	beq.n	80067f2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80067e8:	4b04      	ldr	r3, [pc, #16]	; (80067fc <pvTaskIncrementMutexHeldCount+0x20>)
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80067ee:	3201      	adds	r2, #1
 80067f0:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 80067f2:	4b02      	ldr	r3, [pc, #8]	; (80067fc <pvTaskIncrementMutexHeldCount+0x20>)
 80067f4:	681b      	ldr	r3, [r3, #0]
	}
 80067f6:	0018      	movs	r0, r3
 80067f8:	46bd      	mov	sp, r7
 80067fa:	bd80      	pop	{r7, pc}
 80067fc:	20000e80 	.word	0x20000e80

08006800 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006800:	b580      	push	{r7, lr}
 8006802:	b084      	sub	sp, #16
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
 8006808:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800680a:	4b21      	ldr	r3, [pc, #132]	; (8006890 <prvAddCurrentTaskToDelayedList+0x90>)
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006810:	4b20      	ldr	r3, [pc, #128]	; (8006894 <prvAddCurrentTaskToDelayedList+0x94>)
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	3304      	adds	r3, #4
 8006816:	0018      	movs	r0, r3
 8006818:	f7fe fa3f 	bl	8004c9a <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	3301      	adds	r3, #1
 8006820:	d10b      	bne.n	800683a <prvAddCurrentTaskToDelayedList+0x3a>
 8006822:	683b      	ldr	r3, [r7, #0]
 8006824:	2b00      	cmp	r3, #0
 8006826:	d008      	beq.n	800683a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006828:	4b1a      	ldr	r3, [pc, #104]	; (8006894 <prvAddCurrentTaskToDelayedList+0x94>)
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	1d1a      	adds	r2, r3, #4
 800682e:	4b1a      	ldr	r3, [pc, #104]	; (8006898 <prvAddCurrentTaskToDelayedList+0x98>)
 8006830:	0011      	movs	r1, r2
 8006832:	0018      	movs	r0, r3
 8006834:	f7fe f9d9 	bl	8004bea <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006838:	e026      	b.n	8006888 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800683a:	68fa      	ldr	r2, [r7, #12]
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	18d3      	adds	r3, r2, r3
 8006840:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006842:	4b14      	ldr	r3, [pc, #80]	; (8006894 <prvAddCurrentTaskToDelayedList+0x94>)
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	68ba      	ldr	r2, [r7, #8]
 8006848:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800684a:	68ba      	ldr	r2, [r7, #8]
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	429a      	cmp	r2, r3
 8006850:	d209      	bcs.n	8006866 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006852:	4b12      	ldr	r3, [pc, #72]	; (800689c <prvAddCurrentTaskToDelayedList+0x9c>)
 8006854:	681a      	ldr	r2, [r3, #0]
 8006856:	4b0f      	ldr	r3, [pc, #60]	; (8006894 <prvAddCurrentTaskToDelayedList+0x94>)
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	3304      	adds	r3, #4
 800685c:	0019      	movs	r1, r3
 800685e:	0010      	movs	r0, r2
 8006860:	f7fe f9e5 	bl	8004c2e <vListInsert>
}
 8006864:	e010      	b.n	8006888 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006866:	4b0e      	ldr	r3, [pc, #56]	; (80068a0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006868:	681a      	ldr	r2, [r3, #0]
 800686a:	4b0a      	ldr	r3, [pc, #40]	; (8006894 <prvAddCurrentTaskToDelayedList+0x94>)
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	3304      	adds	r3, #4
 8006870:	0019      	movs	r1, r3
 8006872:	0010      	movs	r0, r2
 8006874:	f7fe f9db 	bl	8004c2e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006878:	4b0a      	ldr	r3, [pc, #40]	; (80068a4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	68ba      	ldr	r2, [r7, #8]
 800687e:	429a      	cmp	r2, r3
 8006880:	d202      	bcs.n	8006888 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006882:	4b08      	ldr	r3, [pc, #32]	; (80068a4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006884:	68ba      	ldr	r2, [r7, #8]
 8006886:	601a      	str	r2, [r3, #0]
}
 8006888:	46c0      	nop			; (mov r8, r8)
 800688a:	46bd      	mov	sp, r7
 800688c:	b004      	add	sp, #16
 800688e:	bd80      	pop	{r7, pc}
 8006890:	20001358 	.word	0x20001358
 8006894:	20000e80 	.word	0x20000e80
 8006898:	20001340 	.word	0x20001340
 800689c:	20001310 	.word	0x20001310
 80068a0:	2000130c 	.word	0x2000130c
 80068a4:	20001374 	.word	0x20001374

080068a8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80068a8:	b590      	push	{r4, r7, lr}
 80068aa:	b089      	sub	sp, #36	; 0x24
 80068ac:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80068ae:	2300      	movs	r3, #0
 80068b0:	60fb      	str	r3, [r7, #12]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80068b2:	f000 fac9 	bl	8006e48 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80068b6:	4b17      	ldr	r3, [pc, #92]	; (8006914 <xTimerCreateTimerTask+0x6c>)
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d020      	beq.n	8006900 <xTimerCreateTimerTask+0x58>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80068be:	2300      	movs	r3, #0
 80068c0:	60bb      	str	r3, [r7, #8]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80068c2:	2300      	movs	r3, #0
 80068c4:	607b      	str	r3, [r7, #4]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80068c6:	003a      	movs	r2, r7
 80068c8:	1d39      	adds	r1, r7, #4
 80068ca:	2308      	movs	r3, #8
 80068cc:	18fb      	adds	r3, r7, r3
 80068ce:	0018      	movs	r0, r3
 80068d0:	f7fe f94a 	bl	8004b68 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80068d4:	683c      	ldr	r4, [r7, #0]
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	68ba      	ldr	r2, [r7, #8]
 80068da:	490f      	ldr	r1, [pc, #60]	; (8006918 <xTimerCreateTimerTask+0x70>)
 80068dc:	480f      	ldr	r0, [pc, #60]	; (800691c <xTimerCreateTimerTask+0x74>)
 80068de:	9202      	str	r2, [sp, #8]
 80068e0:	9301      	str	r3, [sp, #4]
 80068e2:	2302      	movs	r3, #2
 80068e4:	9300      	str	r3, [sp, #0]
 80068e6:	2300      	movs	r3, #0
 80068e8:	0022      	movs	r2, r4
 80068ea:	f7ff f8a4 	bl	8005a36 <xTaskCreateStatic>
 80068ee:	0002      	movs	r2, r0
 80068f0:	4b0b      	ldr	r3, [pc, #44]	; (8006920 <xTimerCreateTimerTask+0x78>)
 80068f2:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80068f4:	4b0a      	ldr	r3, [pc, #40]	; (8006920 <xTimerCreateTimerTask+0x78>)
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d001      	beq.n	8006900 <xTimerCreateTimerTask+0x58>
			{
				xReturn = pdPASS;
 80068fc:	2301      	movs	r3, #1
 80068fe:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d101      	bne.n	800690a <xTimerCreateTimerTask+0x62>
 8006906:	b672      	cpsid	i
 8006908:	e7fe      	b.n	8006908 <xTimerCreateTimerTask+0x60>
	return xReturn;
 800690a:	68fb      	ldr	r3, [r7, #12]
}
 800690c:	0018      	movs	r0, r3
 800690e:	46bd      	mov	sp, r7
 8006910:	b005      	add	sp, #20
 8006912:	bd90      	pop	{r4, r7, pc}
 8006914:	200013b0 	.word	0x200013b0
 8006918:	080076e4 	.word	0x080076e4
 800691c:	08006a41 	.word	0x08006a41
 8006920:	200013b4 	.word	0x200013b4

08006924 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006924:	b590      	push	{r4, r7, lr}
 8006926:	b08b      	sub	sp, #44	; 0x2c
 8006928:	af00      	add	r7, sp, #0
 800692a:	60f8      	str	r0, [r7, #12]
 800692c:	60b9      	str	r1, [r7, #8]
 800692e:	607a      	str	r2, [r7, #4]
 8006930:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006932:	2300      	movs	r3, #0
 8006934:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	2b00      	cmp	r3, #0
 800693a:	d101      	bne.n	8006940 <xTimerGenericCommand+0x1c>
 800693c:	b672      	cpsid	i
 800693e:	e7fe      	b.n	800693e <xTimerGenericCommand+0x1a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006940:	4b1c      	ldr	r3, [pc, #112]	; (80069b4 <xTimerGenericCommand+0x90>)
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d030      	beq.n	80069aa <xTimerGenericCommand+0x86>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006948:	2414      	movs	r4, #20
 800694a:	193b      	adds	r3, r7, r4
 800694c:	68ba      	ldr	r2, [r7, #8]
 800694e:	601a      	str	r2, [r3, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006950:	193b      	adds	r3, r7, r4
 8006952:	687a      	ldr	r2, [r7, #4]
 8006954:	605a      	str	r2, [r3, #4]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006956:	193b      	adds	r3, r7, r4
 8006958:	68fa      	ldr	r2, [r7, #12]
 800695a:	609a      	str	r2, [r3, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800695c:	68bb      	ldr	r3, [r7, #8]
 800695e:	2b05      	cmp	r3, #5
 8006960:	dc19      	bgt.n	8006996 <xTimerGenericCommand+0x72>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006962:	f7ff fdeb 	bl	800653c <xTaskGetSchedulerState>
 8006966:	0003      	movs	r3, r0
 8006968:	2b02      	cmp	r3, #2
 800696a:	d109      	bne.n	8006980 <xTimerGenericCommand+0x5c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800696c:	4b11      	ldr	r3, [pc, #68]	; (80069b4 <xTimerGenericCommand+0x90>)
 800696e:	6818      	ldr	r0, [r3, #0]
 8006970:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006972:	1939      	adds	r1, r7, r4
 8006974:	2300      	movs	r3, #0
 8006976:	f7fe fafa 	bl	8004f6e <xQueueGenericSend>
 800697a:	0003      	movs	r3, r0
 800697c:	627b      	str	r3, [r7, #36]	; 0x24
 800697e:	e014      	b.n	80069aa <xTimerGenericCommand+0x86>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006980:	4b0c      	ldr	r3, [pc, #48]	; (80069b4 <xTimerGenericCommand+0x90>)
 8006982:	6818      	ldr	r0, [r3, #0]
 8006984:	2314      	movs	r3, #20
 8006986:	18f9      	adds	r1, r7, r3
 8006988:	2300      	movs	r3, #0
 800698a:	2200      	movs	r2, #0
 800698c:	f7fe faef 	bl	8004f6e <xQueueGenericSend>
 8006990:	0003      	movs	r3, r0
 8006992:	627b      	str	r3, [r7, #36]	; 0x24
 8006994:	e009      	b.n	80069aa <xTimerGenericCommand+0x86>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006996:	4b07      	ldr	r3, [pc, #28]	; (80069b4 <xTimerGenericCommand+0x90>)
 8006998:	6818      	ldr	r0, [r3, #0]
 800699a:	683a      	ldr	r2, [r7, #0]
 800699c:	2314      	movs	r3, #20
 800699e:	18f9      	adds	r1, r7, r3
 80069a0:	2300      	movs	r3, #0
 80069a2:	f7fe fba8 	bl	80050f6 <xQueueGenericSendFromISR>
 80069a6:	0003      	movs	r3, r0
 80069a8:	627b      	str	r3, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80069aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80069ac:	0018      	movs	r0, r3
 80069ae:	46bd      	mov	sp, r7
 80069b0:	b00b      	add	sp, #44	; 0x2c
 80069b2:	bd90      	pop	{r4, r7, pc}
 80069b4:	200013b0 	.word	0x200013b0

080069b8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b086      	sub	sp, #24
 80069bc:	af02      	add	r7, sp, #8
 80069be:	6078      	str	r0, [r7, #4]
 80069c0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80069c2:	4b1e      	ldr	r3, [pc, #120]	; (8006a3c <prvProcessExpiredTimer+0x84>)
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	68db      	ldr	r3, [r3, #12]
 80069c8:	68db      	ldr	r3, [r3, #12]
 80069ca:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	3304      	adds	r3, #4
 80069d0:	0018      	movs	r0, r3
 80069d2:	f7fe f962 	bl	8004c9a <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	2228      	movs	r2, #40	; 0x28
 80069da:	5c9b      	ldrb	r3, [r3, r2]
 80069dc:	001a      	movs	r2, r3
 80069de:	2304      	movs	r3, #4
 80069e0:	4013      	ands	r3, r2
 80069e2:	d019      	beq.n	8006a18 <prvProcessExpiredTimer+0x60>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	699a      	ldr	r2, [r3, #24]
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	18d1      	adds	r1, r2, r3
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	683a      	ldr	r2, [r7, #0]
 80069f0:	68f8      	ldr	r0, [r7, #12]
 80069f2:	f000 f8c3 	bl	8006b7c <prvInsertTimerInActiveList>
 80069f6:	1e03      	subs	r3, r0, #0
 80069f8:	d017      	beq.n	8006a2a <prvProcessExpiredTimer+0x72>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80069fa:	687a      	ldr	r2, [r7, #4]
 80069fc:	68f8      	ldr	r0, [r7, #12]
 80069fe:	2300      	movs	r3, #0
 8006a00:	9300      	str	r3, [sp, #0]
 8006a02:	2300      	movs	r3, #0
 8006a04:	2100      	movs	r1, #0
 8006a06:	f7ff ff8d 	bl	8006924 <xTimerGenericCommand>
 8006a0a:	0003      	movs	r3, r0
 8006a0c:	60bb      	str	r3, [r7, #8]
			configASSERT( xResult );
 8006a0e:	68bb      	ldr	r3, [r7, #8]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d10a      	bne.n	8006a2a <prvProcessExpiredTimer+0x72>
 8006a14:	b672      	cpsid	i
 8006a16:	e7fe      	b.n	8006a16 <prvProcessExpiredTimer+0x5e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	2228      	movs	r2, #40	; 0x28
 8006a1c:	5c9b      	ldrb	r3, [r3, r2]
 8006a1e:	2201      	movs	r2, #1
 8006a20:	4393      	bics	r3, r2
 8006a22:	b2d9      	uxtb	r1, r3
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	2228      	movs	r2, #40	; 0x28
 8006a28:	5499      	strb	r1, [r3, r2]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	6a1b      	ldr	r3, [r3, #32]
 8006a2e:	68fa      	ldr	r2, [r7, #12]
 8006a30:	0010      	movs	r0, r2
 8006a32:	4798      	blx	r3
}
 8006a34:	46c0      	nop			; (mov r8, r8)
 8006a36:	46bd      	mov	sp, r7
 8006a38:	b004      	add	sp, #16
 8006a3a:	bd80      	pop	{r7, pc}
 8006a3c:	200013a8 	.word	0x200013a8

08006a40 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006a40:	b580      	push	{r7, lr}
 8006a42:	b084      	sub	sp, #16
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006a48:	2308      	movs	r3, #8
 8006a4a:	18fb      	adds	r3, r7, r3
 8006a4c:	0018      	movs	r0, r3
 8006a4e:	f000 f853 	bl	8006af8 <prvGetNextExpireTime>
 8006a52:	0003      	movs	r3, r0
 8006a54:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006a56:	68ba      	ldr	r2, [r7, #8]
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	0011      	movs	r1, r2
 8006a5c:	0018      	movs	r0, r3
 8006a5e:	f000 f803 	bl	8006a68 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006a62:	f000 f8cd 	bl	8006c00 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006a66:	e7ef      	b.n	8006a48 <prvTimerTask+0x8>

08006a68 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b084      	sub	sp, #16
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
 8006a70:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006a72:	f7ff f9d7 	bl	8005e24 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006a76:	2308      	movs	r3, #8
 8006a78:	18fb      	adds	r3, r7, r3
 8006a7a:	0018      	movs	r0, r3
 8006a7c:	f000 f85e 	bl	8006b3c <prvSampleTimeNow>
 8006a80:	0003      	movs	r3, r0
 8006a82:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006a84:	68bb      	ldr	r3, [r7, #8]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d12b      	bne.n	8006ae2 <prvProcessTimerOrBlockTask+0x7a>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006a8a:	683b      	ldr	r3, [r7, #0]
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d10c      	bne.n	8006aaa <prvProcessTimerOrBlockTask+0x42>
 8006a90:	687a      	ldr	r2, [r7, #4]
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	429a      	cmp	r2, r3
 8006a96:	d808      	bhi.n	8006aaa <prvProcessTimerOrBlockTask+0x42>
			{
				( void ) xTaskResumeAll();
 8006a98:	f7ff f9d0 	bl	8005e3c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006a9c:	68fa      	ldr	r2, [r7, #12]
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	0011      	movs	r1, r2
 8006aa2:	0018      	movs	r0, r3
 8006aa4:	f7ff ff88 	bl	80069b8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006aa8:	e01d      	b.n	8006ae6 <prvProcessTimerOrBlockTask+0x7e>
				if( xListWasEmpty != pdFALSE )
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d008      	beq.n	8006ac2 <prvProcessTimerOrBlockTask+0x5a>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006ab0:	4b0f      	ldr	r3, [pc, #60]	; (8006af0 <prvProcessTimerOrBlockTask+0x88>)
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d101      	bne.n	8006abe <prvProcessTimerOrBlockTask+0x56>
 8006aba:	2301      	movs	r3, #1
 8006abc:	e000      	b.n	8006ac0 <prvProcessTimerOrBlockTask+0x58>
 8006abe:	2300      	movs	r3, #0
 8006ac0:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006ac2:	4b0c      	ldr	r3, [pc, #48]	; (8006af4 <prvProcessTimerOrBlockTask+0x8c>)
 8006ac4:	6818      	ldr	r0, [r3, #0]
 8006ac6:	687a      	ldr	r2, [r7, #4]
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	1ad3      	subs	r3, r2, r3
 8006acc:	683a      	ldr	r2, [r7, #0]
 8006ace:	0019      	movs	r1, r3
 8006ad0:	f7fe ff7e 	bl	80059d0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006ad4:	f7ff f9b2 	bl	8005e3c <xTaskResumeAll>
 8006ad8:	1e03      	subs	r3, r0, #0
 8006ada:	d104      	bne.n	8006ae6 <prvProcessTimerOrBlockTask+0x7e>
					portYIELD_WITHIN_API();
 8006adc:	f000 fa80 	bl	8006fe0 <vPortYield>
}
 8006ae0:	e001      	b.n	8006ae6 <prvProcessTimerOrBlockTask+0x7e>
			( void ) xTaskResumeAll();
 8006ae2:	f7ff f9ab 	bl	8005e3c <xTaskResumeAll>
}
 8006ae6:	46c0      	nop			; (mov r8, r8)
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	b004      	add	sp, #16
 8006aec:	bd80      	pop	{r7, pc}
 8006aee:	46c0      	nop			; (mov r8, r8)
 8006af0:	200013ac 	.word	0x200013ac
 8006af4:	200013b0 	.word	0x200013b0

08006af8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b084      	sub	sp, #16
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006b00:	4b0d      	ldr	r3, [pc, #52]	; (8006b38 <prvGetNextExpireTime+0x40>)
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d101      	bne.n	8006b0e <prvGetNextExpireTime+0x16>
 8006b0a:	2201      	movs	r2, #1
 8006b0c:	e000      	b.n	8006b10 <prvGetNextExpireTime+0x18>
 8006b0e:	2200      	movs	r2, #0
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d105      	bne.n	8006b28 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006b1c:	4b06      	ldr	r3, [pc, #24]	; (8006b38 <prvGetNextExpireTime+0x40>)
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	68db      	ldr	r3, [r3, #12]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	60fb      	str	r3, [r7, #12]
 8006b26:	e001      	b.n	8006b2c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006b28:	2300      	movs	r3, #0
 8006b2a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006b2c:	68fb      	ldr	r3, [r7, #12]
}
 8006b2e:	0018      	movs	r0, r3
 8006b30:	46bd      	mov	sp, r7
 8006b32:	b004      	add	sp, #16
 8006b34:	bd80      	pop	{r7, pc}
 8006b36:	46c0      	nop			; (mov r8, r8)
 8006b38:	200013a8 	.word	0x200013a8

08006b3c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	b084      	sub	sp, #16
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006b44:	f7ff fa06 	bl	8005f54 <xTaskGetTickCount>
 8006b48:	0003      	movs	r3, r0
 8006b4a:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
 8006b4c:	4b0a      	ldr	r3, [pc, #40]	; (8006b78 <prvSampleTimeNow+0x3c>)
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	68fa      	ldr	r2, [r7, #12]
 8006b52:	429a      	cmp	r2, r3
 8006b54:	d205      	bcs.n	8006b62 <prvSampleTimeNow+0x26>
	{
		prvSwitchTimerLists();
 8006b56:	f000 f919 	bl	8006d8c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	2201      	movs	r2, #1
 8006b5e:	601a      	str	r2, [r3, #0]
 8006b60:	e002      	b.n	8006b68 <prvSampleTimeNow+0x2c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	2200      	movs	r2, #0
 8006b66:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006b68:	4b03      	ldr	r3, [pc, #12]	; (8006b78 <prvSampleTimeNow+0x3c>)
 8006b6a:	68fa      	ldr	r2, [r7, #12]
 8006b6c:	601a      	str	r2, [r3, #0]

	return xTimeNow;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
}
 8006b70:	0018      	movs	r0, r3
 8006b72:	46bd      	mov	sp, r7
 8006b74:	b004      	add	sp, #16
 8006b76:	bd80      	pop	{r7, pc}
 8006b78:	200013b8 	.word	0x200013b8

08006b7c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	b086      	sub	sp, #24
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	60f8      	str	r0, [r7, #12]
 8006b84:	60b9      	str	r1, [r7, #8]
 8006b86:	607a      	str	r2, [r7, #4]
 8006b88:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006b8a:	2300      	movs	r3, #0
 8006b8c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	68ba      	ldr	r2, [r7, #8]
 8006b92:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	68fa      	ldr	r2, [r7, #12]
 8006b98:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006b9a:	68ba      	ldr	r2, [r7, #8]
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	429a      	cmp	r2, r3
 8006ba0:	d812      	bhi.n	8006bc8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ba2:	687a      	ldr	r2, [r7, #4]
 8006ba4:	683b      	ldr	r3, [r7, #0]
 8006ba6:	1ad2      	subs	r2, r2, r3
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	699b      	ldr	r3, [r3, #24]
 8006bac:	429a      	cmp	r2, r3
 8006bae:	d302      	bcc.n	8006bb6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006bb0:	2301      	movs	r3, #1
 8006bb2:	617b      	str	r3, [r7, #20]
 8006bb4:	e01b      	b.n	8006bee <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006bb6:	4b10      	ldr	r3, [pc, #64]	; (8006bf8 <prvInsertTimerInActiveList+0x7c>)
 8006bb8:	681a      	ldr	r2, [r3, #0]
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	3304      	adds	r3, #4
 8006bbe:	0019      	movs	r1, r3
 8006bc0:	0010      	movs	r0, r2
 8006bc2:	f7fe f834 	bl	8004c2e <vListInsert>
 8006bc6:	e012      	b.n	8006bee <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006bc8:	687a      	ldr	r2, [r7, #4]
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	429a      	cmp	r2, r3
 8006bce:	d206      	bcs.n	8006bde <prvInsertTimerInActiveList+0x62>
 8006bd0:	68ba      	ldr	r2, [r7, #8]
 8006bd2:	683b      	ldr	r3, [r7, #0]
 8006bd4:	429a      	cmp	r2, r3
 8006bd6:	d302      	bcc.n	8006bde <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006bd8:	2301      	movs	r3, #1
 8006bda:	617b      	str	r3, [r7, #20]
 8006bdc:	e007      	b.n	8006bee <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006bde:	4b07      	ldr	r3, [pc, #28]	; (8006bfc <prvInsertTimerInActiveList+0x80>)
 8006be0:	681a      	ldr	r2, [r3, #0]
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	3304      	adds	r3, #4
 8006be6:	0019      	movs	r1, r3
 8006be8:	0010      	movs	r0, r2
 8006bea:	f7fe f820 	bl	8004c2e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006bee:	697b      	ldr	r3, [r7, #20]
}
 8006bf0:	0018      	movs	r0, r3
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	b006      	add	sp, #24
 8006bf6:	bd80      	pop	{r7, pc}
 8006bf8:	200013ac 	.word	0x200013ac
 8006bfc:	200013a8 	.word	0x200013a8

08006c00 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006c00:	b590      	push	{r4, r7, lr}
 8006c02:	b08d      	sub	sp, #52	; 0x34
 8006c04:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006c06:	e0ac      	b.n	8006d62 <prvProcessReceivedCommands+0x162>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006c08:	2208      	movs	r2, #8
 8006c0a:	18bb      	adds	r3, r7, r2
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	da0f      	bge.n	8006c32 <prvProcessReceivedCommands+0x32>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006c12:	18bb      	adds	r3, r7, r2
 8006c14:	3304      	adds	r3, #4
 8006c16:	627b      	str	r3, [r7, #36]	; 0x24

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d101      	bne.n	8006c22 <prvProcessReceivedCommands+0x22>
 8006c1e:	b672      	cpsid	i
 8006c20:	e7fe      	b.n	8006c20 <prvProcessReceivedCommands+0x20>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c24:	681a      	ldr	r2, [r3, #0]
 8006c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c28:	6858      	ldr	r0, [r3, #4]
 8006c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c2c:	689b      	ldr	r3, [r3, #8]
 8006c2e:	0019      	movs	r1, r3
 8006c30:	4790      	blx	r2
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006c32:	2208      	movs	r2, #8
 8006c34:	18bb      	adds	r3, r7, r2
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	da00      	bge.n	8006c3e <prvProcessReceivedCommands+0x3e>
 8006c3c:	e090      	b.n	8006d60 <prvProcessReceivedCommands+0x160>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006c3e:	18bb      	adds	r3, r7, r2
 8006c40:	689b      	ldr	r3, [r3, #8]
 8006c42:	623b      	str	r3, [r7, #32]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006c44:	6a3b      	ldr	r3, [r7, #32]
 8006c46:	695b      	ldr	r3, [r3, #20]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d004      	beq.n	8006c56 <prvProcessReceivedCommands+0x56>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006c4c:	6a3b      	ldr	r3, [r7, #32]
 8006c4e:	3304      	adds	r3, #4
 8006c50:	0018      	movs	r0, r3
 8006c52:	f7fe f822 	bl	8004c9a <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006c56:	1d3b      	adds	r3, r7, #4
 8006c58:	0018      	movs	r0, r3
 8006c5a:	f7ff ff6f 	bl	8006b3c <prvSampleTimeNow>
 8006c5e:	0003      	movs	r3, r0
 8006c60:	61fb      	str	r3, [r7, #28]

			switch( xMessage.xMessageID )
 8006c62:	2308      	movs	r3, #8
 8006c64:	18fb      	adds	r3, r7, r3
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	2b09      	cmp	r3, #9
 8006c6a:	d900      	bls.n	8006c6e <prvProcessReceivedCommands+0x6e>
 8006c6c:	e079      	b.n	8006d62 <prvProcessReceivedCommands+0x162>
 8006c6e:	009a      	lsls	r2, r3, #2
 8006c70:	4b44      	ldr	r3, [pc, #272]	; (8006d84 <prvProcessReceivedCommands+0x184>)
 8006c72:	18d3      	adds	r3, r2, r3
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	469f      	mov	pc, r3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006c78:	6a3b      	ldr	r3, [r7, #32]
 8006c7a:	2228      	movs	r2, #40	; 0x28
 8006c7c:	5c9b      	ldrb	r3, [r3, r2]
 8006c7e:	2201      	movs	r2, #1
 8006c80:	4313      	orrs	r3, r2
 8006c82:	b2d9      	uxtb	r1, r3
 8006c84:	6a3b      	ldr	r3, [r7, #32]
 8006c86:	2228      	movs	r2, #40	; 0x28
 8006c88:	5499      	strb	r1, [r3, r2]
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006c8a:	2408      	movs	r4, #8
 8006c8c:	193b      	adds	r3, r7, r4
 8006c8e:	685a      	ldr	r2, [r3, #4]
 8006c90:	6a3b      	ldr	r3, [r7, #32]
 8006c92:	699b      	ldr	r3, [r3, #24]
 8006c94:	18d1      	adds	r1, r2, r3
 8006c96:	193b      	adds	r3, r7, r4
 8006c98:	685b      	ldr	r3, [r3, #4]
 8006c9a:	69fa      	ldr	r2, [r7, #28]
 8006c9c:	6a38      	ldr	r0, [r7, #32]
 8006c9e:	f7ff ff6d 	bl	8006b7c <prvInsertTimerInActiveList>
 8006ca2:	1e03      	subs	r3, r0, #0
 8006ca4:	d05d      	beq.n	8006d62 <prvProcessReceivedCommands+0x162>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006ca6:	6a3b      	ldr	r3, [r7, #32]
 8006ca8:	6a1b      	ldr	r3, [r3, #32]
 8006caa:	6a3a      	ldr	r2, [r7, #32]
 8006cac:	0010      	movs	r0, r2
 8006cae:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006cb0:	6a3b      	ldr	r3, [r7, #32]
 8006cb2:	2228      	movs	r2, #40	; 0x28
 8006cb4:	5c9b      	ldrb	r3, [r3, r2]
 8006cb6:	001a      	movs	r2, r3
 8006cb8:	2304      	movs	r3, #4
 8006cba:	4013      	ands	r3, r2
 8006cbc:	d051      	beq.n	8006d62 <prvProcessReceivedCommands+0x162>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006cbe:	193b      	adds	r3, r7, r4
 8006cc0:	685a      	ldr	r2, [r3, #4]
 8006cc2:	6a3b      	ldr	r3, [r7, #32]
 8006cc4:	699b      	ldr	r3, [r3, #24]
 8006cc6:	18d2      	adds	r2, r2, r3
 8006cc8:	6a38      	ldr	r0, [r7, #32]
 8006cca:	2300      	movs	r3, #0
 8006ccc:	9300      	str	r3, [sp, #0]
 8006cce:	2300      	movs	r3, #0
 8006cd0:	2100      	movs	r1, #0
 8006cd2:	f7ff fe27 	bl	8006924 <xTimerGenericCommand>
 8006cd6:	0003      	movs	r3, r0
 8006cd8:	61bb      	str	r3, [r7, #24]
							configASSERT( xResult );
 8006cda:	69bb      	ldr	r3, [r7, #24]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d140      	bne.n	8006d62 <prvProcessReceivedCommands+0x162>
 8006ce0:	b672      	cpsid	i
 8006ce2:	e7fe      	b.n	8006ce2 <prvProcessReceivedCommands+0xe2>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006ce4:	6a3b      	ldr	r3, [r7, #32]
 8006ce6:	2228      	movs	r2, #40	; 0x28
 8006ce8:	5c9b      	ldrb	r3, [r3, r2]
 8006cea:	2201      	movs	r2, #1
 8006cec:	4393      	bics	r3, r2
 8006cee:	b2d9      	uxtb	r1, r3
 8006cf0:	6a3b      	ldr	r3, [r7, #32]
 8006cf2:	2228      	movs	r2, #40	; 0x28
 8006cf4:	5499      	strb	r1, [r3, r2]
					break;
 8006cf6:	e034      	b.n	8006d62 <prvProcessReceivedCommands+0x162>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006cf8:	6a3b      	ldr	r3, [r7, #32]
 8006cfa:	2228      	movs	r2, #40	; 0x28
 8006cfc:	5c9b      	ldrb	r3, [r3, r2]
 8006cfe:	2201      	movs	r2, #1
 8006d00:	4313      	orrs	r3, r2
 8006d02:	b2d9      	uxtb	r1, r3
 8006d04:	6a3b      	ldr	r3, [r7, #32]
 8006d06:	2228      	movs	r2, #40	; 0x28
 8006d08:	5499      	strb	r1, [r3, r2]
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006d0a:	2308      	movs	r3, #8
 8006d0c:	18fb      	adds	r3, r7, r3
 8006d0e:	685a      	ldr	r2, [r3, #4]
 8006d10:	6a3b      	ldr	r3, [r7, #32]
 8006d12:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006d14:	6a3b      	ldr	r3, [r7, #32]
 8006d16:	699b      	ldr	r3, [r3, #24]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d101      	bne.n	8006d20 <prvProcessReceivedCommands+0x120>
 8006d1c:	b672      	cpsid	i
 8006d1e:	e7fe      	b.n	8006d1e <prvProcessReceivedCommands+0x11e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006d20:	6a3b      	ldr	r3, [r7, #32]
 8006d22:	699a      	ldr	r2, [r3, #24]
 8006d24:	69fb      	ldr	r3, [r7, #28]
 8006d26:	18d1      	adds	r1, r2, r3
 8006d28:	69fb      	ldr	r3, [r7, #28]
 8006d2a:	69fa      	ldr	r2, [r7, #28]
 8006d2c:	6a38      	ldr	r0, [r7, #32]
 8006d2e:	f7ff ff25 	bl	8006b7c <prvInsertTimerInActiveList>
					break;
 8006d32:	e016      	b.n	8006d62 <prvProcessReceivedCommands+0x162>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006d34:	6a3b      	ldr	r3, [r7, #32]
 8006d36:	2228      	movs	r2, #40	; 0x28
 8006d38:	5c9b      	ldrb	r3, [r3, r2]
 8006d3a:	001a      	movs	r2, r3
 8006d3c:	2302      	movs	r3, #2
 8006d3e:	4013      	ands	r3, r2
 8006d40:	d104      	bne.n	8006d4c <prvProcessReceivedCommands+0x14c>
						{
							vPortFree( pxTimer );
 8006d42:	6a3b      	ldr	r3, [r7, #32]
 8006d44:	0018      	movs	r0, r3
 8006d46:	f000 fa9f 	bl	8007288 <vPortFree>
 8006d4a:	e00a      	b.n	8006d62 <prvProcessReceivedCommands+0x162>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006d4c:	6a3b      	ldr	r3, [r7, #32]
 8006d4e:	2228      	movs	r2, #40	; 0x28
 8006d50:	5c9b      	ldrb	r3, [r3, r2]
 8006d52:	2201      	movs	r2, #1
 8006d54:	4393      	bics	r3, r2
 8006d56:	b2d9      	uxtb	r1, r3
 8006d58:	6a3b      	ldr	r3, [r7, #32]
 8006d5a:	2228      	movs	r2, #40	; 0x28
 8006d5c:	5499      	strb	r1, [r3, r2]
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006d5e:	e000      	b.n	8006d62 <prvProcessReceivedCommands+0x162>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8006d60:	46c0      	nop			; (mov r8, r8)
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006d62:	4b09      	ldr	r3, [pc, #36]	; (8006d88 <prvProcessReceivedCommands+0x188>)
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	2208      	movs	r2, #8
 8006d68:	18b9      	adds	r1, r7, r2
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	0018      	movs	r0, r3
 8006d6e:	f7fe fa9b 	bl	80052a8 <xQueueReceive>
 8006d72:	1e03      	subs	r3, r0, #0
 8006d74:	d000      	beq.n	8006d78 <prvProcessReceivedCommands+0x178>
 8006d76:	e747      	b.n	8006c08 <prvProcessReceivedCommands+0x8>
	}
}
 8006d78:	46c0      	nop			; (mov r8, r8)
 8006d7a:	46c0      	nop			; (mov r8, r8)
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	b00b      	add	sp, #44	; 0x2c
 8006d80:	bd90      	pop	{r4, r7, pc}
 8006d82:	46c0      	nop			; (mov r8, r8)
 8006d84:	080077c8 	.word	0x080077c8
 8006d88:	200013b0 	.word	0x200013b0

08006d8c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	b088      	sub	sp, #32
 8006d90:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006d92:	e041      	b.n	8006e18 <prvSwitchTimerLists+0x8c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006d94:	4b2a      	ldr	r3, [pc, #168]	; (8006e40 <prvSwitchTimerLists+0xb4>)
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	68db      	ldr	r3, [r3, #12]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d9e:	4b28      	ldr	r3, [pc, #160]	; (8006e40 <prvSwitchTimerLists+0xb4>)
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	68db      	ldr	r3, [r3, #12]
 8006da4:	68db      	ldr	r3, [r3, #12]
 8006da6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	3304      	adds	r3, #4
 8006dac:	0018      	movs	r0, r3
 8006dae:	f7fd ff74 	bl	8004c9a <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	6a1b      	ldr	r3, [r3, #32]
 8006db6:	68fa      	ldr	r2, [r7, #12]
 8006db8:	0010      	movs	r0, r2
 8006dba:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	2228      	movs	r2, #40	; 0x28
 8006dc0:	5c9b      	ldrb	r3, [r3, r2]
 8006dc2:	001a      	movs	r2, r3
 8006dc4:	2304      	movs	r3, #4
 8006dc6:	4013      	ands	r3, r2
 8006dc8:	d026      	beq.n	8006e18 <prvSwitchTimerLists+0x8c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	699b      	ldr	r3, [r3, #24]
 8006dce:	693a      	ldr	r2, [r7, #16]
 8006dd0:	18d3      	adds	r3, r2, r3
 8006dd2:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006dd4:	68ba      	ldr	r2, [r7, #8]
 8006dd6:	693b      	ldr	r3, [r7, #16]
 8006dd8:	429a      	cmp	r2, r3
 8006dda:	d90e      	bls.n	8006dfa <prvSwitchTimerLists+0x6e>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	68ba      	ldr	r2, [r7, #8]
 8006de0:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	68fa      	ldr	r2, [r7, #12]
 8006de6:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006de8:	4b15      	ldr	r3, [pc, #84]	; (8006e40 <prvSwitchTimerLists+0xb4>)
 8006dea:	681a      	ldr	r2, [r3, #0]
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	3304      	adds	r3, #4
 8006df0:	0019      	movs	r1, r3
 8006df2:	0010      	movs	r0, r2
 8006df4:	f7fd ff1b 	bl	8004c2e <vListInsert>
 8006df8:	e00e      	b.n	8006e18 <prvSwitchTimerLists+0x8c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006dfa:	693a      	ldr	r2, [r7, #16]
 8006dfc:	68f8      	ldr	r0, [r7, #12]
 8006dfe:	2300      	movs	r3, #0
 8006e00:	9300      	str	r3, [sp, #0]
 8006e02:	2300      	movs	r3, #0
 8006e04:	2100      	movs	r1, #0
 8006e06:	f7ff fd8d 	bl	8006924 <xTimerGenericCommand>
 8006e0a:	0003      	movs	r3, r0
 8006e0c:	607b      	str	r3, [r7, #4]
				configASSERT( xResult );
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d101      	bne.n	8006e18 <prvSwitchTimerLists+0x8c>
 8006e14:	b672      	cpsid	i
 8006e16:	e7fe      	b.n	8006e16 <prvSwitchTimerLists+0x8a>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006e18:	4b09      	ldr	r3, [pc, #36]	; (8006e40 <prvSwitchTimerLists+0xb4>)
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d1b8      	bne.n	8006d94 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006e22:	4b07      	ldr	r3, [pc, #28]	; (8006e40 <prvSwitchTimerLists+0xb4>)
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006e28:	4b06      	ldr	r3, [pc, #24]	; (8006e44 <prvSwitchTimerLists+0xb8>)
 8006e2a:	681a      	ldr	r2, [r3, #0]
 8006e2c:	4b04      	ldr	r3, [pc, #16]	; (8006e40 <prvSwitchTimerLists+0xb4>)
 8006e2e:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
 8006e30:	4b04      	ldr	r3, [pc, #16]	; (8006e44 <prvSwitchTimerLists+0xb8>)
 8006e32:	697a      	ldr	r2, [r7, #20]
 8006e34:	601a      	str	r2, [r3, #0]
}
 8006e36:	46c0      	nop			; (mov r8, r8)
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	b006      	add	sp, #24
 8006e3c:	bd80      	pop	{r7, pc}
 8006e3e:	46c0      	nop			; (mov r8, r8)
 8006e40:	200013a8 	.word	0x200013a8
 8006e44:	200013ac 	.word	0x200013ac

08006e48 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b082      	sub	sp, #8
 8006e4c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006e4e:	f000 f8d7 	bl	8007000 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006e52:	4b16      	ldr	r3, [pc, #88]	; (8006eac <prvCheckForValidListAndQueue+0x64>)
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d123      	bne.n	8006ea2 <prvCheckForValidListAndQueue+0x5a>
		{
			vListInitialise( &xActiveTimerList1 );
 8006e5a:	4b15      	ldr	r3, [pc, #84]	; (8006eb0 <prvCheckForValidListAndQueue+0x68>)
 8006e5c:	0018      	movs	r0, r3
 8006e5e:	f7fd fe9b 	bl	8004b98 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006e62:	4b14      	ldr	r3, [pc, #80]	; (8006eb4 <prvCheckForValidListAndQueue+0x6c>)
 8006e64:	0018      	movs	r0, r3
 8006e66:	f7fd fe97 	bl	8004b98 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006e6a:	4b13      	ldr	r3, [pc, #76]	; (8006eb8 <prvCheckForValidListAndQueue+0x70>)
 8006e6c:	4a10      	ldr	r2, [pc, #64]	; (8006eb0 <prvCheckForValidListAndQueue+0x68>)
 8006e6e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006e70:	4b12      	ldr	r3, [pc, #72]	; (8006ebc <prvCheckForValidListAndQueue+0x74>)
 8006e72:	4a10      	ldr	r2, [pc, #64]	; (8006eb4 <prvCheckForValidListAndQueue+0x6c>)
 8006e74:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006e76:	4b12      	ldr	r3, [pc, #72]	; (8006ec0 <prvCheckForValidListAndQueue+0x78>)
 8006e78:	4a12      	ldr	r2, [pc, #72]	; (8006ec4 <prvCheckForValidListAndQueue+0x7c>)
 8006e7a:	2100      	movs	r1, #0
 8006e7c:	9100      	str	r1, [sp, #0]
 8006e7e:	2110      	movs	r1, #16
 8006e80:	200a      	movs	r0, #10
 8006e82:	f7fd ff86 	bl	8004d92 <xQueueGenericCreateStatic>
 8006e86:	0002      	movs	r2, r0
 8006e88:	4b08      	ldr	r3, [pc, #32]	; (8006eac <prvCheckForValidListAndQueue+0x64>)
 8006e8a:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006e8c:	4b07      	ldr	r3, [pc, #28]	; (8006eac <prvCheckForValidListAndQueue+0x64>)
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d006      	beq.n	8006ea2 <prvCheckForValidListAndQueue+0x5a>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006e94:	4b05      	ldr	r3, [pc, #20]	; (8006eac <prvCheckForValidListAndQueue+0x64>)
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	4a0b      	ldr	r2, [pc, #44]	; (8006ec8 <prvCheckForValidListAndQueue+0x80>)
 8006e9a:	0011      	movs	r1, r2
 8006e9c:	0018      	movs	r0, r3
 8006e9e:	f7fe fd45 	bl	800592c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006ea2:	f000 f8bf 	bl	8007024 <vPortExitCritical>
}
 8006ea6:	46c0      	nop			; (mov r8, r8)
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	bd80      	pop	{r7, pc}
 8006eac:	200013b0 	.word	0x200013b0
 8006eb0:	20001380 	.word	0x20001380
 8006eb4:	20001394 	.word	0x20001394
 8006eb8:	200013a8 	.word	0x200013a8
 8006ebc:	200013ac 	.word	0x200013ac
 8006ec0:	2000145c 	.word	0x2000145c
 8006ec4:	200013bc 	.word	0x200013bc
 8006ec8:	080076ec 	.word	0x080076ec

08006ecc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b084      	sub	sp, #16
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	60f8      	str	r0, [r7, #12]
 8006ed4:	60b9      	str	r1, [r7, #8]
 8006ed6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	3b04      	subs	r3, #4
 8006edc:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	2280      	movs	r2, #128	; 0x80
 8006ee2:	0452      	lsls	r2, r2, #17
 8006ee4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	3b04      	subs	r3, #4
 8006eea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 8006eec:	68ba      	ldr	r2, [r7, #8]
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	3b04      	subs	r3, #4
 8006ef6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006ef8:	4a08      	ldr	r2, [pc, #32]	; (8006f1c <pxPortInitialiseStack+0x50>)
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	3b14      	subs	r3, #20
 8006f02:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006f04:	687a      	ldr	r2, [r7, #4]
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	3b20      	subs	r3, #32
 8006f0e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006f10:	68fb      	ldr	r3, [r7, #12]
}
 8006f12:	0018      	movs	r0, r3
 8006f14:	46bd      	mov	sp, r7
 8006f16:	b004      	add	sp, #16
 8006f18:	bd80      	pop	{r7, pc}
 8006f1a:	46c0      	nop			; (mov r8, r8)
 8006f1c:	08006f21 	.word	0x08006f21

08006f20 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006f20:	b580      	push	{r7, lr}
 8006f22:	b082      	sub	sp, #8
 8006f24:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8006f26:	2300      	movs	r3, #0
 8006f28:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006f2a:	4b08      	ldr	r3, [pc, #32]	; (8006f4c <prvTaskExitError+0x2c>)
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	3301      	adds	r3, #1
 8006f30:	d001      	beq.n	8006f36 <prvTaskExitError+0x16>
 8006f32:	b672      	cpsid	i
 8006f34:	e7fe      	b.n	8006f34 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 8006f36:	b672      	cpsid	i
	while( ulDummy == 0 )
 8006f38:	46c0      	nop			; (mov r8, r8)
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d0fc      	beq.n	8006f3a <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006f40:	46c0      	nop			; (mov r8, r8)
 8006f42:	46c0      	nop			; (mov r8, r8)
 8006f44:	46bd      	mov	sp, r7
 8006f46:	b002      	add	sp, #8
 8006f48:	bd80      	pop	{r7, pc}
 8006f4a:	46c0      	nop			; (mov r8, r8)
 8006f4c:	2000000c 	.word	0x2000000c

08006f50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 8006f50:	b580      	push	{r7, lr}
 8006f52:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 8006f54:	46c0      	nop			; (mov r8, r8)
 8006f56:	46bd      	mov	sp, r7
 8006f58:	bd80      	pop	{r7, pc}
 8006f5a:	0000      	movs	r0, r0
 8006f5c:	0000      	movs	r0, r0
	...

08006f60 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 8006f60:	4a0b      	ldr	r2, [pc, #44]	; (8006f90 <pxCurrentTCBConst2>)
 8006f62:	6813      	ldr	r3, [r2, #0]
 8006f64:	6818      	ldr	r0, [r3, #0]
 8006f66:	3020      	adds	r0, #32
 8006f68:	f380 8809 	msr	PSP, r0
 8006f6c:	2002      	movs	r0, #2
 8006f6e:	f380 8814 	msr	CONTROL, r0
 8006f72:	f3bf 8f6f 	isb	sy
 8006f76:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8006f78:	46ae      	mov	lr, r5
 8006f7a:	bc08      	pop	{r3}
 8006f7c:	bc04      	pop	{r2}
 8006f7e:	b662      	cpsie	i
 8006f80:	4718      	bx	r3
 8006f82:	46c0      	nop			; (mov r8, r8)
 8006f84:	46c0      	nop			; (mov r8, r8)
 8006f86:	46c0      	nop			; (mov r8, r8)
 8006f88:	46c0      	nop			; (mov r8, r8)
 8006f8a:	46c0      	nop			; (mov r8, r8)
 8006f8c:	46c0      	nop			; (mov r8, r8)
 8006f8e:	46c0      	nop			; (mov r8, r8)

08006f90 <pxCurrentTCBConst2>:
 8006f90:	20000e80 	.word	0x20000e80
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 8006f94:	46c0      	nop			; (mov r8, r8)
 8006f96:	46c0      	nop			; (mov r8, r8)

08006f98 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006f98:	b580      	push	{r7, lr}
 8006f9a:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priority as the kernel. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006f9c:	4b0e      	ldr	r3, [pc, #56]	; (8006fd8 <xPortStartScheduler+0x40>)
 8006f9e:	681a      	ldr	r2, [r3, #0]
 8006fa0:	4b0d      	ldr	r3, [pc, #52]	; (8006fd8 <xPortStartScheduler+0x40>)
 8006fa2:	21ff      	movs	r1, #255	; 0xff
 8006fa4:	0409      	lsls	r1, r1, #16
 8006fa6:	430a      	orrs	r2, r1
 8006fa8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006faa:	4b0b      	ldr	r3, [pc, #44]	; (8006fd8 <xPortStartScheduler+0x40>)
 8006fac:	681a      	ldr	r2, [r3, #0]
 8006fae:	4b0a      	ldr	r3, [pc, #40]	; (8006fd8 <xPortStartScheduler+0x40>)
 8006fb0:	21ff      	movs	r1, #255	; 0xff
 8006fb2:	0609      	lsls	r1, r1, #24
 8006fb4:	430a      	orrs	r2, r1
 8006fb6:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006fb8:	f000 f898 	bl	80070ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006fbc:	4b07      	ldr	r3, [pc, #28]	; (8006fdc <xPortStartScheduler+0x44>)
 8006fbe:	2200      	movs	r2, #0
 8006fc0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 8006fc2:	f7ff ffcd 	bl	8006f60 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006fc6:	f7ff f883 	bl	80060d0 <vTaskSwitchContext>
	prvTaskExitError();
 8006fca:	f7ff ffa9 	bl	8006f20 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006fce:	2300      	movs	r3, #0
}
 8006fd0:	0018      	movs	r0, r3
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	bd80      	pop	{r7, pc}
 8006fd6:	46c0      	nop			; (mov r8, r8)
 8006fd8:	e000ed20 	.word	0xe000ed20
 8006fdc:	2000000c 	.word	0x2000000c

08006fe0 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006fe4:	4b05      	ldr	r3, [pc, #20]	; (8006ffc <vPortYield+0x1c>)
 8006fe6:	2280      	movs	r2, #128	; 0x80
 8006fe8:	0552      	lsls	r2, r2, #21
 8006fea:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 8006fec:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8006ff0:	f3bf 8f6f 	isb	sy
}
 8006ff4:	46c0      	nop			; (mov r8, r8)
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	bd80      	pop	{r7, pc}
 8006ffa:	46c0      	nop			; (mov r8, r8)
 8006ffc:	e000ed04 	.word	0xe000ed04

08007000 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007000:	b580      	push	{r7, lr}
 8007002:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
 8007004:	b672      	cpsid	i
	uxCriticalNesting++;
 8007006:	4b06      	ldr	r3, [pc, #24]	; (8007020 <vPortEnterCritical+0x20>)
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	1c5a      	adds	r2, r3, #1
 800700c:	4b04      	ldr	r3, [pc, #16]	; (8007020 <vPortEnterCritical+0x20>)
 800700e:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 8007010:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8007014:	f3bf 8f6f 	isb	sy
}
 8007018:	46c0      	nop			; (mov r8, r8)
 800701a:	46bd      	mov	sp, r7
 800701c:	bd80      	pop	{r7, pc}
 800701e:	46c0      	nop			; (mov r8, r8)
 8007020:	2000000c 	.word	0x2000000c

08007024 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007024:	b580      	push	{r7, lr}
 8007026:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007028:	4b09      	ldr	r3, [pc, #36]	; (8007050 <vPortExitCritical+0x2c>)
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d101      	bne.n	8007034 <vPortExitCritical+0x10>
 8007030:	b672      	cpsid	i
 8007032:	e7fe      	b.n	8007032 <vPortExitCritical+0xe>
	uxCriticalNesting--;
 8007034:	4b06      	ldr	r3, [pc, #24]	; (8007050 <vPortExitCritical+0x2c>)
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	1e5a      	subs	r2, r3, #1
 800703a:	4b05      	ldr	r3, [pc, #20]	; (8007050 <vPortExitCritical+0x2c>)
 800703c:	601a      	str	r2, [r3, #0]
	if( uxCriticalNesting == 0 )
 800703e:	4b04      	ldr	r3, [pc, #16]	; (8007050 <vPortExitCritical+0x2c>)
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	2b00      	cmp	r3, #0
 8007044:	d100      	bne.n	8007048 <vPortExitCritical+0x24>
	{
		portENABLE_INTERRUPTS();
 8007046:	b662      	cpsie	i
	}
}
 8007048:	46c0      	nop			; (mov r8, r8)
 800704a:	46bd      	mov	sp, r7
 800704c:	bd80      	pop	{r7, pc}
 800704e:	46c0      	nop			; (mov r8, r8)
 8007050:	2000000c 	.word	0x2000000c

08007054 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 8007054:	f3ef 8010 	mrs	r0, PRIMASK
 8007058:	b672      	cpsid	i
 800705a:	4770      	bx	lr
					" mrs r0, PRIMASK	\n"
					" cpsid i			\n"
					" bx lr				  "
					::: "memory"
				  );
}
 800705c:	46c0      	nop			; (mov r8, r8)
 800705e:	0018      	movs	r0, r3

08007060 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 8007060:	f380 8810 	msr	PRIMASK, r0
 8007064:	4770      	bx	lr
					" msr PRIMASK, r0	\n"
					" bx lr				  "
					::: "memory"
				  );
}
 8007066:	46c0      	nop			; (mov r8, r8)
	...

08007070 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007070:	f3ef 8009 	mrs	r0, PSP
 8007074:	4b0e      	ldr	r3, [pc, #56]	; (80070b0 <pxCurrentTCBConst>)
 8007076:	681a      	ldr	r2, [r3, #0]
 8007078:	3820      	subs	r0, #32
 800707a:	6010      	str	r0, [r2, #0]
 800707c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800707e:	4644      	mov	r4, r8
 8007080:	464d      	mov	r5, r9
 8007082:	4656      	mov	r6, sl
 8007084:	465f      	mov	r7, fp
 8007086:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8007088:	b508      	push	{r3, lr}
 800708a:	b672      	cpsid	i
 800708c:	f7ff f820 	bl	80060d0 <vTaskSwitchContext>
 8007090:	b662      	cpsie	i
 8007092:	bc0c      	pop	{r2, r3}
 8007094:	6811      	ldr	r1, [r2, #0]
 8007096:	6808      	ldr	r0, [r1, #0]
 8007098:	3010      	adds	r0, #16
 800709a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800709c:	46a0      	mov	r8, r4
 800709e:	46a9      	mov	r9, r5
 80070a0:	46b2      	mov	sl, r6
 80070a2:	46bb      	mov	fp, r7
 80070a4:	f380 8809 	msr	PSP, r0
 80070a8:	3820      	subs	r0, #32
 80070aa:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 80070ac:	4718      	bx	r3
 80070ae:	46c0      	nop			; (mov r8, r8)

080070b0 <pxCurrentTCBConst>:
 80070b0:	20000e80 	.word	0x20000e80
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 80070b4:	46c0      	nop			; (mov r8, r8)
 80070b6:	46c0      	nop			; (mov r8, r8)

080070b8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80070b8:	b580      	push	{r7, lr}
 80070ba:	b082      	sub	sp, #8
 80070bc:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 80070be:	f7ff ffc9 	bl	8007054 <ulSetInterruptMaskFromISR>
 80070c2:	0003      	movs	r3, r0
 80070c4:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80070c6:	f7fe ff53 	bl	8005f70 <xTaskIncrementTick>
 80070ca:	1e03      	subs	r3, r0, #0
 80070cc:	d003      	beq.n	80070d6 <xPortSysTickHandler+0x1e>
		{
			/* Pend a context switch. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80070ce:	4b06      	ldr	r3, [pc, #24]	; (80070e8 <xPortSysTickHandler+0x30>)
 80070d0:	2280      	movs	r2, #128	; 0x80
 80070d2:	0552      	lsls	r2, r2, #21
 80070d4:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	0018      	movs	r0, r3
 80070da:	f7ff ffc1 	bl	8007060 <vClearInterruptMaskFromISR>
}
 80070de:	46c0      	nop			; (mov r8, r8)
 80070e0:	46bd      	mov	sp, r7
 80070e2:	b002      	add	sp, #8
 80070e4:	bd80      	pop	{r7, pc}
 80070e6:	46c0      	nop			; (mov r8, r8)
 80070e8:	e000ed04 	.word	0xe000ed04

080070ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80070ec:	b580      	push	{r7, lr}
 80070ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR;
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80070f0:	4b0b      	ldr	r3, [pc, #44]	; (8007120 <vPortSetupTimerInterrupt+0x34>)
 80070f2:	2200      	movs	r2, #0
 80070f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80070f6:	4b0b      	ldr	r3, [pc, #44]	; (8007124 <vPortSetupTimerInterrupt+0x38>)
 80070f8:	2200      	movs	r2, #0
 80070fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80070fc:	4b0a      	ldr	r3, [pc, #40]	; (8007128 <vPortSetupTimerInterrupt+0x3c>)
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	22fa      	movs	r2, #250	; 0xfa
 8007102:	0091      	lsls	r1, r2, #2
 8007104:	0018      	movs	r0, r3
 8007106:	f7f8 ffff 	bl	8000108 <__udivsi3>
 800710a:	0003      	movs	r3, r0
 800710c:	001a      	movs	r2, r3
 800710e:	4b07      	ldr	r3, [pc, #28]	; (800712c <vPortSetupTimerInterrupt+0x40>)
 8007110:	3a01      	subs	r2, #1
 8007112:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 8007114:	4b02      	ldr	r3, [pc, #8]	; (8007120 <vPortSetupTimerInterrupt+0x34>)
 8007116:	2207      	movs	r2, #7
 8007118:	601a      	str	r2, [r3, #0]
}
 800711a:	46c0      	nop			; (mov r8, r8)
 800711c:	46bd      	mov	sp, r7
 800711e:	bd80      	pop	{r7, pc}
 8007120:	e000e010 	.word	0xe000e010
 8007124:	e000e018 	.word	0xe000e018
 8007128:	20000000 	.word	0x20000000
 800712c:	e000e014 	.word	0xe000e014

08007130 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007130:	b580      	push	{r7, lr}
 8007132:	b086      	sub	sp, #24
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007138:	2300      	movs	r3, #0
 800713a:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 800713c:	f7fe fe72 	bl	8005e24 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007140:	4b4b      	ldr	r3, [pc, #300]	; (8007270 <pvPortMalloc+0x140>)
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	2b00      	cmp	r3, #0
 8007146:	d101      	bne.n	800714c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007148:	f000 f8ec 	bl	8007324 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800714c:	4b49      	ldr	r3, [pc, #292]	; (8007274 <pvPortMalloc+0x144>)
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	687a      	ldr	r2, [r7, #4]
 8007152:	4013      	ands	r3, r2
 8007154:	d000      	beq.n	8007158 <pvPortMalloc+0x28>
 8007156:	e07e      	b.n	8007256 <pvPortMalloc+0x126>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2b00      	cmp	r3, #0
 800715c:	d012      	beq.n	8007184 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
 800715e:	2208      	movs	r2, #8
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	189b      	adds	r3, r3, r2
 8007164:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	2207      	movs	r2, #7
 800716a:	4013      	ands	r3, r2
 800716c:	d00a      	beq.n	8007184 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	2207      	movs	r2, #7
 8007172:	4393      	bics	r3, r2
 8007174:	3308      	adds	r3, #8
 8007176:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2207      	movs	r2, #7
 800717c:	4013      	ands	r3, r2
 800717e:	d001      	beq.n	8007184 <pvPortMalloc+0x54>
 8007180:	b672      	cpsid	i
 8007182:	e7fe      	b.n	8007182 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d065      	beq.n	8007256 <pvPortMalloc+0x126>
 800718a:	4b3b      	ldr	r3, [pc, #236]	; (8007278 <pvPortMalloc+0x148>)
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	687a      	ldr	r2, [r7, #4]
 8007190:	429a      	cmp	r2, r3
 8007192:	d860      	bhi.n	8007256 <pvPortMalloc+0x126>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007194:	4b39      	ldr	r3, [pc, #228]	; (800727c <pvPortMalloc+0x14c>)
 8007196:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 8007198:	4b38      	ldr	r3, [pc, #224]	; (800727c <pvPortMalloc+0x14c>)
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800719e:	e004      	b.n	80071aa <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
 80071a0:	697b      	ldr	r3, [r7, #20]
 80071a2:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 80071a4:	697b      	ldr	r3, [r7, #20]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80071aa:	697b      	ldr	r3, [r7, #20]
 80071ac:	685b      	ldr	r3, [r3, #4]
 80071ae:	687a      	ldr	r2, [r7, #4]
 80071b0:	429a      	cmp	r2, r3
 80071b2:	d903      	bls.n	80071bc <pvPortMalloc+0x8c>
 80071b4:	697b      	ldr	r3, [r7, #20]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d1f1      	bne.n	80071a0 <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80071bc:	4b2c      	ldr	r3, [pc, #176]	; (8007270 <pvPortMalloc+0x140>)
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	697a      	ldr	r2, [r7, #20]
 80071c2:	429a      	cmp	r2, r3
 80071c4:	d047      	beq.n	8007256 <pvPortMalloc+0x126>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80071c6:	693b      	ldr	r3, [r7, #16]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	2208      	movs	r2, #8
 80071cc:	189b      	adds	r3, r3, r2
 80071ce:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80071d0:	697b      	ldr	r3, [r7, #20]
 80071d2:	681a      	ldr	r2, [r3, #0]
 80071d4:	693b      	ldr	r3, [r7, #16]
 80071d6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80071d8:	697b      	ldr	r3, [r7, #20]
 80071da:	685a      	ldr	r2, [r3, #4]
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	1ad2      	subs	r2, r2, r3
 80071e0:	2308      	movs	r3, #8
 80071e2:	005b      	lsls	r3, r3, #1
 80071e4:	429a      	cmp	r2, r3
 80071e6:	d916      	bls.n	8007216 <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80071e8:	697a      	ldr	r2, [r7, #20]
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	18d3      	adds	r3, r2, r3
 80071ee:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80071f0:	68bb      	ldr	r3, [r7, #8]
 80071f2:	2207      	movs	r2, #7
 80071f4:	4013      	ands	r3, r2
 80071f6:	d001      	beq.n	80071fc <pvPortMalloc+0xcc>
 80071f8:	b672      	cpsid	i
 80071fa:	e7fe      	b.n	80071fa <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80071fc:	697b      	ldr	r3, [r7, #20]
 80071fe:	685a      	ldr	r2, [r3, #4]
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	1ad2      	subs	r2, r2, r3
 8007204:	68bb      	ldr	r3, [r7, #8]
 8007206:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007208:	697b      	ldr	r3, [r7, #20]
 800720a:	687a      	ldr	r2, [r7, #4]
 800720c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800720e:	68bb      	ldr	r3, [r7, #8]
 8007210:	0018      	movs	r0, r3
 8007212:	f000 f8e7 	bl	80073e4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007216:	4b18      	ldr	r3, [pc, #96]	; (8007278 <pvPortMalloc+0x148>)
 8007218:	681a      	ldr	r2, [r3, #0]
 800721a:	697b      	ldr	r3, [r7, #20]
 800721c:	685b      	ldr	r3, [r3, #4]
 800721e:	1ad2      	subs	r2, r2, r3
 8007220:	4b15      	ldr	r3, [pc, #84]	; (8007278 <pvPortMalloc+0x148>)
 8007222:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007224:	4b14      	ldr	r3, [pc, #80]	; (8007278 <pvPortMalloc+0x148>)
 8007226:	681a      	ldr	r2, [r3, #0]
 8007228:	4b15      	ldr	r3, [pc, #84]	; (8007280 <pvPortMalloc+0x150>)
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	429a      	cmp	r2, r3
 800722e:	d203      	bcs.n	8007238 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007230:	4b11      	ldr	r3, [pc, #68]	; (8007278 <pvPortMalloc+0x148>)
 8007232:	681a      	ldr	r2, [r3, #0]
 8007234:	4b12      	ldr	r3, [pc, #72]	; (8007280 <pvPortMalloc+0x150>)
 8007236:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007238:	697b      	ldr	r3, [r7, #20]
 800723a:	685a      	ldr	r2, [r3, #4]
 800723c:	4b0d      	ldr	r3, [pc, #52]	; (8007274 <pvPortMalloc+0x144>)
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	431a      	orrs	r2, r3
 8007242:	697b      	ldr	r3, [r7, #20]
 8007244:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007246:	697b      	ldr	r3, [r7, #20]
 8007248:	2200      	movs	r2, #0
 800724a:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800724c:	4b0d      	ldr	r3, [pc, #52]	; (8007284 <pvPortMalloc+0x154>)
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	1c5a      	adds	r2, r3, #1
 8007252:	4b0c      	ldr	r3, [pc, #48]	; (8007284 <pvPortMalloc+0x154>)
 8007254:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007256:	f7fe fdf1 	bl	8005e3c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	2207      	movs	r2, #7
 800725e:	4013      	ands	r3, r2
 8007260:	d001      	beq.n	8007266 <pvPortMalloc+0x136>
 8007262:	b672      	cpsid	i
 8007264:	e7fe      	b.n	8007264 <pvPortMalloc+0x134>
	return pvReturn;
 8007266:	68fb      	ldr	r3, [r7, #12]
}
 8007268:	0018      	movs	r0, r3
 800726a:	46bd      	mov	sp, r7
 800726c:	b006      	add	sp, #24
 800726e:	bd80      	pop	{r7, pc}
 8007270:	200020b4 	.word	0x200020b4
 8007274:	200020c8 	.word	0x200020c8
 8007278:	200020b8 	.word	0x200020b8
 800727c:	200020ac 	.word	0x200020ac
 8007280:	200020bc 	.word	0x200020bc
 8007284:	200020c0 	.word	0x200020c0

08007288 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007288:	b580      	push	{r7, lr}
 800728a:	b084      	sub	sp, #16
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	2b00      	cmp	r3, #0
 8007298:	d03a      	beq.n	8007310 <vPortFree+0x88>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800729a:	2308      	movs	r3, #8
 800729c:	425b      	negs	r3, r3
 800729e:	68fa      	ldr	r2, [r7, #12]
 80072a0:	18d3      	adds	r3, r2, r3
 80072a2:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80072a8:	68bb      	ldr	r3, [r7, #8]
 80072aa:	685a      	ldr	r2, [r3, #4]
 80072ac:	4b1a      	ldr	r3, [pc, #104]	; (8007318 <vPortFree+0x90>)
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	4013      	ands	r3, r2
 80072b2:	d101      	bne.n	80072b8 <vPortFree+0x30>
 80072b4:	b672      	cpsid	i
 80072b6:	e7fe      	b.n	80072b6 <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80072b8:	68bb      	ldr	r3, [r7, #8]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d001      	beq.n	80072c4 <vPortFree+0x3c>
 80072c0:	b672      	cpsid	i
 80072c2:	e7fe      	b.n	80072c2 <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80072c4:	68bb      	ldr	r3, [r7, #8]
 80072c6:	685a      	ldr	r2, [r3, #4]
 80072c8:	4b13      	ldr	r3, [pc, #76]	; (8007318 <vPortFree+0x90>)
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	4013      	ands	r3, r2
 80072ce:	d01f      	beq.n	8007310 <vPortFree+0x88>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80072d0:	68bb      	ldr	r3, [r7, #8]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d11b      	bne.n	8007310 <vPortFree+0x88>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80072d8:	68bb      	ldr	r3, [r7, #8]
 80072da:	685a      	ldr	r2, [r3, #4]
 80072dc:	4b0e      	ldr	r3, [pc, #56]	; (8007318 <vPortFree+0x90>)
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	43db      	mvns	r3, r3
 80072e2:	401a      	ands	r2, r3
 80072e4:	68bb      	ldr	r3, [r7, #8]
 80072e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80072e8:	f7fe fd9c 	bl	8005e24 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80072ec:	68bb      	ldr	r3, [r7, #8]
 80072ee:	685a      	ldr	r2, [r3, #4]
 80072f0:	4b0a      	ldr	r3, [pc, #40]	; (800731c <vPortFree+0x94>)
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	18d2      	adds	r2, r2, r3
 80072f6:	4b09      	ldr	r3, [pc, #36]	; (800731c <vPortFree+0x94>)
 80072f8:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80072fa:	68bb      	ldr	r3, [r7, #8]
 80072fc:	0018      	movs	r0, r3
 80072fe:	f000 f871 	bl	80073e4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007302:	4b07      	ldr	r3, [pc, #28]	; (8007320 <vPortFree+0x98>)
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	1c5a      	adds	r2, r3, #1
 8007308:	4b05      	ldr	r3, [pc, #20]	; (8007320 <vPortFree+0x98>)
 800730a:	601a      	str	r2, [r3, #0]
				}
				( void ) xTaskResumeAll();
 800730c:	f7fe fd96 	bl	8005e3c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007310:	46c0      	nop			; (mov r8, r8)
 8007312:	46bd      	mov	sp, r7
 8007314:	b004      	add	sp, #16
 8007316:	bd80      	pop	{r7, pc}
 8007318:	200020c8 	.word	0x200020c8
 800731c:	200020b8 	.word	0x200020b8
 8007320:	200020c4 	.word	0x200020c4

08007324 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007324:	b580      	push	{r7, lr}
 8007326:	b084      	sub	sp, #16
 8007328:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800732a:	23c0      	movs	r3, #192	; 0xc0
 800732c:	011b      	lsls	r3, r3, #4
 800732e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007330:	4b26      	ldr	r3, [pc, #152]	; (80073cc <prvHeapInit+0xa8>)
 8007332:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	2207      	movs	r2, #7
 8007338:	4013      	ands	r3, r2
 800733a:	d00c      	beq.n	8007356 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	3307      	adds	r3, #7
 8007340:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	2207      	movs	r2, #7
 8007346:	4393      	bics	r3, r2
 8007348:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800734a:	68ba      	ldr	r2, [r7, #8]
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	1ad2      	subs	r2, r2, r3
 8007350:	4b1e      	ldr	r3, [pc, #120]	; (80073cc <prvHeapInit+0xa8>)
 8007352:	18d3      	adds	r3, r2, r3
 8007354:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800735a:	4b1d      	ldr	r3, [pc, #116]	; (80073d0 <prvHeapInit+0xac>)
 800735c:	687a      	ldr	r2, [r7, #4]
 800735e:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007360:	4b1b      	ldr	r3, [pc, #108]	; (80073d0 <prvHeapInit+0xac>)
 8007362:	2200      	movs	r2, #0
 8007364:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	68ba      	ldr	r2, [r7, #8]
 800736a:	18d3      	adds	r3, r2, r3
 800736c:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800736e:	2208      	movs	r2, #8
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	1a9b      	subs	r3, r3, r2
 8007374:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	2207      	movs	r2, #7
 800737a:	4393      	bics	r3, r2
 800737c:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800737e:	68fa      	ldr	r2, [r7, #12]
 8007380:	4b14      	ldr	r3, [pc, #80]	; (80073d4 <prvHeapInit+0xb0>)
 8007382:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 8007384:	4b13      	ldr	r3, [pc, #76]	; (80073d4 <prvHeapInit+0xb0>)
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	2200      	movs	r2, #0
 800738a:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800738c:	4b11      	ldr	r3, [pc, #68]	; (80073d4 <prvHeapInit+0xb0>)
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	2200      	movs	r2, #0
 8007392:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	68fa      	ldr	r2, [r7, #12]
 800739c:	1ad2      	subs	r2, r2, r3
 800739e:	683b      	ldr	r3, [r7, #0]
 80073a0:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80073a2:	4b0c      	ldr	r3, [pc, #48]	; (80073d4 <prvHeapInit+0xb0>)
 80073a4:	681a      	ldr	r2, [r3, #0]
 80073a6:	683b      	ldr	r3, [r7, #0]
 80073a8:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80073aa:	683b      	ldr	r3, [r7, #0]
 80073ac:	685a      	ldr	r2, [r3, #4]
 80073ae:	4b0a      	ldr	r3, [pc, #40]	; (80073d8 <prvHeapInit+0xb4>)
 80073b0:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80073b2:	683b      	ldr	r3, [r7, #0]
 80073b4:	685a      	ldr	r2, [r3, #4]
 80073b6:	4b09      	ldr	r3, [pc, #36]	; (80073dc <prvHeapInit+0xb8>)
 80073b8:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80073ba:	4b09      	ldr	r3, [pc, #36]	; (80073e0 <prvHeapInit+0xbc>)
 80073bc:	2280      	movs	r2, #128	; 0x80
 80073be:	0612      	lsls	r2, r2, #24
 80073c0:	601a      	str	r2, [r3, #0]
}
 80073c2:	46c0      	nop			; (mov r8, r8)
 80073c4:	46bd      	mov	sp, r7
 80073c6:	b004      	add	sp, #16
 80073c8:	bd80      	pop	{r7, pc}
 80073ca:	46c0      	nop			; (mov r8, r8)
 80073cc:	200014ac 	.word	0x200014ac
 80073d0:	200020ac 	.word	0x200020ac
 80073d4:	200020b4 	.word	0x200020b4
 80073d8:	200020bc 	.word	0x200020bc
 80073dc:	200020b8 	.word	0x200020b8
 80073e0:	200020c8 	.word	0x200020c8

080073e4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80073e4:	b580      	push	{r7, lr}
 80073e6:	b084      	sub	sp, #16
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80073ec:	4b27      	ldr	r3, [pc, #156]	; (800748c <prvInsertBlockIntoFreeList+0xa8>)
 80073ee:	60fb      	str	r3, [r7, #12]
 80073f0:	e002      	b.n	80073f8 <prvInsertBlockIntoFreeList+0x14>
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	60fb      	str	r3, [r7, #12]
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	687a      	ldr	r2, [r7, #4]
 80073fe:	429a      	cmp	r2, r3
 8007400:	d8f7      	bhi.n	80073f2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	685b      	ldr	r3, [r3, #4]
 800740a:	68ba      	ldr	r2, [r7, #8]
 800740c:	18d3      	adds	r3, r2, r3
 800740e:	687a      	ldr	r2, [r7, #4]
 8007410:	429a      	cmp	r2, r3
 8007412:	d108      	bne.n	8007426 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	685a      	ldr	r2, [r3, #4]
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	685b      	ldr	r3, [r3, #4]
 800741c:	18d2      	adds	r2, r2, r3
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	685b      	ldr	r3, [r3, #4]
 800742e:	68ba      	ldr	r2, [r7, #8]
 8007430:	18d2      	adds	r2, r2, r3
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	429a      	cmp	r2, r3
 8007438:	d118      	bne.n	800746c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	681a      	ldr	r2, [r3, #0]
 800743e:	4b14      	ldr	r3, [pc, #80]	; (8007490 <prvInsertBlockIntoFreeList+0xac>)
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	429a      	cmp	r2, r3
 8007444:	d00d      	beq.n	8007462 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	685a      	ldr	r2, [r3, #4]
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	685b      	ldr	r3, [r3, #4]
 8007450:	18d2      	adds	r2, r2, r3
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	681a      	ldr	r2, [r3, #0]
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	601a      	str	r2, [r3, #0]
 8007460:	e008      	b.n	8007474 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007462:	4b0b      	ldr	r3, [pc, #44]	; (8007490 <prvInsertBlockIntoFreeList+0xac>)
 8007464:	681a      	ldr	r2, [r3, #0]
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	601a      	str	r2, [r3, #0]
 800746a:	e003      	b.n	8007474 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	681a      	ldr	r2, [r3, #0]
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007474:	68fa      	ldr	r2, [r7, #12]
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	429a      	cmp	r2, r3
 800747a:	d002      	beq.n	8007482 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	687a      	ldr	r2, [r7, #4]
 8007480:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007482:	46c0      	nop			; (mov r8, r8)
 8007484:	46bd      	mov	sp, r7
 8007486:	b004      	add	sp, #16
 8007488:	bd80      	pop	{r7, pc}
 800748a:	46c0      	nop			; (mov r8, r8)
 800748c:	200020ac 	.word	0x200020ac
 8007490:	200020b4 	.word	0x200020b4

08007494 <__libc_init_array>:
 8007494:	b570      	push	{r4, r5, r6, lr}
 8007496:	2600      	movs	r6, #0
 8007498:	4d0c      	ldr	r5, [pc, #48]	; (80074cc <__libc_init_array+0x38>)
 800749a:	4c0d      	ldr	r4, [pc, #52]	; (80074d0 <__libc_init_array+0x3c>)
 800749c:	1b64      	subs	r4, r4, r5
 800749e:	10a4      	asrs	r4, r4, #2
 80074a0:	42a6      	cmp	r6, r4
 80074a2:	d109      	bne.n	80074b8 <__libc_init_array+0x24>
 80074a4:	2600      	movs	r6, #0
 80074a6:	f000 f8f9 	bl	800769c <_init>
 80074aa:	4d0a      	ldr	r5, [pc, #40]	; (80074d4 <__libc_init_array+0x40>)
 80074ac:	4c0a      	ldr	r4, [pc, #40]	; (80074d8 <__libc_init_array+0x44>)
 80074ae:	1b64      	subs	r4, r4, r5
 80074b0:	10a4      	asrs	r4, r4, #2
 80074b2:	42a6      	cmp	r6, r4
 80074b4:	d105      	bne.n	80074c2 <__libc_init_array+0x2e>
 80074b6:	bd70      	pop	{r4, r5, r6, pc}
 80074b8:	00b3      	lsls	r3, r6, #2
 80074ba:	58eb      	ldr	r3, [r5, r3]
 80074bc:	4798      	blx	r3
 80074be:	3601      	adds	r6, #1
 80074c0:	e7ee      	b.n	80074a0 <__libc_init_array+0xc>
 80074c2:	00b3      	lsls	r3, r6, #2
 80074c4:	58eb      	ldr	r3, [r5, r3]
 80074c6:	4798      	blx	r3
 80074c8:	3601      	adds	r6, #1
 80074ca:	e7f2      	b.n	80074b2 <__libc_init_array+0x1e>
 80074cc:	08007850 	.word	0x08007850
 80074d0:	08007850 	.word	0x08007850
 80074d4:	08007850 	.word	0x08007850
 80074d8:	08007854 	.word	0x08007854

080074dc <__retarget_lock_acquire_recursive>:
 80074dc:	4770      	bx	lr

080074de <__retarget_lock_release_recursive>:
 80074de:	4770      	bx	lr

080074e0 <memcpy>:
 80074e0:	2300      	movs	r3, #0
 80074e2:	b510      	push	{r4, lr}
 80074e4:	429a      	cmp	r2, r3
 80074e6:	d100      	bne.n	80074ea <memcpy+0xa>
 80074e8:	bd10      	pop	{r4, pc}
 80074ea:	5ccc      	ldrb	r4, [r1, r3]
 80074ec:	54c4      	strb	r4, [r0, r3]
 80074ee:	3301      	adds	r3, #1
 80074f0:	e7f8      	b.n	80074e4 <memcpy+0x4>

080074f2 <memset>:
 80074f2:	0003      	movs	r3, r0
 80074f4:	1882      	adds	r2, r0, r2
 80074f6:	4293      	cmp	r3, r2
 80074f8:	d100      	bne.n	80074fc <memset+0xa>
 80074fa:	4770      	bx	lr
 80074fc:	7019      	strb	r1, [r3, #0]
 80074fe:	3301      	adds	r3, #1
 8007500:	e7f9      	b.n	80074f6 <memset+0x4>

08007502 <cleanup_glue>:
 8007502:	b570      	push	{r4, r5, r6, lr}
 8007504:	000d      	movs	r5, r1
 8007506:	6809      	ldr	r1, [r1, #0]
 8007508:	0004      	movs	r4, r0
 800750a:	2900      	cmp	r1, #0
 800750c:	d001      	beq.n	8007512 <cleanup_glue+0x10>
 800750e:	f7ff fff8 	bl	8007502 <cleanup_glue>
 8007512:	0029      	movs	r1, r5
 8007514:	0020      	movs	r0, r4
 8007516:	f000 f877 	bl	8007608 <_free_r>
 800751a:	bd70      	pop	{r4, r5, r6, pc}

0800751c <_reclaim_reent>:
 800751c:	4b31      	ldr	r3, [pc, #196]	; (80075e4 <_reclaim_reent+0xc8>)
 800751e:	b570      	push	{r4, r5, r6, lr}
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	0004      	movs	r4, r0
 8007524:	4283      	cmp	r3, r0
 8007526:	d049      	beq.n	80075bc <_reclaim_reent+0xa0>
 8007528:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800752a:	2b00      	cmp	r3, #0
 800752c:	d00a      	beq.n	8007544 <_reclaim_reent+0x28>
 800752e:	2500      	movs	r5, #0
 8007530:	68db      	ldr	r3, [r3, #12]
 8007532:	42ab      	cmp	r3, r5
 8007534:	d147      	bne.n	80075c6 <_reclaim_reent+0xaa>
 8007536:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007538:	6819      	ldr	r1, [r3, #0]
 800753a:	2900      	cmp	r1, #0
 800753c:	d002      	beq.n	8007544 <_reclaim_reent+0x28>
 800753e:	0020      	movs	r0, r4
 8007540:	f000 f862 	bl	8007608 <_free_r>
 8007544:	6961      	ldr	r1, [r4, #20]
 8007546:	2900      	cmp	r1, #0
 8007548:	d002      	beq.n	8007550 <_reclaim_reent+0x34>
 800754a:	0020      	movs	r0, r4
 800754c:	f000 f85c 	bl	8007608 <_free_r>
 8007550:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007552:	2900      	cmp	r1, #0
 8007554:	d002      	beq.n	800755c <_reclaim_reent+0x40>
 8007556:	0020      	movs	r0, r4
 8007558:	f000 f856 	bl	8007608 <_free_r>
 800755c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800755e:	2900      	cmp	r1, #0
 8007560:	d002      	beq.n	8007568 <_reclaim_reent+0x4c>
 8007562:	0020      	movs	r0, r4
 8007564:	f000 f850 	bl	8007608 <_free_r>
 8007568:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800756a:	2900      	cmp	r1, #0
 800756c:	d002      	beq.n	8007574 <_reclaim_reent+0x58>
 800756e:	0020      	movs	r0, r4
 8007570:	f000 f84a 	bl	8007608 <_free_r>
 8007574:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8007576:	2900      	cmp	r1, #0
 8007578:	d002      	beq.n	8007580 <_reclaim_reent+0x64>
 800757a:	0020      	movs	r0, r4
 800757c:	f000 f844 	bl	8007608 <_free_r>
 8007580:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8007582:	2900      	cmp	r1, #0
 8007584:	d002      	beq.n	800758c <_reclaim_reent+0x70>
 8007586:	0020      	movs	r0, r4
 8007588:	f000 f83e 	bl	8007608 <_free_r>
 800758c:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800758e:	2900      	cmp	r1, #0
 8007590:	d002      	beq.n	8007598 <_reclaim_reent+0x7c>
 8007592:	0020      	movs	r0, r4
 8007594:	f000 f838 	bl	8007608 <_free_r>
 8007598:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800759a:	2900      	cmp	r1, #0
 800759c:	d002      	beq.n	80075a4 <_reclaim_reent+0x88>
 800759e:	0020      	movs	r0, r4
 80075a0:	f000 f832 	bl	8007608 <_free_r>
 80075a4:	69a3      	ldr	r3, [r4, #24]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d008      	beq.n	80075bc <_reclaim_reent+0xa0>
 80075aa:	0020      	movs	r0, r4
 80075ac:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80075ae:	4798      	blx	r3
 80075b0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80075b2:	2900      	cmp	r1, #0
 80075b4:	d002      	beq.n	80075bc <_reclaim_reent+0xa0>
 80075b6:	0020      	movs	r0, r4
 80075b8:	f7ff ffa3 	bl	8007502 <cleanup_glue>
 80075bc:	bd70      	pop	{r4, r5, r6, pc}
 80075be:	5949      	ldr	r1, [r1, r5]
 80075c0:	2900      	cmp	r1, #0
 80075c2:	d108      	bne.n	80075d6 <_reclaim_reent+0xba>
 80075c4:	3504      	adds	r5, #4
 80075c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80075c8:	68d9      	ldr	r1, [r3, #12]
 80075ca:	2d80      	cmp	r5, #128	; 0x80
 80075cc:	d1f7      	bne.n	80075be <_reclaim_reent+0xa2>
 80075ce:	0020      	movs	r0, r4
 80075d0:	f000 f81a 	bl	8007608 <_free_r>
 80075d4:	e7af      	b.n	8007536 <_reclaim_reent+0x1a>
 80075d6:	680e      	ldr	r6, [r1, #0]
 80075d8:	0020      	movs	r0, r4
 80075da:	f000 f815 	bl	8007608 <_free_r>
 80075de:	0031      	movs	r1, r6
 80075e0:	e7ee      	b.n	80075c0 <_reclaim_reent+0xa4>
 80075e2:	46c0      	nop			; (mov r8, r8)
 80075e4:	20000010 	.word	0x20000010

080075e8 <__malloc_lock>:
 80075e8:	b510      	push	{r4, lr}
 80075ea:	4802      	ldr	r0, [pc, #8]	; (80075f4 <__malloc_lock+0xc>)
 80075ec:	f7ff ff76 	bl	80074dc <__retarget_lock_acquire_recursive>
 80075f0:	bd10      	pop	{r4, pc}
 80075f2:	46c0      	nop			; (mov r8, r8)
 80075f4:	200020cc 	.word	0x200020cc

080075f8 <__malloc_unlock>:
 80075f8:	b510      	push	{r4, lr}
 80075fa:	4802      	ldr	r0, [pc, #8]	; (8007604 <__malloc_unlock+0xc>)
 80075fc:	f7ff ff6f 	bl	80074de <__retarget_lock_release_recursive>
 8007600:	bd10      	pop	{r4, pc}
 8007602:	46c0      	nop			; (mov r8, r8)
 8007604:	200020cc 	.word	0x200020cc

08007608 <_free_r>:
 8007608:	b570      	push	{r4, r5, r6, lr}
 800760a:	0005      	movs	r5, r0
 800760c:	2900      	cmp	r1, #0
 800760e:	d010      	beq.n	8007632 <_free_r+0x2a>
 8007610:	1f0c      	subs	r4, r1, #4
 8007612:	6823      	ldr	r3, [r4, #0]
 8007614:	2b00      	cmp	r3, #0
 8007616:	da00      	bge.n	800761a <_free_r+0x12>
 8007618:	18e4      	adds	r4, r4, r3
 800761a:	0028      	movs	r0, r5
 800761c:	f7ff ffe4 	bl	80075e8 <__malloc_lock>
 8007620:	4a1d      	ldr	r2, [pc, #116]	; (8007698 <_free_r+0x90>)
 8007622:	6813      	ldr	r3, [r2, #0]
 8007624:	2b00      	cmp	r3, #0
 8007626:	d105      	bne.n	8007634 <_free_r+0x2c>
 8007628:	6063      	str	r3, [r4, #4]
 800762a:	6014      	str	r4, [r2, #0]
 800762c:	0028      	movs	r0, r5
 800762e:	f7ff ffe3 	bl	80075f8 <__malloc_unlock>
 8007632:	bd70      	pop	{r4, r5, r6, pc}
 8007634:	42a3      	cmp	r3, r4
 8007636:	d908      	bls.n	800764a <_free_r+0x42>
 8007638:	6821      	ldr	r1, [r4, #0]
 800763a:	1860      	adds	r0, r4, r1
 800763c:	4283      	cmp	r3, r0
 800763e:	d1f3      	bne.n	8007628 <_free_r+0x20>
 8007640:	6818      	ldr	r0, [r3, #0]
 8007642:	685b      	ldr	r3, [r3, #4]
 8007644:	1841      	adds	r1, r0, r1
 8007646:	6021      	str	r1, [r4, #0]
 8007648:	e7ee      	b.n	8007628 <_free_r+0x20>
 800764a:	001a      	movs	r2, r3
 800764c:	685b      	ldr	r3, [r3, #4]
 800764e:	2b00      	cmp	r3, #0
 8007650:	d001      	beq.n	8007656 <_free_r+0x4e>
 8007652:	42a3      	cmp	r3, r4
 8007654:	d9f9      	bls.n	800764a <_free_r+0x42>
 8007656:	6811      	ldr	r1, [r2, #0]
 8007658:	1850      	adds	r0, r2, r1
 800765a:	42a0      	cmp	r0, r4
 800765c:	d10b      	bne.n	8007676 <_free_r+0x6e>
 800765e:	6820      	ldr	r0, [r4, #0]
 8007660:	1809      	adds	r1, r1, r0
 8007662:	1850      	adds	r0, r2, r1
 8007664:	6011      	str	r1, [r2, #0]
 8007666:	4283      	cmp	r3, r0
 8007668:	d1e0      	bne.n	800762c <_free_r+0x24>
 800766a:	6818      	ldr	r0, [r3, #0]
 800766c:	685b      	ldr	r3, [r3, #4]
 800766e:	1841      	adds	r1, r0, r1
 8007670:	6011      	str	r1, [r2, #0]
 8007672:	6053      	str	r3, [r2, #4]
 8007674:	e7da      	b.n	800762c <_free_r+0x24>
 8007676:	42a0      	cmp	r0, r4
 8007678:	d902      	bls.n	8007680 <_free_r+0x78>
 800767a:	230c      	movs	r3, #12
 800767c:	602b      	str	r3, [r5, #0]
 800767e:	e7d5      	b.n	800762c <_free_r+0x24>
 8007680:	6821      	ldr	r1, [r4, #0]
 8007682:	1860      	adds	r0, r4, r1
 8007684:	4283      	cmp	r3, r0
 8007686:	d103      	bne.n	8007690 <_free_r+0x88>
 8007688:	6818      	ldr	r0, [r3, #0]
 800768a:	685b      	ldr	r3, [r3, #4]
 800768c:	1841      	adds	r1, r0, r1
 800768e:	6021      	str	r1, [r4, #0]
 8007690:	6063      	str	r3, [r4, #4]
 8007692:	6054      	str	r4, [r2, #4]
 8007694:	e7ca      	b.n	800762c <_free_r+0x24>
 8007696:	46c0      	nop			; (mov r8, r8)
 8007698:	200020d0 	.word	0x200020d0

0800769c <_init>:
 800769c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800769e:	46c0      	nop			; (mov r8, r8)
 80076a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076a2:	bc08      	pop	{r3}
 80076a4:	469e      	mov	lr, r3
 80076a6:	4770      	bx	lr

080076a8 <_fini>:
 80076a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076aa:	46c0      	nop			; (mov r8, r8)
 80076ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076ae:	bc08      	pop	{r3}
 80076b0:	469e      	mov	lr, r3
 80076b2:	4770      	bx	lr
